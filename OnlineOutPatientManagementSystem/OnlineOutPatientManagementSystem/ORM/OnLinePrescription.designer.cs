#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnlineOutPatientManagementSystem.ORM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OnLinePrescription")]
	public partial class OnLinePrescriptionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdviceBangla(AdviceBangla instance);
    partial void UpdateAdviceBangla(AdviceBangla instance);
    partial void DeleteAdviceBangla(AdviceBangla instance);
    partial void InsertTransectionDetail(TransectionDetail instance);
    partial void UpdateTransectionDetail(TransectionDetail instance);
    partial void DeleteTransectionDetail(TransectionDetail instance);
    partial void InsertAspNetRole(AspNetRole instance);
    partial void UpdateAspNetRole(AspNetRole instance);
    partial void DeleteAspNetRole(AspNetRole instance);
    partial void InsertAspNetUserClaim(AspNetUserClaim instance);
    partial void UpdateAspNetUserClaim(AspNetUserClaim instance);
    partial void DeleteAspNetUserClaim(AspNetUserClaim instance);
    partial void InsertAspNetUserLogin(AspNetUserLogin instance);
    partial void UpdateAspNetUserLogin(AspNetUserLogin instance);
    partial void DeleteAspNetUserLogin(AspNetUserLogin instance);
    partial void InsertAspNetUserRole(AspNetUserRole instance);
    partial void UpdateAspNetUserRole(AspNetUserRole instance);
    partial void DeleteAspNetUserRole(AspNetUserRole instance);
    partial void InsertChiefComplaince(ChiefComplaince instance);
    partial void UpdateChiefComplaince(ChiefComplaince instance);
    partial void DeleteChiefComplaince(ChiefComplaince instance);
    partial void InsertClinicVisitHistory(ClinicVisitHistory instance);
    partial void UpdateClinicVisitHistory(ClinicVisitHistory instance);
    partial void DeleteClinicVisitHistory(ClinicVisitHistory instance);
    partial void InsertConfirmDx(ConfirmDx instance);
    partial void UpdateConfirmDx(ConfirmDx instance);
    partial void DeleteConfirmDx(ConfirmDx instance);
    partial void InsertDentalAdvice(DentalAdvice instance);
    partial void UpdateDentalAdvice(DentalAdvice instance);
    partial void DeleteDentalAdvice(DentalAdvice instance);
    partial void InsertDentalSign(DentalSign instance);
    partial void UpdateDentalSign(DentalSign instance);
    partial void DeleteDentalSign(DentalSign instance);
    partial void InsertDifferentialDx(DifferentialDx instance);
    partial void UpdateDifferentialDx(DifferentialDx instance);
    partial void DeleteDifferentialDx(DifferentialDx instance);
    partial void InsertDoctorVisitInfo(DoctorVisitInfo instance);
    partial void UpdateDoctorVisitInfo(DoctorVisitInfo instance);
    partial void DeleteDoctorVisitInfo(DoctorVisitInfo instance);
    partial void InsertFullFreeDescription(FullFreeDescription instance);
    partial void UpdateFullFreeDescription(FullFreeDescription instance);
    partial void DeleteFullFreeDescription(FullFreeDescription instance);
    partial void InsertInvestigation(Investigation instance);
    partial void UpdateInvestigation(Investigation instance);
    partial void DeleteInvestigation(Investigation instance);
    partial void InsertLabTestInfo(LabTestInfo instance);
    partial void UpdateLabTestInfo(LabTestInfo instance);
    partial void DeleteLabTestInfo(LabTestInfo instance);
    partial void InsertLabTestInfoDetail(LabTestInfoDetail instance);
    partial void UpdateLabTestInfoDetail(LabTestInfoDetail instance);
    partial void DeleteLabTestInfoDetail(LabTestInfoDetail instance);
    partial void Insertlkp_AdviceBangla(lkp_AdviceBangla instance);
    partial void Updatelkp_AdviceBangla(lkp_AdviceBangla instance);
    partial void Deletelkp_AdviceBangla(lkp_AdviceBangla instance);
    partial void Insertlkp_AreaDetail(lkp_AreaDetail instance);
    partial void Updatelkp_AreaDetail(lkp_AreaDetail instance);
    partial void Deletelkp_AreaDetail(lkp_AreaDetail instance);
    partial void Insertlkp_Cashier(lkp_Cashier instance);
    partial void Updatelkp_Cashier(lkp_Cashier instance);
    partial void Deletelkp_Cashier(lkp_Cashier instance);
    partial void Insertlkp_ChiefComplaince(lkp_ChiefComplaince instance);
    partial void Updatelkp_ChiefComplaince(lkp_ChiefComplaince instance);
    partial void Deletelkp_ChiefComplaince(lkp_ChiefComplaince instance);
    partial void Insertlkp_ConfirmDx(lkp_ConfirmDx instance);
    partial void Updatelkp_ConfirmDx(lkp_ConfirmDx instance);
    partial void Deletelkp_ConfirmDx(lkp_ConfirmDx instance);
    partial void Insertlkp_DentalAdvice(lkp_DentalAdvice instance);
    partial void Updatelkp_DentalAdvice(lkp_DentalAdvice instance);
    partial void Deletelkp_DentalAdvice(lkp_DentalAdvice instance);
    partial void Insertlkp_DentalSign(lkp_DentalSign instance);
    partial void Updatelkp_DentalSign(lkp_DentalSign instance);
    partial void Deletelkp_DentalSign(lkp_DentalSign instance);
    partial void Insertlkp_District(lkp_District instance);
    partial void Updatelkp_District(lkp_District instance);
    partial void Deletelkp_District(lkp_District instance);
    partial void Insertlkp_Division(lkp_Division instance);
    partial void Updatelkp_Division(lkp_Division instance);
    partial void Deletelkp_Division(lkp_Division instance);
    partial void Insertlkp_DoctorsName(lkp_DoctorsName instance);
    partial void Updatelkp_DoctorsName(lkp_DoctorsName instance);
    partial void Deletelkp_DoctorsName(lkp_DoctorsName instance);
    partial void Insertlkp_Frequency(lkp_Frequency instance);
    partial void Updatelkp_Frequency(lkp_Frequency instance);
    partial void Deletelkp_Frequency(lkp_Frequency instance);
    partial void Insertlkp_GenericName(lkp_GenericName instance);
    partial void Updatelkp_GenericName(lkp_GenericName instance);
    partial void Deletelkp_GenericName(lkp_GenericName instance);
    partial void Insertlkp_ICD10Code(lkp_ICD10Code instance);
    partial void Updatelkp_ICD10Code(lkp_ICD10Code instance);
    partial void Deletelkp_ICD10Code(lkp_ICD10Code instance);
    partial void Insertlkp_Investigation(lkp_Investigation instance);
    partial void Updatelkp_Investigation(lkp_Investigation instance);
    partial void Deletelkp_Investigation(lkp_Investigation instance);
    partial void Insertlkp_LabName(lkp_LabName instance);
    partial void Updatelkp_LabName(lkp_LabName instance);
    partial void Deletelkp_LabName(lkp_LabName instance);
    partial void Insertlkp_MedicineContain(lkp_MedicineContain instance);
    partial void Updatelkp_MedicineContain(lkp_MedicineContain instance);
    partial void Deletelkp_MedicineContain(lkp_MedicineContain instance);
    partial void Insertlkp_MedicineForm(lkp_MedicineForm instance);
    partial void Updatelkp_MedicineForm(lkp_MedicineForm instance);
    partial void Deletelkp_MedicineForm(lkp_MedicineForm instance);
    partial void Insertlkp_MedicineName(lkp_MedicineName instance);
    partial void Updatelkp_MedicineName(lkp_MedicineName instance);
    partial void Deletelkp_MedicineName(lkp_MedicineName instance);
    partial void Insertlkp_NegativeFinding(lkp_NegativeFinding instance);
    partial void Updatelkp_NegativeFinding(lkp_NegativeFinding instance);
    partial void Deletelkp_NegativeFinding(lkp_NegativeFinding instance);
    partial void Insertlkp_OnExamination(lkp_OnExamination instance);
    partial void Updatelkp_OnExamination(lkp_OnExamination instance);
    partial void Deletelkp_OnExamination(lkp_OnExamination instance);
    partial void Insertlkp_PositiveFinding(lkp_PositiveFinding instance);
    partial void Updatelkp_PositiveFinding(lkp_PositiveFinding instance);
    partial void Deletelkp_PositiveFinding(lkp_PositiveFinding instance);
    partial void Insertlkp_ProvisionalDx(lkp_ProvisionalDx instance);
    partial void Updatelkp_ProvisionalDx(lkp_ProvisionalDx instance);
    partial void Deletelkp_ProvisionalDx(lkp_ProvisionalDx instance);
    partial void Insertlkp_Reffered(lkp_Reffered instance);
    partial void Updatelkp_Reffered(lkp_Reffered instance);
    partial void Deletelkp_Reffered(lkp_Reffered instance);
    partial void Insertlkp_RegistrationFee(lkp_RegistrationFee instance);
    partial void Updatelkp_RegistrationFee(lkp_RegistrationFee instance);
    partial void Deletelkp_RegistrationFee(lkp_RegistrationFee instance);
    partial void Insertlkp_Relationship(lkp_Relationship instance);
    partial void Updatelkp_Relationship(lkp_Relationship instance);
    partial void Deletelkp_Relationship(lkp_Relationship instance);
    partial void Insertlkp_StaffInfo(lkp_StaffInfo instance);
    partial void Updatelkp_StaffInfo(lkp_StaffInfo instance);
    partial void Deletelkp_StaffInfo(lkp_StaffInfo instance);
    partial void Insertlkp_StrengthUnit(lkp_StrengthUnit instance);
    partial void Updatelkp_StrengthUnit(lkp_StrengthUnit instance);
    partial void Deletelkp_StrengthUnit(lkp_StrengthUnit instance);
    partial void Insertlkp_StudyName(lkp_StudyName instance);
    partial void Updatelkp_StudyName(lkp_StudyName instance);
    partial void Deletelkp_StudyName(lkp_StudyName instance);
    partial void Insertlkp_TestName(lkp_TestName instance);
    partial void Updatelkp_TestName(lkp_TestName instance);
    partial void Deletelkp_TestName(lkp_TestName instance);
    partial void Insertlkp_TestNameDetail(lkp_TestNameDetail instance);
    partial void Updatelkp_TestNameDetail(lkp_TestNameDetail instance);
    partial void Deletelkp_TestNameDetail(lkp_TestNameDetail instance);
    partial void Insertlkp_ThanaUpzilla(lkp_ThanaUpzilla instance);
    partial void Updatelkp_ThanaUpzilla(lkp_ThanaUpzilla instance);
    partial void Deletelkp_ThanaUpzilla(lkp_ThanaUpzilla instance);
    partial void Insertlkp_TransectionType(lkp_TransectionType instance);
    partial void Updatelkp_TransectionType(lkp_TransectionType instance);
    partial void Deletelkp_TransectionType(lkp_TransectionType instance);
    partial void Insertlkp_Treatment(lkp_Treatment instance);
    partial void Updatelkp_Treatment(lkp_Treatment instance);
    partial void Deletelkp_Treatment(lkp_Treatment instance);
    partial void Insertlkp_Union(lkp_Union instance);
    partial void Updatelkp_Union(lkp_Union instance);
    partial void Deletelkp_Union(lkp_Union instance);
    partial void Insertlkp_Village(lkp_Village instance);
    partial void Updatelkp_Village(lkp_Village instance);
    partial void Deletelkp_Village(lkp_Village instance);
    partial void InsertMedicineDetail(MedicineDetail instance);
    partial void UpdateMedicineDetail(MedicineDetail instance);
    partial void DeleteMedicineDetail(MedicineDetail instance);
    partial void InsertMedicineReceive(MedicineReceive instance);
    partial void UpdateMedicineReceive(MedicineReceive instance);
    partial void DeleteMedicineReceive(MedicineReceive instance);
    partial void InsertMedicineSale(MedicineSale instance);
    partial void UpdateMedicineSale(MedicineSale instance);
    partial void DeleteMedicineSale(MedicineSale instance);
    partial void InsertMedicineSalesDetail(MedicineSalesDetail instance);
    partial void UpdateMedicineSalesDetail(MedicineSalesDetail instance);
    partial void DeleteMedicineSalesDetail(MedicineSalesDetail instance);
    partial void InsertNegativeFinding(NegativeFinding instance);
    partial void UpdateNegativeFinding(NegativeFinding instance);
    partial void DeleteNegativeFinding(NegativeFinding instance);
    partial void InsertPatientBasicInfo(PatientBasicInfo instance);
    partial void UpdatePatientBasicInfo(PatientBasicInfo instance);
    partial void DeletePatientBasicInfo(PatientBasicInfo instance);
    partial void InsertPositiveFinding(PositiveFinding instance);
    partial void UpdatePositiveFinding(PositiveFinding instance);
    partial void DeletePositiveFinding(PositiveFinding instance);
    partial void InsertProvisionalDx(ProvisionalDx instance);
    partial void UpdateProvisionalDx(ProvisionalDx instance);
    partial void DeleteProvisionalDx(ProvisionalDx instance);
    partial void InsertAspNetUser(AspNetUser instance);
    partial void UpdateAspNetUser(AspNetUser instance);
    partial void DeleteAspNetUser(AspNetUser instance);
    #endregion
		
		public OnLinePrescriptionDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OnLinePrescriptionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnLinePrescriptionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnLinePrescriptionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnLinePrescriptionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AdviceBangla> AdviceBanglas
		{
			get
			{
				return this.GetTable<AdviceBangla>();
			}
		}
		
		public System.Data.Linq.Table<TransectionDetail> TransectionDetails
		{
			get
			{
				return this.GetTable<TransectionDetail>();
			}
		}
		
		public System.Data.Linq.Table<AspNetRole> AspNetRoles
		{
			get
			{
				return this.GetTable<AspNetRole>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this.GetTable<AspNetUserClaim>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this.GetTable<AspNetUserLogin>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this.GetTable<AspNetUserRole>();
			}
		}
		
		public System.Data.Linq.Table<ChiefComplaince> ChiefComplainces
		{
			get
			{
				return this.GetTable<ChiefComplaince>();
			}
		}
		
		public System.Data.Linq.Table<ClinicVisitHistory> ClinicVisitHistories
		{
			get
			{
				return this.GetTable<ClinicVisitHistory>();
			}
		}
		
		public System.Data.Linq.Table<ConfirmDx> ConfirmDxes
		{
			get
			{
				return this.GetTable<ConfirmDx>();
			}
		}
		
		public System.Data.Linq.Table<DentalAdvice> DentalAdvices
		{
			get
			{
				return this.GetTable<DentalAdvice>();
			}
		}
		
		public System.Data.Linq.Table<DentalSign> DentalSigns
		{
			get
			{
				return this.GetTable<DentalSign>();
			}
		}
		
		public System.Data.Linq.Table<DifferentialDx> DifferentialDxes
		{
			get
			{
				return this.GetTable<DifferentialDx>();
			}
		}
		
		public System.Data.Linq.Table<DoctorVisitInfo> DoctorVisitInfos
		{
			get
			{
				return this.GetTable<DoctorVisitInfo>();
			}
		}
		
		public System.Data.Linq.Table<FullFreeDescription> FullFreeDescriptions
		{
			get
			{
				return this.GetTable<FullFreeDescription>();
			}
		}
		
		public System.Data.Linq.Table<Investigation> Investigations
		{
			get
			{
				return this.GetTable<Investigation>();
			}
		}
		
		public System.Data.Linq.Table<LabTestInfo> LabTestInfos
		{
			get
			{
				return this.GetTable<LabTestInfo>();
			}
		}
		
		public System.Data.Linq.Table<LabTestInfoDetail> LabTestInfoDetails
		{
			get
			{
				return this.GetTable<LabTestInfoDetail>();
			}
		}
		
		public System.Data.Linq.Table<lkp_AdviceBangla> lkp_AdviceBanglas
		{
			get
			{
				return this.GetTable<lkp_AdviceBangla>();
			}
		}
		
		public System.Data.Linq.Table<lkp_AreaDetail> lkp_AreaDetails
		{
			get
			{
				return this.GetTable<lkp_AreaDetail>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Cashier> lkp_Cashiers
		{
			get
			{
				return this.GetTable<lkp_Cashier>();
			}
		}
		
		public System.Data.Linq.Table<lkp_ChiefComplaince> lkp_ChiefComplainces
		{
			get
			{
				return this.GetTable<lkp_ChiefComplaince>();
			}
		}
		
		public System.Data.Linq.Table<lkp_ConfirmDx> lkp_ConfirmDxes
		{
			get
			{
				return this.GetTable<lkp_ConfirmDx>();
			}
		}
		
		public System.Data.Linq.Table<lkp_DentalAdvice> lkp_DentalAdvices
		{
			get
			{
				return this.GetTable<lkp_DentalAdvice>();
			}
		}
		
		public System.Data.Linq.Table<lkp_DentalSign> lkp_DentalSigns
		{
			get
			{
				return this.GetTable<lkp_DentalSign>();
			}
		}
		
		public System.Data.Linq.Table<lkp_District> lkp_Districts
		{
			get
			{
				return this.GetTable<lkp_District>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Division> lkp_Divisions
		{
			get
			{
				return this.GetTable<lkp_Division>();
			}
		}
		
		public System.Data.Linq.Table<lkp_DoctorsName> lkp_DoctorsNames
		{
			get
			{
				return this.GetTable<lkp_DoctorsName>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Frequency> lkp_Frequencies
		{
			get
			{
				return this.GetTable<lkp_Frequency>();
			}
		}
		
		public System.Data.Linq.Table<lkp_GenericName> lkp_GenericNames
		{
			get
			{
				return this.GetTable<lkp_GenericName>();
			}
		}
		
		public System.Data.Linq.Table<lkp_ICD10Code> lkp_ICD10Codes
		{
			get
			{
				return this.GetTable<lkp_ICD10Code>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Investigation> lkp_Investigations
		{
			get
			{
				return this.GetTable<lkp_Investigation>();
			}
		}
		
		public System.Data.Linq.Table<lkp_LabName> lkp_LabNames
		{
			get
			{
				return this.GetTable<lkp_LabName>();
			}
		}
		
		public System.Data.Linq.Table<lkp_MedicineContain> lkp_MedicineContains
		{
			get
			{
				return this.GetTable<lkp_MedicineContain>();
			}
		}
		
		public System.Data.Linq.Table<lkp_MedicineForm> lkp_MedicineForms
		{
			get
			{
				return this.GetTable<lkp_MedicineForm>();
			}
		}
		
		public System.Data.Linq.Table<lkp_MedicineName> lkp_MedicineNames
		{
			get
			{
				return this.GetTable<lkp_MedicineName>();
			}
		}
		
		public System.Data.Linq.Table<lkp_NegativeFinding> lkp_NegativeFindings
		{
			get
			{
				return this.GetTable<lkp_NegativeFinding>();
			}
		}
		
		public System.Data.Linq.Table<lkp_OnExamination> lkp_OnExaminations
		{
			get
			{
				return this.GetTable<lkp_OnExamination>();
			}
		}
		
		public System.Data.Linq.Table<lkp_PositiveFinding> lkp_PositiveFindings
		{
			get
			{
				return this.GetTable<lkp_PositiveFinding>();
			}
		}
		
		public System.Data.Linq.Table<lkp_ProvisionalDx> lkp_ProvisionalDxes
		{
			get
			{
				return this.GetTable<lkp_ProvisionalDx>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Reffered> lkp_Reffereds
		{
			get
			{
				return this.GetTable<lkp_Reffered>();
			}
		}
		
		public System.Data.Linq.Table<lkp_RegistrationFee> lkp_RegistrationFees
		{
			get
			{
				return this.GetTable<lkp_RegistrationFee>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Relationship> lkp_Relationships
		{
			get
			{
				return this.GetTable<lkp_Relationship>();
			}
		}
		
		public System.Data.Linq.Table<lkp_StaffInfo> lkp_StaffInfos
		{
			get
			{
				return this.GetTable<lkp_StaffInfo>();
			}
		}
		
		public System.Data.Linq.Table<lkp_StrengthUnit> lkp_StrengthUnits
		{
			get
			{
				return this.GetTable<lkp_StrengthUnit>();
			}
		}
		
		public System.Data.Linq.Table<lkp_StudyName> lkp_StudyNames
		{
			get
			{
				return this.GetTable<lkp_StudyName>();
			}
		}
		
		public System.Data.Linq.Table<lkp_TestName> lkp_TestNames
		{
			get
			{
				return this.GetTable<lkp_TestName>();
			}
		}
		
		public System.Data.Linq.Table<lkp_TestNameDetail> lkp_TestNameDetails
		{
			get
			{
				return this.GetTable<lkp_TestNameDetail>();
			}
		}
		
		public System.Data.Linq.Table<lkp_ThanaUpzilla> lkp_ThanaUpzillas
		{
			get
			{
				return this.GetTable<lkp_ThanaUpzilla>();
			}
		}
		
		public System.Data.Linq.Table<lkp_TransectionType> lkp_TransectionTypes
		{
			get
			{
				return this.GetTable<lkp_TransectionType>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Treatment> lkp_Treatments
		{
			get
			{
				return this.GetTable<lkp_Treatment>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Union> lkp_Unions
		{
			get
			{
				return this.GetTable<lkp_Union>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Village> lkp_Villages
		{
			get
			{
				return this.GetTable<lkp_Village>();
			}
		}
		
		public System.Data.Linq.Table<MedicineDetail> MedicineDetails
		{
			get
			{
				return this.GetTable<MedicineDetail>();
			}
		}
		
		public System.Data.Linq.Table<MedicineReceive> MedicineReceives
		{
			get
			{
				return this.GetTable<MedicineReceive>();
			}
		}
		
		public System.Data.Linq.Table<MedicineSale> MedicineSales
		{
			get
			{
				return this.GetTable<MedicineSale>();
			}
		}
		
		public System.Data.Linq.Table<MedicineSalesDetail> MedicineSalesDetails
		{
			get
			{
				return this.GetTable<MedicineSalesDetail>();
			}
		}
		
		public System.Data.Linq.Table<NegativeFinding> NegativeFindings
		{
			get
			{
				return this.GetTable<NegativeFinding>();
			}
		}
		
		public System.Data.Linq.Table<PatientBasicInfo> PatientBasicInfos
		{
			get
			{
				return this.GetTable<PatientBasicInfo>();
			}
		}
		
		public System.Data.Linq.Table<PositiveFinding> PositiveFindings
		{
			get
			{
				return this.GetTable<PositiveFinding>();
			}
		}
		
		public System.Data.Linq.Table<ProvisionalDx> ProvisionalDxes
		{
			get
			{
				return this.GetTable<ProvisionalDx>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUser> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUser>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_InsertlkpAdviceBangla", IsComposable=true)]
		public object sp_InsertlkpAdviceBangla([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Advice", DbType="NVarChar(150)")] string advice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), advice, retValue);
			retValue = ((string)(result.GetParameterValue(1)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demo.usp_DemoReset", IsComposable=true)]
		public object usp_DemoReset()
		{
			return ((object)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_InsertlkpChiefCompliance", IsComposable=true)]
		public object sp_InsertlkpChiefCompliance([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CCGroup", DbType="NVarChar(50)")] string cCGroup, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CC", DbType="NVarChar(50)")] string cC, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cCGroup, cC, retValue);
			retValue = ((string)(result.GetParameterValue(2)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_InsertlkpConfirmDx", IsComposable=true)]
		public object sp_InsertlkpConfirmDx([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ConfirmDx", DbType="NVarChar(100)")] string confirmDx, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), confirmDx, retValue);
			retValue = ((string)(result.GetParameterValue(1)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_InsertlkpInvestigations", IsComposable=true)]
		public object sp_InsertlkpInvestigations([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Investigation", DbType="NVarChar(100)")] string investigation, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), investigation, retValue);
			retValue = ((string)(result.GetParameterValue(1)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_InsertlkpNegativeFindings", IsComposable=true)]
		public object sp_InsertlkpNegativeFindings([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PositiveType", DbType="NVarChar(200)")] string positiveType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), positiveType, retValue);
			retValue = ((string)(result.GetParameterValue(1)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_InsertlkpPositiveFindings", IsComposable=true)]
		public object sp_InsertlkpPositiveFindings([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PositiveType", DbType="NVarChar(200)")] string positiveType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), positiveType, retValue);
			retValue = ((string)(result.GetParameterValue(1)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_InsertlkpProvisionalDx", IsComposable=true)]
		public object sp_InsertlkpProvisionalDx([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProvisionalGroup", DbType="VarChar(50)")] string provisionalGroup, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProvisionalDx", DbType="VarChar(100)")] string provisionalDx, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ICDCode", DbType="VarChar(20)")] string iCDCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), provisionalGroup, provisionalDx, iCDCode, retValue);
			retValue = ((string)(result.GetParameterValue(3)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_rpt_DailyDoctorVisit")]
		public ISingleResult<sp_rpt_DailyDoctorVisitResult> sp_rpt_DailyDoctorVisit([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StDate", DbType="DateTime")] System.Nullable<System.DateTime> stDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="DateTime")] System.Nullable<System.DateTime> endDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), stDate, endDate);
			return ((ISingleResult<sp_rpt_DailyDoctorVisitResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_rpt_DailyVisitByDoctor")]
		public ISingleResult<sp_rpt_DailyVisitByDoctorResult> sp_rpt_DailyVisitByDoctor([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DoctorName", DbType="VarChar(50)")] string doctorName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VisitDate", DbType="DateTime")] System.Nullable<System.DateTime> visitDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), doctorName, visitDate);
			return ((ISingleResult<sp_rpt_DailyVisitByDoctorResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_rpt_DoctorVisitMoneyReceipt")]
		public ISingleResult<sp_rpt_DoctorVisitMoneyReceiptResult> sp_rpt_DoctorVisitMoneyReceipt([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PatientID", DbType="VarChar(11)")] string patientID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patientID);
			return ((ISingleResult<sp_rpt_DoctorVisitMoneyReceiptResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_rpt_LabTestOrder")]
		public ISingleResult<sp_rpt_LabTestOrderResult> sp_rpt_LabTestOrder([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LabTestID", DbType="VarChar(12)")] string labTestID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), labTestID);
			return ((ISingleResult<sp_rpt_LabTestOrderResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_rpt_PrescriptionMain")]
		public ISingleResult<sp_rpt_PrescriptionMainResult> sp_rpt_PrescriptionMain([global::System.Data.Linq.Mapping.ParameterAttribute(Name="VisitID", DbType="VarChar(12)")] string visitID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), visitID);
			return ((ISingleResult<sp_rpt_PrescriptionMainResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_SelectPatientID")]
		public ISingleResult<sp_SelectPatientIDResult> sp_SelectPatientID()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<sp_SelectPatientIDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_SelectStudyName")]
		public ISingleResult<sp_SelectStudyNameResult> sp_SelectStudyName()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<sp_SelectStudyNameResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_UpdatelkpAdviceBangla", IsComposable=true)]
		public object sp_UpdatelkpAdviceBangla([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AdviceCode", DbType="TinyInt")] System.Nullable<byte> adviceCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Advice", DbType="NVarChar(150)")] string advice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), adviceCode, advice, retValue);
			retValue = ((string)(result.GetParameterValue(2)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_UpdatelkpChiefComplaince", IsComposable=true)]
		public object sp_UpdatelkpChiefComplaince([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CCCode", DbType="SmallInt")] System.Nullable<short> cCCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CCGroup", DbType="NVarChar(50)")] string cCGroup, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CC", DbType="NVarChar(50)")] string cC, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cCCode, cCGroup, cC, retValue);
			retValue = ((string)(result.GetParameterValue(3)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_UpdatelkpConfirmDx", IsComposable=true)]
		public object sp_UpdatelkpConfirmDx([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ConfirmDxCode", DbType="SmallInt")] System.Nullable<short> confirmDxCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ConfirmDx", DbType="VarChar(100)")] string confirmDx, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), confirmDxCode, confirmDx, retValue);
			retValue = ((string)(result.GetParameterValue(2)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_UpdatelkpInvestigations", IsComposable=true)]
		public object sp_UpdatelkpInvestigations([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvestigationCode", DbType="SmallInt")] System.Nullable<short> investigationCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Investigation", DbType="VarChar(100)")] string investigation, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), investigationCode, investigation, retValue);
			retValue = ((string)(result.GetParameterValue(2)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_UpdatelkpNegativeFindings", IsComposable=true)]
		public object sp_UpdatelkpNegativeFindings([global::System.Data.Linq.Mapping.ParameterAttribute(Name="NegativeCode", DbType="SmallInt")] System.Nullable<short> negativeCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NegativeType", DbType="VarChar(50)")] string negativeType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), negativeCode, negativeType, retValue);
			retValue = ((string)(result.GetParameterValue(2)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_UpdatelkpPositiveFindings", IsComposable=true)]
		public object sp_UpdatelkpPositiveFindings([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PositiveCode", DbType="SmallInt")] System.Nullable<short> positiveCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PositiveType", DbType="VarChar(50)")] string positiveType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), positiveCode, positiveType, retValue);
			retValue = ((string)(result.GetParameterValue(2)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_UpdatelkpProvisionalDx", IsComposable=true)]
		public object sp_UpdatelkpProvisionalDx([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProvisionalDxCode", DbType="SmallInt")] System.Nullable<short> provisionalDxCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProvisionalGroup", DbType="VarChar(50)")] string provisionalGroup, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProvisionalDx", DbType="VarChar(100)")] string provisionalDx, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ICDCode", DbType="VarChar(20)")] string iCDCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RetValue", DbType="NVarChar(20)")] ref string retValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), provisionalDxCode, provisionalGroup, provisionalDx, iCDCode, retValue);
			retValue = ((string)(result.GetParameterValue(4)));
			return ((object)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Demo.usp_DemoInitSeed", IsComposable=true)]
		public object usp_DemoInitSeed([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> items_per_order)
		{
			return ((object)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), items_per_order).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdviceBangla")]
	public partial class AdviceBangla : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private short _ABCode;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
		private EntityRef<lkp_AdviceBangla> _lkp_AdviceBangla;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnABCodeChanging(short value);
    partial void OnABCodeChanged();
    #endregion
		
		public AdviceBangla()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			this._lkp_AdviceBangla = default(EntityRef<lkp_AdviceBangla>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ABCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ABCode
		{
			get
			{
				return this._ABCode;
			}
			set
			{
				if ((this._ABCode != value))
				{
					if (this._lkp_AdviceBangla.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnABCodeChanging(value);
					this.SendPropertyChanging();
					this._ABCode = value;
					this.SendPropertyChanged("ABCode");
					this.OnABCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_AdviceBangla", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.AdviceBanglas.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.AdviceBanglas.Add(this);
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(string);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_AdviceBangla_AdviceBangla", Storage="_lkp_AdviceBangla", ThisKey="ABCode", OtherKey="ABCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_AdviceBangla lkp_AdviceBangla
		{
			get
			{
				return this._lkp_AdviceBangla.Entity;
			}
			set
			{
				lkp_AdviceBangla previousValue = this._lkp_AdviceBangla.Entity;
				if (((previousValue != value) 
							|| (this._lkp_AdviceBangla.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_AdviceBangla.Entity = null;
						previousValue.AdviceBanglas.Remove(this);
					}
					this._lkp_AdviceBangla.Entity = value;
					if ((value != null))
					{
						value.AdviceBanglas.Add(this);
						this._ABCode = value.ABCode;
					}
					else
					{
						this._ABCode = default(short);
					}
					this.SendPropertyChanged("lkp_AdviceBangla");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransectionDetails")]
	public partial class TransectionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TranID;
		
		private string _LabTestID;
		
		private System.Nullable<System.DateTime> _TranDt;
		
		private System.Nullable<byte> _TranType;
		
		private System.Nullable<decimal> _TranAmount;
		
		private string _UserID;
		
		private string _ModifyUserID;
		
		private System.Nullable<System.DateTime> _ModifyDt;
		
		private EntityRef<LabTestInfo> _LabTestInfo;
		
		private EntityRef<lkp_TransectionType> _lkp_TransectionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTranIDChanging(string value);
    partial void OnTranIDChanged();
    partial void OnLabTestIDChanging(string value);
    partial void OnLabTestIDChanged();
    partial void OnTranDtChanging(System.Nullable<System.DateTime> value);
    partial void OnTranDtChanged();
    partial void OnTranTypeChanging(System.Nullable<byte> value);
    partial void OnTranTypeChanged();
    partial void OnTranAmountChanging(System.Nullable<decimal> value);
    partial void OnTranAmountChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnModifyUserIDChanging(string value);
    partial void OnModifyUserIDChanged();
    partial void OnModifyDtChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDtChanged();
    #endregion
		
		public TransectionDetail()
		{
			this._LabTestInfo = default(EntityRef<LabTestInfo>);
			this._lkp_TransectionType = default(EntityRef<lkp_TransectionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TranID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TranID
		{
			get
			{
				return this._TranID;
			}
			set
			{
				if ((this._TranID != value))
				{
					this.OnTranIDChanging(value);
					this.SendPropertyChanging();
					this._TranID = value;
					this.SendPropertyChanged("TranID");
					this.OnTranIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabTestID", DbType="VarChar(12)")]
		public string LabTestID
		{
			get
			{
				return this._LabTestID;
			}
			set
			{
				if ((this._LabTestID != value))
				{
					if (this._LabTestInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabTestIDChanging(value);
					this.SendPropertyChanging();
					this._LabTestID = value;
					this.SendPropertyChanged("LabTestID");
					this.OnLabTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TranDt", DbType="Date")]
		public System.Nullable<System.DateTime> TranDt
		{
			get
			{
				return this._TranDt;
			}
			set
			{
				if ((this._TranDt != value))
				{
					this.OnTranDtChanging(value);
					this.SendPropertyChanging();
					this._TranDt = value;
					this.SendPropertyChanged("TranDt");
					this.OnTranDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TranType", DbType="TinyInt")]
		public System.Nullable<byte> TranType
		{
			get
			{
				return this._TranType;
			}
			set
			{
				if ((this._TranType != value))
				{
					if (this._lkp_TransectionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTranTypeChanging(value);
					this.SendPropertyChanging();
					this._TranType = value;
					this.SendPropertyChanged("TranType");
					this.OnTranTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TranAmount", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> TranAmount
		{
			get
			{
				return this._TranAmount;
			}
			set
			{
				if ((this._TranAmount != value))
				{
					this.OnTranAmountChanging(value);
					this.SendPropertyChanging();
					this._TranAmount = value;
					this.SendPropertyChanged("TranAmount");
					this.OnTranAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyUserID", DbType="VarChar(50)")]
		public string ModifyUserID
		{
			get
			{
				return this._ModifyUserID;
			}
			set
			{
				if ((this._ModifyUserID != value))
				{
					this.OnModifyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifyUserID = value;
					this.SendPropertyChanged("ModifyUserID");
					this.OnModifyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDt
		{
			get
			{
				return this._ModifyDt;
			}
			set
			{
				if ((this._ModifyDt != value))
				{
					this.OnModifyDtChanging(value);
					this.SendPropertyChanging();
					this._ModifyDt = value;
					this.SendPropertyChanged("ModifyDt");
					this.OnModifyDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabTestInfo_TransectionDetail", Storage="_LabTestInfo", ThisKey="LabTestID", OtherKey="LabTestID", IsForeignKey=true, DeleteRule="CASCADE")]
		public LabTestInfo LabTestInfo
		{
			get
			{
				return this._LabTestInfo.Entity;
			}
			set
			{
				LabTestInfo previousValue = this._LabTestInfo.Entity;
				if (((previousValue != value) 
							|| (this._LabTestInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabTestInfo.Entity = null;
						previousValue.TransectionDetails.Remove(this);
					}
					this._LabTestInfo.Entity = value;
					if ((value != null))
					{
						value.TransectionDetails.Add(this);
						this._LabTestID = value.LabTestID;
					}
					else
					{
						this._LabTestID = default(string);
					}
					this.SendPropertyChanged("LabTestInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_TransectionType_TransectionDetail", Storage="_lkp_TransectionType", ThisKey="TranType", OtherKey="TTCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public lkp_TransectionType lkp_TransectionType
		{
			get
			{
				return this._lkp_TransectionType.Entity;
			}
			set
			{
				lkp_TransectionType previousValue = this._lkp_TransectionType.Entity;
				if (((previousValue != value) 
							|| (this._lkp_TransectionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_TransectionType.Entity = null;
						previousValue.TransectionDetails.Remove(this);
					}
					this._lkp_TransectionType.Entity = value;
					if ((value != null))
					{
						value.TransectionDetails.Add(this);
						this._TranType = value.TTCode;
					}
					else
					{
						this._TranType = default(Nullable<byte>);
					}
					this.SendPropertyChanged("lkp_TransectionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetRoles")]
	public partial class AspNetRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetRole()
		{
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserClaims")]
	public partial class AspNetUserClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private string _ClaimType;
		
		private string _ClaimValue;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnClaimTypeChanging(string value);
    partial void OnClaimTypeChanged();
    partial void OnClaimValueChanging(string value);
    partial void OnClaimValueChanged();
    #endregion
		
		public AspNetUserClaim()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="NVarChar(MAX)")]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this.OnClaimTypeChanging(value);
					this.SendPropertyChanging();
					this._ClaimType = value;
					this.SendPropertyChanged("ClaimType");
					this.OnClaimTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="NVarChar(MAX)")]
		public string ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserClaims.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserClaims.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserLogins")]
	public partial class AspNetUserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoginProvider;
		
		private string _ProviderKey;
		
		private string _UserId;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginProviderChanging(string value);
    partial void OnLoginProviderChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public AspNetUserLogin()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginProvider", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginProvider
		{
			get
			{
				return this._LoginProvider;
			}
			set
			{
				if ((this._LoginProvider != value))
				{
					this.OnLoginProviderChanging(value);
					this.SendPropertyChanging();
					this._LoginProvider = value;
					this.SendPropertyChanged("LoginProvider");
					this.OnLoginProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserLogins.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserLogins.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserRoles")]
	public partial class AspNetUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _RoleId;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(string value);
    partial void OnRoleIdChanged();
    #endregion
		
		public AspNetUserRole()
		{
			this._AspNetRole = default(EntityRef<AspNetRole>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetRole", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChiefComplaince")]
	public partial class ChiefComplaince : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private short _CCCode;
		
		private byte _DurationYY;
		
		private byte _DurationMM;
		
		private byte _DurationDD;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
		private EntityRef<lkp_ChiefComplaince> _lkp_ChiefComplaince;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnCCCodeChanging(short value);
    partial void OnCCCodeChanged();
    partial void OnDurationYYChanging(byte value);
    partial void OnDurationYYChanged();
    partial void OnDurationMMChanging(byte value);
    partial void OnDurationMMChanged();
    partial void OnDurationDDChanging(byte value);
    partial void OnDurationDDChanged();
    #endregion
		
		public ChiefComplaince()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			this._lkp_ChiefComplaince = default(EntityRef<lkp_ChiefComplaince>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short CCCode
		{
			get
			{
				return this._CCCode;
			}
			set
			{
				if ((this._CCCode != value))
				{
					if (this._lkp_ChiefComplaince.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCCCodeChanging(value);
					this.SendPropertyChanging();
					this._CCCode = value;
					this.SendPropertyChanged("CCCode");
					this.OnCCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationYY", DbType="TinyInt NOT NULL")]
		public byte DurationYY
		{
			get
			{
				return this._DurationYY;
			}
			set
			{
				if ((this._DurationYY != value))
				{
					this.OnDurationYYChanging(value);
					this.SendPropertyChanging();
					this._DurationYY = value;
					this.SendPropertyChanged("DurationYY");
					this.OnDurationYYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationMM", DbType="TinyInt NOT NULL")]
		public byte DurationMM
		{
			get
			{
				return this._DurationMM;
			}
			set
			{
				if ((this._DurationMM != value))
				{
					this.OnDurationMMChanging(value);
					this.SendPropertyChanging();
					this._DurationMM = value;
					this.SendPropertyChanged("DurationMM");
					this.OnDurationMMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationDD", DbType="TinyInt NOT NULL")]
		public byte DurationDD
		{
			get
			{
				return this._DurationDD;
			}
			set
			{
				if ((this._DurationDD != value))
				{
					this.OnDurationDDChanging(value);
					this.SendPropertyChanging();
					this._DurationDD = value;
					this.SendPropertyChanged("DurationDD");
					this.OnDurationDDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_ChiefComplaince", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.ChiefComplainces.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.ChiefComplainces.Add(this);
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(string);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_ChiefComplaince_ChiefComplaince", Storage="_lkp_ChiefComplaince", ThisKey="CCCode", OtherKey="CCCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_ChiefComplaince lkp_ChiefComplaince
		{
			get
			{
				return this._lkp_ChiefComplaince.Entity;
			}
			set
			{
				lkp_ChiefComplaince previousValue = this._lkp_ChiefComplaince.Entity;
				if (((previousValue != value) 
							|| (this._lkp_ChiefComplaince.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_ChiefComplaince.Entity = null;
						previousValue.ChiefComplainces.Remove(this);
					}
					this._lkp_ChiefComplaince.Entity = value;
					if ((value != null))
					{
						value.ChiefComplainces.Add(this);
						this._CCCode = value.CCCode;
					}
					else
					{
						this._CCCode = default(short);
					}
					this.SendPropertyChanged("lkp_ChiefComplaince");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClinicVisitHistory")]
	public partial class ClinicVisitHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private string _PatientID;
		
		private System.Nullable<System.DateTime> _VisitDate;
		
		private string _DrugHistory;
		
		private System.Nullable<short> _DrugAllergy;
		
		private System.Nullable<byte> _Anemia;
		
		private System.Nullable<short> _Cervix;
		
		private System.Nullable<byte> _Clubbing;
		
		private string _Heart;
		
		private System.Nullable<byte> _Jaundice;
		
		private System.Nullable<byte> _L_N;
		
		private System.Nullable<byte> _Liver;
		
		private string _Lung;
		
		private System.Nullable<byte> _Oedema;
		
		private string _OS;
		
		private System.Nullable<byte> _Spleen;
		
		private string _Vagina;
		
		private string _Vulva;
		
		private System.Nullable<short> _Systolic;
		
		private System.Nullable<short> _Diastolic;
		
		private System.Nullable<byte> _Pulse;
		
		private System.Nullable<short> _Temperature;
		
		private System.Nullable<byte> _Weight;
		
		private string _Others;
		
		private System.Nullable<short> _ReferredCode;
		
		private System.Nullable<System.DateTime> _NextVisitDt;
		
		private string _UserID;
		
		private string _ModifyUserID;
		
		private System.Nullable<System.DateTime> _ModifyDt;
		
		private EntitySet<AdviceBangla> _AdviceBanglas;
		
		private EntitySet<ChiefComplaince> _ChiefComplainces;
		
		private EntitySet<ConfirmDx> _ConfirmDxes;
		
		private EntitySet<DentalAdvice> _DentalAdvices;
		
		private EntitySet<DentalSign> _DentalSigns;
		
		private EntitySet<DifferentialDx> _DifferentialDxes;
		
		private EntitySet<Investigation> _Investigations;
		
		private EntitySet<MedicineDetail> _MedicineDetails;
		
		private EntitySet<NegativeFinding> _NegativeFindings;
		
		private EntitySet<PositiveFinding> _PositiveFindings;
		
		private EntitySet<ProvisionalDx> _ProvisionalDxes;
		
		private EntityRef<DoctorVisitInfo> _DoctorVisitInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnVisitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVisitDateChanged();
    partial void OnDrugHistoryChanging(string value);
    partial void OnDrugHistoryChanged();
    partial void OnDrugAllergyChanging(System.Nullable<short> value);
    partial void OnDrugAllergyChanged();
    partial void OnAnemiaChanging(System.Nullable<byte> value);
    partial void OnAnemiaChanged();
    partial void OnCervixChanging(System.Nullable<short> value);
    partial void OnCervixChanged();
    partial void OnClubbingChanging(System.Nullable<byte> value);
    partial void OnClubbingChanged();
    partial void OnHeartChanging(string value);
    partial void OnHeartChanged();
    partial void OnJaundiceChanging(System.Nullable<byte> value);
    partial void OnJaundiceChanged();
    partial void OnL_NChanging(System.Nullable<byte> value);
    partial void OnL_NChanged();
    partial void OnLiverChanging(System.Nullable<byte> value);
    partial void OnLiverChanged();
    partial void OnLungChanging(string value);
    partial void OnLungChanged();
    partial void OnOedemaChanging(System.Nullable<byte> value);
    partial void OnOedemaChanged();
    partial void OnOSChanging(string value);
    partial void OnOSChanged();
    partial void OnSpleenChanging(System.Nullable<byte> value);
    partial void OnSpleenChanged();
    partial void OnVaginaChanging(string value);
    partial void OnVaginaChanged();
    partial void OnVulvaChanging(string value);
    partial void OnVulvaChanged();
    partial void OnSystolicChanging(System.Nullable<short> value);
    partial void OnSystolicChanged();
    partial void OnDiastolicChanging(System.Nullable<short> value);
    partial void OnDiastolicChanged();
    partial void OnPulseChanging(System.Nullable<byte> value);
    partial void OnPulseChanged();
    partial void OnTemperatureChanging(System.Nullable<short> value);
    partial void OnTemperatureChanged();
    partial void OnWeightChanging(System.Nullable<byte> value);
    partial void OnWeightChanged();
    partial void OnOthersChanging(string value);
    partial void OnOthersChanged();
    partial void OnReferredCodeChanging(System.Nullable<short> value);
    partial void OnReferredCodeChanged();
    partial void OnNextVisitDtChanging(System.Nullable<System.DateTime> value);
    partial void OnNextVisitDtChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnModifyUserIDChanging(string value);
    partial void OnModifyUserIDChanged();
    partial void OnModifyDtChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDtChanged();
    #endregion
		
		public ClinicVisitHistory()
		{
			this._AdviceBanglas = new EntitySet<AdviceBangla>(new Action<AdviceBangla>(this.attach_AdviceBanglas), new Action<AdviceBangla>(this.detach_AdviceBanglas));
			this._ChiefComplainces = new EntitySet<ChiefComplaince>(new Action<ChiefComplaince>(this.attach_ChiefComplainces), new Action<ChiefComplaince>(this.detach_ChiefComplainces));
			this._ConfirmDxes = new EntitySet<ConfirmDx>(new Action<ConfirmDx>(this.attach_ConfirmDxes), new Action<ConfirmDx>(this.detach_ConfirmDxes));
			this._DentalAdvices = new EntitySet<DentalAdvice>(new Action<DentalAdvice>(this.attach_DentalAdvices), new Action<DentalAdvice>(this.detach_DentalAdvices));
			this._DentalSigns = new EntitySet<DentalSign>(new Action<DentalSign>(this.attach_DentalSigns), new Action<DentalSign>(this.detach_DentalSigns));
			this._DifferentialDxes = new EntitySet<DifferentialDx>(new Action<DifferentialDx>(this.attach_DifferentialDxes), new Action<DifferentialDx>(this.detach_DifferentialDxes));
			this._Investigations = new EntitySet<Investigation>(new Action<Investigation>(this.attach_Investigations), new Action<Investigation>(this.detach_Investigations));
			this._MedicineDetails = new EntitySet<MedicineDetail>(new Action<MedicineDetail>(this.attach_MedicineDetails), new Action<MedicineDetail>(this.detach_MedicineDetails));
			this._NegativeFindings = new EntitySet<NegativeFinding>(new Action<NegativeFinding>(this.attach_NegativeFindings), new Action<NegativeFinding>(this.detach_NegativeFindings));
			this._PositiveFindings = new EntitySet<PositiveFinding>(new Action<PositiveFinding>(this.attach_PositiveFindings), new Action<PositiveFinding>(this.detach_PositiveFindings));
			this._ProvisionalDxes = new EntitySet<ProvisionalDx>(new Action<ProvisionalDx>(this.attach_ProvisionalDxes), new Action<ProvisionalDx>(this.detach_ProvisionalDxes));
			this._DoctorVisitInfo = default(EntityRef<DoctorVisitInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._DoctorVisitInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11)")]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> VisitDate
		{
			get
			{
				return this._VisitDate;
			}
			set
			{
				if ((this._VisitDate != value))
				{
					this.OnVisitDateChanging(value);
					this.SendPropertyChanging();
					this._VisitDate = value;
					this.SendPropertyChanged("VisitDate");
					this.OnVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugHistory", DbType="VarChar(100)")]
		public string DrugHistory
		{
			get
			{
				return this._DrugHistory;
			}
			set
			{
				if ((this._DrugHistory != value))
				{
					this.OnDrugHistoryChanging(value);
					this.SendPropertyChanging();
					this._DrugHistory = value;
					this.SendPropertyChanged("DrugHistory");
					this.OnDrugHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugAllergy", DbType="SmallInt")]
		public System.Nullable<short> DrugAllergy
		{
			get
			{
				return this._DrugAllergy;
			}
			set
			{
				if ((this._DrugAllergy != value))
				{
					this.OnDrugAllergyChanging(value);
					this.SendPropertyChanging();
					this._DrugAllergy = value;
					this.SendPropertyChanged("DrugAllergy");
					this.OnDrugAllergyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Anemia", DbType="TinyInt")]
		public System.Nullable<byte> Anemia
		{
			get
			{
				return this._Anemia;
			}
			set
			{
				if ((this._Anemia != value))
				{
					this.OnAnemiaChanging(value);
					this.SendPropertyChanging();
					this._Anemia = value;
					this.SendPropertyChanged("Anemia");
					this.OnAnemiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cervix", DbType="SmallInt")]
		public System.Nullable<short> Cervix
		{
			get
			{
				return this._Cervix;
			}
			set
			{
				if ((this._Cervix != value))
				{
					this.OnCervixChanging(value);
					this.SendPropertyChanging();
					this._Cervix = value;
					this.SendPropertyChanged("Cervix");
					this.OnCervixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clubbing", DbType="TinyInt")]
		public System.Nullable<byte> Clubbing
		{
			get
			{
				return this._Clubbing;
			}
			set
			{
				if ((this._Clubbing != value))
				{
					this.OnClubbingChanging(value);
					this.SendPropertyChanging();
					this._Clubbing = value;
					this.SendPropertyChanged("Clubbing");
					this.OnClubbingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Heart", DbType="NVarChar(50)")]
		public string Heart
		{
			get
			{
				return this._Heart;
			}
			set
			{
				if ((this._Heart != value))
				{
					this.OnHeartChanging(value);
					this.SendPropertyChanging();
					this._Heart = value;
					this.SendPropertyChanged("Heart");
					this.OnHeartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Jaundice", DbType="TinyInt")]
		public System.Nullable<byte> Jaundice
		{
			get
			{
				return this._Jaundice;
			}
			set
			{
				if ((this._Jaundice != value))
				{
					this.OnJaundiceChanging(value);
					this.SendPropertyChanging();
					this._Jaundice = value;
					this.SendPropertyChanged("Jaundice");
					this.OnJaundiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_L_N", DbType="TinyInt")]
		public System.Nullable<byte> L_N
		{
			get
			{
				return this._L_N;
			}
			set
			{
				if ((this._L_N != value))
				{
					this.OnL_NChanging(value);
					this.SendPropertyChanging();
					this._L_N = value;
					this.SendPropertyChanged("L_N");
					this.OnL_NChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Liver", DbType="TinyInt")]
		public System.Nullable<byte> Liver
		{
			get
			{
				return this._Liver;
			}
			set
			{
				if ((this._Liver != value))
				{
					this.OnLiverChanging(value);
					this.SendPropertyChanging();
					this._Liver = value;
					this.SendPropertyChanged("Liver");
					this.OnLiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lung", DbType="NVarChar(50)")]
		public string Lung
		{
			get
			{
				return this._Lung;
			}
			set
			{
				if ((this._Lung != value))
				{
					this.OnLungChanging(value);
					this.SendPropertyChanging();
					this._Lung = value;
					this.SendPropertyChanged("Lung");
					this.OnLungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Oedema", DbType="TinyInt")]
		public System.Nullable<byte> Oedema
		{
			get
			{
				return this._Oedema;
			}
			set
			{
				if ((this._Oedema != value))
				{
					this.OnOedemaChanging(value);
					this.SendPropertyChanging();
					this._Oedema = value;
					this.SendPropertyChanged("Oedema");
					this.OnOedemaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OS", DbType="NVarChar(7)")]
		public string OS
		{
			get
			{
				return this._OS;
			}
			set
			{
				if ((this._OS != value))
				{
					this.OnOSChanging(value);
					this.SendPropertyChanging();
					this._OS = value;
					this.SendPropertyChanged("OS");
					this.OnOSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Spleen", DbType="TinyInt")]
		public System.Nullable<byte> Spleen
		{
			get
			{
				return this._Spleen;
			}
			set
			{
				if ((this._Spleen != value))
				{
					this.OnSpleenChanging(value);
					this.SendPropertyChanging();
					this._Spleen = value;
					this.SendPropertyChanged("Spleen");
					this.OnSpleenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vagina", DbType="NVarChar(7)")]
		public string Vagina
		{
			get
			{
				return this._Vagina;
			}
			set
			{
				if ((this._Vagina != value))
				{
					this.OnVaginaChanging(value);
					this.SendPropertyChanging();
					this._Vagina = value;
					this.SendPropertyChanged("Vagina");
					this.OnVaginaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vulva", DbType="NVarChar(7)")]
		public string Vulva
		{
			get
			{
				return this._Vulva;
			}
			set
			{
				if ((this._Vulva != value))
				{
					this.OnVulvaChanging(value);
					this.SendPropertyChanging();
					this._Vulva = value;
					this.SendPropertyChanged("Vulva");
					this.OnVulvaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Systolic", DbType="SmallInt")]
		public System.Nullable<short> Systolic
		{
			get
			{
				return this._Systolic;
			}
			set
			{
				if ((this._Systolic != value))
				{
					this.OnSystolicChanging(value);
					this.SendPropertyChanging();
					this._Systolic = value;
					this.SendPropertyChanged("Systolic");
					this.OnSystolicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diastolic", DbType="SmallInt")]
		public System.Nullable<short> Diastolic
		{
			get
			{
				return this._Diastolic;
			}
			set
			{
				if ((this._Diastolic != value))
				{
					this.OnDiastolicChanging(value);
					this.SendPropertyChanging();
					this._Diastolic = value;
					this.SendPropertyChanged("Diastolic");
					this.OnDiastolicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pulse", DbType="TinyInt")]
		public System.Nullable<byte> Pulse
		{
			get
			{
				return this._Pulse;
			}
			set
			{
				if ((this._Pulse != value))
				{
					this.OnPulseChanging(value);
					this.SendPropertyChanging();
					this._Pulse = value;
					this.SendPropertyChanged("Pulse");
					this.OnPulseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="SmallInt")]
		public System.Nullable<short> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="TinyInt")]
		public System.Nullable<byte> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Others", DbType="NVarChar(50)")]
		public string Others
		{
			get
			{
				return this._Others;
			}
			set
			{
				if ((this._Others != value))
				{
					this.OnOthersChanging(value);
					this.SendPropertyChanging();
					this._Others = value;
					this.SendPropertyChanged("Others");
					this.OnOthersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferredCode", DbType="SmallInt")]
		public System.Nullable<short> ReferredCode
		{
			get
			{
				return this._ReferredCode;
			}
			set
			{
				if ((this._ReferredCode != value))
				{
					this.OnReferredCodeChanging(value);
					this.SendPropertyChanging();
					this._ReferredCode = value;
					this.SendPropertyChanged("ReferredCode");
					this.OnReferredCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextVisitDt", DbType="Date")]
		public System.Nullable<System.DateTime> NextVisitDt
		{
			get
			{
				return this._NextVisitDt;
			}
			set
			{
				if ((this._NextVisitDt != value))
				{
					this.OnNextVisitDtChanging(value);
					this.SendPropertyChanging();
					this._NextVisitDt = value;
					this.SendPropertyChanged("NextVisitDt");
					this.OnNextVisitDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyUserID", DbType="VarChar(50)")]
		public string ModifyUserID
		{
			get
			{
				return this._ModifyUserID;
			}
			set
			{
				if ((this._ModifyUserID != value))
				{
					this.OnModifyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifyUserID = value;
					this.SendPropertyChanged("ModifyUserID");
					this.OnModifyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDt
		{
			get
			{
				return this._ModifyDt;
			}
			set
			{
				if ((this._ModifyDt != value))
				{
					this.OnModifyDtChanging(value);
					this.SendPropertyChanging();
					this._ModifyDt = value;
					this.SendPropertyChanged("ModifyDt");
					this.OnModifyDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_AdviceBangla", Storage="_AdviceBanglas", ThisKey="VisitID", OtherKey="VisitID")]
		public EntitySet<AdviceBangla> AdviceBanglas
		{
			get
			{
				return this._AdviceBanglas;
			}
			set
			{
				this._AdviceBanglas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_ChiefComplaince", Storage="_ChiefComplainces", ThisKey="VisitID", OtherKey="VisitID")]
		public EntitySet<ChiefComplaince> ChiefComplainces
		{
			get
			{
				return this._ChiefComplainces;
			}
			set
			{
				this._ChiefComplainces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_ConfirmDx", Storage="_ConfirmDxes", ThisKey="VisitID", OtherKey="VisitID")]
		public EntitySet<ConfirmDx> ConfirmDxes
		{
			get
			{
				return this._ConfirmDxes;
			}
			set
			{
				this._ConfirmDxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_DentalAdvice", Storage="_DentalAdvices", ThisKey="VisitID", OtherKey="VisitID")]
		public EntitySet<DentalAdvice> DentalAdvices
		{
			get
			{
				return this._DentalAdvices;
			}
			set
			{
				this._DentalAdvices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_DentalSign", Storage="_DentalSigns", ThisKey="VisitID", OtherKey="VisitID")]
		public EntitySet<DentalSign> DentalSigns
		{
			get
			{
				return this._DentalSigns;
			}
			set
			{
				this._DentalSigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_DifferentialDx", Storage="_DifferentialDxes", ThisKey="VisitID", OtherKey="VisitID")]
		public EntitySet<DifferentialDx> DifferentialDxes
		{
			get
			{
				return this._DifferentialDxes;
			}
			set
			{
				this._DifferentialDxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_Investigation", Storage="_Investigations", ThisKey="VisitID", OtherKey="VisitID")]
		public EntitySet<Investigation> Investigations
		{
			get
			{
				return this._Investigations;
			}
			set
			{
				this._Investigations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_MedicineDetail", Storage="_MedicineDetails", ThisKey="VisitID", OtherKey="VisitID")]
		public EntitySet<MedicineDetail> MedicineDetails
		{
			get
			{
				return this._MedicineDetails;
			}
			set
			{
				this._MedicineDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_NegativeFinding", Storage="_NegativeFindings", ThisKey="VisitID", OtherKey="VisitID")]
		public EntitySet<NegativeFinding> NegativeFindings
		{
			get
			{
				return this._NegativeFindings;
			}
			set
			{
				this._NegativeFindings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_PositiveFinding", Storage="_PositiveFindings", ThisKey="VisitID", OtherKey="VisitID")]
		public EntitySet<PositiveFinding> PositiveFindings
		{
			get
			{
				return this._PositiveFindings;
			}
			set
			{
				this._PositiveFindings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_ProvisionalDx", Storage="_ProvisionalDxes", ThisKey="VisitID", OtherKey="VisitID")]
		public EntitySet<ProvisionalDx> ProvisionalDxes
		{
			get
			{
				return this._ProvisionalDxes;
			}
			set
			{
				this._ProvisionalDxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DoctorVisitInfo_ClinicVisitHistory", Storage="_DoctorVisitInfo", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DoctorVisitInfo DoctorVisitInfo
		{
			get
			{
				return this._DoctorVisitInfo.Entity;
			}
			set
			{
				DoctorVisitInfo previousValue = this._DoctorVisitInfo.Entity;
				if (((previousValue != value) 
							|| (this._DoctorVisitInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DoctorVisitInfo.Entity = null;
						previousValue.ClinicVisitHistory = null;
					}
					this._DoctorVisitInfo.Entity = value;
					if ((value != null))
					{
						value.ClinicVisitHistory = this;
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(string);
					}
					this.SendPropertyChanged("DoctorVisitInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdviceBanglas(AdviceBangla entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_AdviceBanglas(AdviceBangla entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_ChiefComplainces(ChiefComplaince entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_ChiefComplainces(ChiefComplaince entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_ConfirmDxes(ConfirmDx entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_ConfirmDxes(ConfirmDx entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_DentalAdvices(DentalAdvice entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_DentalAdvices(DentalAdvice entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_DentalSigns(DentalSign entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_DentalSigns(DentalSign entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_DifferentialDxes(DifferentialDx entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_DifferentialDxes(DifferentialDx entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_Investigations(Investigation entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_Investigations(Investigation entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_NegativeFindings(NegativeFinding entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_NegativeFindings(NegativeFinding entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_PositiveFindings(PositiveFinding entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_PositiveFindings(PositiveFinding entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_ProvisionalDxes(ProvisionalDx entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_ProvisionalDxes(ProvisionalDx entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConfirmDx")]
	public partial class ConfirmDx : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private short _CDCode;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
		private EntityRef<lkp_ProvisionalDx> _lkp_ProvisionalDx;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnCDCodeChanging(short value);
    partial void OnCDCodeChanged();
    #endregion
		
		public ConfirmDx()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			this._lkp_ProvisionalDx = default(EntityRef<lkp_ProvisionalDx>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CDCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short CDCode
		{
			get
			{
				return this._CDCode;
			}
			set
			{
				if ((this._CDCode != value))
				{
					if (this._lkp_ProvisionalDx.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCDCodeChanging(value);
					this.SendPropertyChanging();
					this._CDCode = value;
					this.SendPropertyChanged("CDCode");
					this.OnCDCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_ConfirmDx", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.ConfirmDxes.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.ConfirmDxes.Add(this);
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(string);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_ProvisionalDx_ConfirmDx", Storage="_lkp_ProvisionalDx", ThisKey="CDCode", OtherKey="PDCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_ProvisionalDx lkp_ProvisionalDx
		{
			get
			{
				return this._lkp_ProvisionalDx.Entity;
			}
			set
			{
				lkp_ProvisionalDx previousValue = this._lkp_ProvisionalDx.Entity;
				if (((previousValue != value) 
							|| (this._lkp_ProvisionalDx.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_ProvisionalDx.Entity = null;
						previousValue.ConfirmDxes.Remove(this);
					}
					this._lkp_ProvisionalDx.Entity = value;
					if ((value != null))
					{
						value.ConfirmDxes.Add(this);
						this._CDCode = value.PDCode;
					}
					else
					{
						this._CDCode = default(short);
					}
					this.SendPropertyChanged("lkp_ProvisionalDx");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DentalAdvice")]
	public partial class DentalAdvice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private short _DACode;
		
		private string _DATeethNo;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
		private EntityRef<lkp_DentalAdvice> _lkp_DentalAdvice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnDACodeChanging(short value);
    partial void OnDACodeChanged();
    partial void OnDATeethNoChanging(string value);
    partial void OnDATeethNoChanged();
    #endregion
		
		public DentalAdvice()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			this._lkp_DentalAdvice = default(EntityRef<lkp_DentalAdvice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DACode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short DACode
		{
			get
			{
				return this._DACode;
			}
			set
			{
				if ((this._DACode != value))
				{
					if (this._lkp_DentalAdvice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDACodeChanging(value);
					this.SendPropertyChanging();
					this._DACode = value;
					this.SendPropertyChanged("DACode");
					this.OnDACodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATeethNo", DbType="NVarChar(15)")]
		public string DATeethNo
		{
			get
			{
				return this._DATeethNo;
			}
			set
			{
				if ((this._DATeethNo != value))
				{
					this.OnDATeethNoChanging(value);
					this.SendPropertyChanging();
					this._DATeethNo = value;
					this.SendPropertyChanged("DATeethNo");
					this.OnDATeethNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_DentalAdvice", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.DentalAdvices.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.DentalAdvices.Add(this);
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(string);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_DentalAdvice_DentalAdvice", Storage="_lkp_DentalAdvice", ThisKey="DACode", OtherKey="DACode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_DentalAdvice lkp_DentalAdvice
		{
			get
			{
				return this._lkp_DentalAdvice.Entity;
			}
			set
			{
				lkp_DentalAdvice previousValue = this._lkp_DentalAdvice.Entity;
				if (((previousValue != value) 
							|| (this._lkp_DentalAdvice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_DentalAdvice.Entity = null;
						previousValue.DentalAdvices.Remove(this);
					}
					this._lkp_DentalAdvice.Entity = value;
					if ((value != null))
					{
						value.DentalAdvices.Add(this);
						this._DACode = value.DACode;
					}
					else
					{
						this._DACode = default(short);
					}
					this.SendPropertyChanged("lkp_DentalAdvice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DentalSign")]
	public partial class DentalSign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private short _DSCode;
		
		private string _DSTeethNo;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
		private EntityRef<lkp_DentalSign> _lkp_DentalSign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnDSCodeChanging(short value);
    partial void OnDSCodeChanged();
    partial void OnDSTeethNoChanging(string value);
    partial void OnDSTeethNoChanged();
    #endregion
		
		public DentalSign()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			this._lkp_DentalSign = default(EntityRef<lkp_DentalSign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DSCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short DSCode
		{
			get
			{
				return this._DSCode;
			}
			set
			{
				if ((this._DSCode != value))
				{
					if (this._lkp_DentalSign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDSCodeChanging(value);
					this.SendPropertyChanging();
					this._DSCode = value;
					this.SendPropertyChanged("DSCode");
					this.OnDSCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DSTeethNo", DbType="NVarChar(15)")]
		public string DSTeethNo
		{
			get
			{
				return this._DSTeethNo;
			}
			set
			{
				if ((this._DSTeethNo != value))
				{
					this.OnDSTeethNoChanging(value);
					this.SendPropertyChanging();
					this._DSTeethNo = value;
					this.SendPropertyChanged("DSTeethNo");
					this.OnDSTeethNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_DentalSign", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.DentalSigns.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.DentalSigns.Add(this);
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(string);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_DentalSign_DentalSign", Storage="_lkp_DentalSign", ThisKey="DSCode", OtherKey="DSCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_DentalSign lkp_DentalSign
		{
			get
			{
				return this._lkp_DentalSign.Entity;
			}
			set
			{
				lkp_DentalSign previousValue = this._lkp_DentalSign.Entity;
				if (((previousValue != value) 
							|| (this._lkp_DentalSign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_DentalSign.Entity = null;
						previousValue.DentalSigns.Remove(this);
					}
					this._lkp_DentalSign.Entity = value;
					if ((value != null))
					{
						value.DentalSigns.Add(this);
						this._DSCode = value.DSCode;
					}
					else
					{
						this._DSCode = default(short);
					}
					this.SendPropertyChanged("lkp_DentalSign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DifferentialDx")]
	public partial class DifferentialDx : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private short _DDCode;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
		private EntityRef<lkp_ProvisionalDx> _lkp_ProvisionalDx;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnDDCodeChanging(short value);
    partial void OnDDCodeChanged();
    #endregion
		
		public DifferentialDx()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			this._lkp_ProvisionalDx = default(EntityRef<lkp_ProvisionalDx>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short DDCode
		{
			get
			{
				return this._DDCode;
			}
			set
			{
				if ((this._DDCode != value))
				{
					if (this._lkp_ProvisionalDx.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDDCodeChanging(value);
					this.SendPropertyChanging();
					this._DDCode = value;
					this.SendPropertyChanged("DDCode");
					this.OnDDCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_DifferentialDx", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.DifferentialDxes.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.DifferentialDxes.Add(this);
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(string);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_ProvisionalDx_DifferentialDx", Storage="_lkp_ProvisionalDx", ThisKey="DDCode", OtherKey="PDCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_ProvisionalDx lkp_ProvisionalDx
		{
			get
			{
				return this._lkp_ProvisionalDx.Entity;
			}
			set
			{
				lkp_ProvisionalDx previousValue = this._lkp_ProvisionalDx.Entity;
				if (((previousValue != value) 
							|| (this._lkp_ProvisionalDx.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_ProvisionalDx.Entity = null;
						previousValue.DifferentialDxes.Remove(this);
					}
					this._lkp_ProvisionalDx.Entity = value;
					if ((value != null))
					{
						value.DifferentialDxes.Add(this);
						this._DDCode = value.PDCode;
					}
					else
					{
						this._DDCode = default(short);
					}
					this.SendPropertyChanged("lkp_ProvisionalDx");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DoctorVisitInfo")]
	public partial class DoctorVisitInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private string _PatientID;
		
		private System.Nullable<byte> _AgeYY;
		
		private System.Nullable<byte> _AgeMM;
		
		private System.Nullable<byte> _AgeDD;
		
		private System.Nullable<short> _DoctorCode;
		
		private System.Nullable<decimal> _DoctorFee;
		
		private System.Nullable<short> _ReceivedBy;
		
		private string _Remarks;
		
		private System.Nullable<System.DateTime> _EntryDate;
		
		private System.Nullable<byte> _Status;
		
		private string _UserID;
		
		private string _ModifyUserID;
		
		private System.Nullable<System.DateTime> _ModifyDt;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
		private EntityRef<lkp_DoctorsName> _lkp_DoctorsName;
		
		private EntityRef<PatientBasicInfo> _PatientBasicInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnAgeYYChanging(System.Nullable<byte> value);
    partial void OnAgeYYChanged();
    partial void OnAgeMMChanging(System.Nullable<byte> value);
    partial void OnAgeMMChanged();
    partial void OnAgeDDChanging(System.Nullable<byte> value);
    partial void OnAgeDDChanged();
    partial void OnDoctorCodeChanging(System.Nullable<short> value);
    partial void OnDoctorCodeChanged();
    partial void OnDoctorFeeChanging(System.Nullable<decimal> value);
    partial void OnDoctorFeeChanged();
    partial void OnReceivedByChanging(System.Nullable<short> value);
    partial void OnReceivedByChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnEntryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntryDateChanged();
    partial void OnStatusChanging(System.Nullable<byte> value);
    partial void OnStatusChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnModifyUserIDChanging(string value);
    partial void OnModifyUserIDChanged();
    partial void OnModifyDtChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDtChanged();
    #endregion
		
		public DoctorVisitInfo()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			this._lkp_DoctorsName = default(EntityRef<lkp_DoctorsName>);
			this._PatientBasicInfo = default(EntityRef<PatientBasicInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11)")]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._PatientBasicInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeYY", DbType="TinyInt")]
		public System.Nullable<byte> AgeYY
		{
			get
			{
				return this._AgeYY;
			}
			set
			{
				if ((this._AgeYY != value))
				{
					this.OnAgeYYChanging(value);
					this.SendPropertyChanging();
					this._AgeYY = value;
					this.SendPropertyChanged("AgeYY");
					this.OnAgeYYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeMM", DbType="TinyInt")]
		public System.Nullable<byte> AgeMM
		{
			get
			{
				return this._AgeMM;
			}
			set
			{
				if ((this._AgeMM != value))
				{
					this.OnAgeMMChanging(value);
					this.SendPropertyChanging();
					this._AgeMM = value;
					this.SendPropertyChanged("AgeMM");
					this.OnAgeMMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeDD", DbType="TinyInt")]
		public System.Nullable<byte> AgeDD
		{
			get
			{
				return this._AgeDD;
			}
			set
			{
				if ((this._AgeDD != value))
				{
					this.OnAgeDDChanging(value);
					this.SendPropertyChanging();
					this._AgeDD = value;
					this.SendPropertyChanged("AgeDD");
					this.OnAgeDDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorCode", DbType="SmallInt")]
		public System.Nullable<short> DoctorCode
		{
			get
			{
				return this._DoctorCode;
			}
			set
			{
				if ((this._DoctorCode != value))
				{
					if (this._lkp_DoctorsName.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorCodeChanging(value);
					this.SendPropertyChanging();
					this._DoctorCode = value;
					this.SendPropertyChanged("DoctorCode");
					this.OnDoctorCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorFee", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> DoctorFee
		{
			get
			{
				return this._DoctorFee;
			}
			set
			{
				if ((this._DoctorFee != value))
				{
					this.OnDoctorFeeChanging(value);
					this.SendPropertyChanging();
					this._DoctorFee = value;
					this.SendPropertyChanged("DoctorFee");
					this.OnDoctorFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivedBy", DbType="SmallInt")]
		public System.Nullable<short> ReceivedBy
		{
			get
			{
				return this._ReceivedBy;
			}
			set
			{
				if ((this._ReceivedBy != value))
				{
					this.OnReceivedByChanging(value);
					this.SendPropertyChanging();
					this._ReceivedBy = value;
					this.SendPropertyChanged("ReceivedBy");
					this.OnReceivedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(50)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt")]
		public System.Nullable<byte> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyUserID", DbType="VarChar(50)")]
		public string ModifyUserID
		{
			get
			{
				return this._ModifyUserID;
			}
			set
			{
				if ((this._ModifyUserID != value))
				{
					this.OnModifyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifyUserID = value;
					this.SendPropertyChanged("ModifyUserID");
					this.OnModifyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDt
		{
			get
			{
				return this._ModifyDt;
			}
			set
			{
				if ((this._ModifyDt != value))
				{
					this.OnModifyDtChanging(value);
					this.SendPropertyChanging();
					this._ModifyDt = value;
					this.SendPropertyChanged("ModifyDt");
					this.OnModifyDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DoctorVisitInfo_ClinicVisitHistory", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="VisitID", IsUnique=true, IsForeignKey=false)]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.DoctorVisitInfo = null;
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.DoctorVisitInfo = this;
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_DoctorsName_DoctorVisitInfo", Storage="_lkp_DoctorsName", ThisKey="DoctorCode", OtherKey="DNCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public lkp_DoctorsName lkp_DoctorsName
		{
			get
			{
				return this._lkp_DoctorsName.Entity;
			}
			set
			{
				lkp_DoctorsName previousValue = this._lkp_DoctorsName.Entity;
				if (((previousValue != value) 
							|| (this._lkp_DoctorsName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_DoctorsName.Entity = null;
						previousValue.DoctorVisitInfos.Remove(this);
					}
					this._lkp_DoctorsName.Entity = value;
					if ((value != null))
					{
						value.DoctorVisitInfos.Add(this);
						this._DoctorCode = value.DNCode;
					}
					else
					{
						this._DoctorCode = default(Nullable<short>);
					}
					this.SendPropertyChanged("lkp_DoctorsName");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientBasicInfo_DoctorVisitInfo", Storage="_PatientBasicInfo", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true, DeleteRule="CASCADE")]
		public PatientBasicInfo PatientBasicInfo
		{
			get
			{
				return this._PatientBasicInfo.Entity;
			}
			set
			{
				PatientBasicInfo previousValue = this._PatientBasicInfo.Entity;
				if (((previousValue != value) 
							|| (this._PatientBasicInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientBasicInfo.Entity = null;
						previousValue.DoctorVisitInfos.Remove(this);
					}
					this._PatientBasicInfo.Entity = value;
					if ((value != null))
					{
						value.DoctorVisitInfos.Add(this);
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(string);
					}
					this.SendPropertyChanged("PatientBasicInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FullFreeDescription")]
	public partial class FullFreeDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LabID;
		
		private short _TestCode;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabIDChanging(string value);
    partial void OnLabIDChanged();
    partial void OnTestCodeChanging(short value);
    partial void OnTestCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public FullFreeDescription()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LabID
		{
			get
			{
				return this._LabID;
			}
			set
			{
				if ((this._LabID != value))
				{
					this.OnLabIDChanging(value);
					this.SendPropertyChanging();
					this._LabID = value;
					this.SendPropertyChanged("LabID");
					this.OnLabIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short TestCode
		{
			get
			{
				return this._TestCode;
			}
			set
			{
				if ((this._TestCode != value))
				{
					this.OnTestCodeChanging(value);
					this.SendPropertyChanging();
					this._TestCode = value;
					this.SendPropertyChanged("TestCode");
					this.OnTestCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(400)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Investigations")]
	public partial class Investigation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private short _InvCode;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
		private EntityRef<lkp_Investigation> _lkp_Investigation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnInvCodeChanging(short value);
    partial void OnInvCodeChanged();
    #endregion
		
		public Investigation()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			this._lkp_Investigation = default(EntityRef<lkp_Investigation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short InvCode
		{
			get
			{
				return this._InvCode;
			}
			set
			{
				if ((this._InvCode != value))
				{
					if (this._lkp_Investigation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvCodeChanging(value);
					this.SendPropertyChanging();
					this._InvCode = value;
					this.SendPropertyChanged("InvCode");
					this.OnInvCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_Investigation", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.Investigations.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.Investigations.Add(this);
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(string);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_Investigation_Investigation", Storage="_lkp_Investigation", ThisKey="InvCode", OtherKey="InvCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_Investigation lkp_Investigation
		{
			get
			{
				return this._lkp_Investigation.Entity;
			}
			set
			{
				lkp_Investigation previousValue = this._lkp_Investigation.Entity;
				if (((previousValue != value) 
							|| (this._lkp_Investigation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_Investigation.Entity = null;
						previousValue.Investigations.Remove(this);
					}
					this._lkp_Investigation.Entity = value;
					if ((value != null))
					{
						value.Investigations.Add(this);
						this._InvCode = value.InvCode;
					}
					else
					{
						this._InvCode = default(short);
					}
					this.SendPropertyChanged("lkp_Investigation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabTestInfo")]
	public partial class LabTestInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LabTestID;
		
		private string _PatientID;
		
		private System.Nullable<System.DateTime> _TestDate;
		
		private System.Nullable<System.DateTime> _DeliveryDate;
		
		private System.Nullable<byte> _AgeYY;
		
		private System.Nullable<byte> _AgeMM;
		
		private System.Nullable<byte> _AgeDD;
		
		private System.Nullable<short> _HeightCM;
		
		private System.Nullable<short> _WeightKG;
		
		private System.Nullable<short> _HipCM;
		
		private System.Nullable<short> _WaistCM;
		
		private System.Nullable<short> _URBDoctor;
		
		private string _FromOutOfURB;
		
		private System.Nullable<decimal> _TotalBill;
		
		private System.Nullable<decimal> _Discount;
		
		private string _DiscountBy;
		
		private System.Nullable<decimal> _AdvancePayment;
		
		private System.Nullable<decimal> _DueBill;
		
		private System.Nullable<bool> _PaidStatus;
		
		private System.Nullable<System.DateTime> _CashRcvdDate;
		
		private System.Nullable<bool> _RptDelivered;
		
		private System.Nullable<System.DateTime> _RptDeliveredDt;
		
		private System.Nullable<int> _ReceivedBy;
		
		private string _UserID;
		
		private string _ModifyUserID;
		
		private System.Nullable<System.DateTime> _ModifyDt;
		
		private EntitySet<TransectionDetail> _TransectionDetails;
		
		private EntitySet<LabTestInfoDetail> _LabTestInfoDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabTestIDChanging(string value);
    partial void OnLabTestIDChanged();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnTestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTestDateChanged();
    partial void OnDeliveryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliveryDateChanged();
    partial void OnAgeYYChanging(System.Nullable<byte> value);
    partial void OnAgeYYChanged();
    partial void OnAgeMMChanging(System.Nullable<byte> value);
    partial void OnAgeMMChanged();
    partial void OnAgeDDChanging(System.Nullable<byte> value);
    partial void OnAgeDDChanged();
    partial void OnHeightCMChanging(System.Nullable<short> value);
    partial void OnHeightCMChanged();
    partial void OnWeightKGChanging(System.Nullable<short> value);
    partial void OnWeightKGChanged();
    partial void OnHipCMChanging(System.Nullable<short> value);
    partial void OnHipCMChanged();
    partial void OnWaistCMChanging(System.Nullable<short> value);
    partial void OnWaistCMChanged();
    partial void OnURBDoctorChanging(System.Nullable<short> value);
    partial void OnURBDoctorChanged();
    partial void OnFromOutOfURBChanging(string value);
    partial void OnFromOutOfURBChanged();
    partial void OnTotalBillChanging(System.Nullable<decimal> value);
    partial void OnTotalBillChanged();
    partial void OnDiscountChanging(System.Nullable<decimal> value);
    partial void OnDiscountChanged();
    partial void OnDiscountByChanging(string value);
    partial void OnDiscountByChanged();
    partial void OnAdvancePaymentChanging(System.Nullable<decimal> value);
    partial void OnAdvancePaymentChanged();
    partial void OnDueBillChanging(System.Nullable<decimal> value);
    partial void OnDueBillChanged();
    partial void OnPaidStatusChanging(System.Nullable<bool> value);
    partial void OnPaidStatusChanged();
    partial void OnCashRcvdDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCashRcvdDateChanged();
    partial void OnRptDeliveredChanging(System.Nullable<bool> value);
    partial void OnRptDeliveredChanged();
    partial void OnRptDeliveredDtChanging(System.Nullable<System.DateTime> value);
    partial void OnRptDeliveredDtChanged();
    partial void OnReceivedByChanging(System.Nullable<int> value);
    partial void OnReceivedByChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnModifyUserIDChanging(string value);
    partial void OnModifyUserIDChanged();
    partial void OnModifyDtChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDtChanged();
    #endregion
		
		public LabTestInfo()
		{
			this._TransectionDetails = new EntitySet<TransectionDetail>(new Action<TransectionDetail>(this.attach_TransectionDetails), new Action<TransectionDetail>(this.detach_TransectionDetails));
			this._LabTestInfoDetails = new EntitySet<LabTestInfoDetail>(new Action<LabTestInfoDetail>(this.attach_LabTestInfoDetails), new Action<LabTestInfoDetail>(this.detach_LabTestInfoDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabTestID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LabTestID
		{
			get
			{
				return this._LabTestID;
			}
			set
			{
				if ((this._LabTestID != value))
				{
					this.OnLabTestIDChanging(value);
					this.SendPropertyChanging();
					this._LabTestID = value;
					this.SendPropertyChanged("LabTestID");
					this.OnLabTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11)")]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestDate", DbType="Date")]
		public System.Nullable<System.DateTime> TestDate
		{
			get
			{
				return this._TestDate;
			}
			set
			{
				if ((this._TestDate != value))
				{
					this.OnTestDateChanging(value);
					this.SendPropertyChanging();
					this._TestDate = value;
					this.SendPropertyChanged("TestDate");
					this.OnTestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDate", DbType="Date")]
		public System.Nullable<System.DateTime> DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this.OnDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDate = value;
					this.SendPropertyChanged("DeliveryDate");
					this.OnDeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeYY", DbType="TinyInt")]
		public System.Nullable<byte> AgeYY
		{
			get
			{
				return this._AgeYY;
			}
			set
			{
				if ((this._AgeYY != value))
				{
					this.OnAgeYYChanging(value);
					this.SendPropertyChanging();
					this._AgeYY = value;
					this.SendPropertyChanged("AgeYY");
					this.OnAgeYYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeMM", DbType="TinyInt")]
		public System.Nullable<byte> AgeMM
		{
			get
			{
				return this._AgeMM;
			}
			set
			{
				if ((this._AgeMM != value))
				{
					this.OnAgeMMChanging(value);
					this.SendPropertyChanging();
					this._AgeMM = value;
					this.SendPropertyChanged("AgeMM");
					this.OnAgeMMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeDD", DbType="TinyInt")]
		public System.Nullable<byte> AgeDD
		{
			get
			{
				return this._AgeDD;
			}
			set
			{
				if ((this._AgeDD != value))
				{
					this.OnAgeDDChanging(value);
					this.SendPropertyChanging();
					this._AgeDD = value;
					this.SendPropertyChanged("AgeDD");
					this.OnAgeDDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeightCM", DbType="SmallInt")]
		public System.Nullable<short> HeightCM
		{
			get
			{
				return this._HeightCM;
			}
			set
			{
				if ((this._HeightCM != value))
				{
					this.OnHeightCMChanging(value);
					this.SendPropertyChanging();
					this._HeightCM = value;
					this.SendPropertyChanged("HeightCM");
					this.OnHeightCMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeightKG", DbType="SmallInt")]
		public System.Nullable<short> WeightKG
		{
			get
			{
				return this._WeightKG;
			}
			set
			{
				if ((this._WeightKG != value))
				{
					this.OnWeightKGChanging(value);
					this.SendPropertyChanging();
					this._WeightKG = value;
					this.SendPropertyChanged("WeightKG");
					this.OnWeightKGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HipCM", DbType="SmallInt")]
		public System.Nullable<short> HipCM
		{
			get
			{
				return this._HipCM;
			}
			set
			{
				if ((this._HipCM != value))
				{
					this.OnHipCMChanging(value);
					this.SendPropertyChanging();
					this._HipCM = value;
					this.SendPropertyChanged("HipCM");
					this.OnHipCMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaistCM", DbType="SmallInt")]
		public System.Nullable<short> WaistCM
		{
			get
			{
				return this._WaistCM;
			}
			set
			{
				if ((this._WaistCM != value))
				{
					this.OnWaistCMChanging(value);
					this.SendPropertyChanging();
					this._WaistCM = value;
					this.SendPropertyChanged("WaistCM");
					this.OnWaistCMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URBDoctor", DbType="SmallInt")]
		public System.Nullable<short> URBDoctor
		{
			get
			{
				return this._URBDoctor;
			}
			set
			{
				if ((this._URBDoctor != value))
				{
					this.OnURBDoctorChanging(value);
					this.SendPropertyChanging();
					this._URBDoctor = value;
					this.SendPropertyChanged("URBDoctor");
					this.OnURBDoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromOutOfURB", DbType="NVarChar(100)")]
		public string FromOutOfURB
		{
			get
			{
				return this._FromOutOfURB;
			}
			set
			{
				if ((this._FromOutOfURB != value))
				{
					this.OnFromOutOfURBChanging(value);
					this.SendPropertyChanging();
					this._FromOutOfURB = value;
					this.SendPropertyChanged("FromOutOfURB");
					this.OnFromOutOfURBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalBill", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> TotalBill
		{
			get
			{
				return this._TotalBill;
			}
			set
			{
				if ((this._TotalBill != value))
				{
					this.OnTotalBillChanging(value);
					this.SendPropertyChanging();
					this._TotalBill = value;
					this.SendPropertyChanged("TotalBill");
					this.OnTotalBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountBy", DbType="VarChar(50)")]
		public string DiscountBy
		{
			get
			{
				return this._DiscountBy;
			}
			set
			{
				if ((this._DiscountBy != value))
				{
					this.OnDiscountByChanging(value);
					this.SendPropertyChanging();
					this._DiscountBy = value;
					this.SendPropertyChanged("DiscountBy");
					this.OnDiscountByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvancePayment", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> AdvancePayment
		{
			get
			{
				return this._AdvancePayment;
			}
			set
			{
				if ((this._AdvancePayment != value))
				{
					this.OnAdvancePaymentChanging(value);
					this.SendPropertyChanging();
					this._AdvancePayment = value;
					this.SendPropertyChanged("AdvancePayment");
					this.OnAdvancePaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueBill", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> DueBill
		{
			get
			{
				return this._DueBill;
			}
			set
			{
				if ((this._DueBill != value))
				{
					this.OnDueBillChanging(value);
					this.SendPropertyChanging();
					this._DueBill = value;
					this.SendPropertyChanged("DueBill");
					this.OnDueBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidStatus", DbType="Bit")]
		public System.Nullable<bool> PaidStatus
		{
			get
			{
				return this._PaidStatus;
			}
			set
			{
				if ((this._PaidStatus != value))
				{
					this.OnPaidStatusChanging(value);
					this.SendPropertyChanging();
					this._PaidStatus = value;
					this.SendPropertyChanged("PaidStatus");
					this.OnPaidStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashRcvdDate", DbType="Date")]
		public System.Nullable<System.DateTime> CashRcvdDate
		{
			get
			{
				return this._CashRcvdDate;
			}
			set
			{
				if ((this._CashRcvdDate != value))
				{
					this.OnCashRcvdDateChanging(value);
					this.SendPropertyChanging();
					this._CashRcvdDate = value;
					this.SendPropertyChanged("CashRcvdDate");
					this.OnCashRcvdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RptDelivered", DbType="Bit")]
		public System.Nullable<bool> RptDelivered
		{
			get
			{
				return this._RptDelivered;
			}
			set
			{
				if ((this._RptDelivered != value))
				{
					this.OnRptDeliveredChanging(value);
					this.SendPropertyChanging();
					this._RptDelivered = value;
					this.SendPropertyChanged("RptDelivered");
					this.OnRptDeliveredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RptDeliveredDt", DbType="Date")]
		public System.Nullable<System.DateTime> RptDeliveredDt
		{
			get
			{
				return this._RptDeliveredDt;
			}
			set
			{
				if ((this._RptDeliveredDt != value))
				{
					this.OnRptDeliveredDtChanging(value);
					this.SendPropertyChanging();
					this._RptDeliveredDt = value;
					this.SendPropertyChanged("RptDeliveredDt");
					this.OnRptDeliveredDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivedBy", DbType="Int")]
		public System.Nullable<int> ReceivedBy
		{
			get
			{
				return this._ReceivedBy;
			}
			set
			{
				if ((this._ReceivedBy != value))
				{
					this.OnReceivedByChanging(value);
					this.SendPropertyChanging();
					this._ReceivedBy = value;
					this.SendPropertyChanged("ReceivedBy");
					this.OnReceivedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyUserID", DbType="VarChar(50)")]
		public string ModifyUserID
		{
			get
			{
				return this._ModifyUserID;
			}
			set
			{
				if ((this._ModifyUserID != value))
				{
					this.OnModifyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifyUserID = value;
					this.SendPropertyChanged("ModifyUserID");
					this.OnModifyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDt
		{
			get
			{
				return this._ModifyDt;
			}
			set
			{
				if ((this._ModifyDt != value))
				{
					this.OnModifyDtChanging(value);
					this.SendPropertyChanging();
					this._ModifyDt = value;
					this.SendPropertyChanged("ModifyDt");
					this.OnModifyDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabTestInfo_TransectionDetail", Storage="_TransectionDetails", ThisKey="LabTestID", OtherKey="LabTestID")]
		public EntitySet<TransectionDetail> TransectionDetails
		{
			get
			{
				return this._TransectionDetails;
			}
			set
			{
				this._TransectionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabTestInfo_LabTestInfoDetail", Storage="_LabTestInfoDetails", ThisKey="LabTestID", OtherKey="LabTestID")]
		public EntitySet<LabTestInfoDetail> LabTestInfoDetails
		{
			get
			{
				return this._LabTestInfoDetails;
			}
			set
			{
				this._LabTestInfoDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransectionDetails(TransectionDetail entity)
		{
			this.SendPropertyChanging();
			entity.LabTestInfo = this;
		}
		
		private void detach_TransectionDetails(TransectionDetail entity)
		{
			this.SendPropertyChanging();
			entity.LabTestInfo = null;
		}
		
		private void attach_LabTestInfoDetails(LabTestInfoDetail entity)
		{
			this.SendPropertyChanging();
			entity.LabTestInfo = this;
		}
		
		private void detach_LabTestInfoDetails(LabTestInfoDetail entity)
		{
			this.SendPropertyChanging();
			entity.LabTestInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabTestInfoDetails")]
	public partial class LabTestInfoDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LabTestID;
		
		private short _TNDCode;
		
		private System.Nullable<byte> _LNCode;
		
		private System.Nullable<decimal> _TestFee;
		
		private System.Nullable<bool> _IsFree;
		
		private string _UserID;
		
		private string _ModifyUserID;
		
		private System.Nullable<System.DateTime> _ModifyDt;
		
		private EntityRef<LabTestInfo> _LabTestInfo;
		
		private EntityRef<lkp_LabName> _lkp_LabName;
		
		private EntityRef<lkp_TestNameDetail> _lkp_TestNameDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabTestIDChanging(string value);
    partial void OnLabTestIDChanged();
    partial void OnTNDCodeChanging(short value);
    partial void OnTNDCodeChanged();
    partial void OnLNCodeChanging(System.Nullable<byte> value);
    partial void OnLNCodeChanged();
    partial void OnTestFeeChanging(System.Nullable<decimal> value);
    partial void OnTestFeeChanged();
    partial void OnIsFreeChanging(System.Nullable<bool> value);
    partial void OnIsFreeChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnModifyUserIDChanging(string value);
    partial void OnModifyUserIDChanged();
    partial void OnModifyDtChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDtChanged();
    #endregion
		
		public LabTestInfoDetail()
		{
			this._LabTestInfo = default(EntityRef<LabTestInfo>);
			this._lkp_LabName = default(EntityRef<lkp_LabName>);
			this._lkp_TestNameDetail = default(EntityRef<lkp_TestNameDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabTestID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LabTestID
		{
			get
			{
				return this._LabTestID;
			}
			set
			{
				if ((this._LabTestID != value))
				{
					if (this._LabTestInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabTestIDChanging(value);
					this.SendPropertyChanging();
					this._LabTestID = value;
					this.SendPropertyChanged("LabTestID");
					this.OnLabTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TNDCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short TNDCode
		{
			get
			{
				return this._TNDCode;
			}
			set
			{
				if ((this._TNDCode != value))
				{
					if (this._lkp_TestNameDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTNDCodeChanging(value);
					this.SendPropertyChanging();
					this._TNDCode = value;
					this.SendPropertyChanged("TNDCode");
					this.OnTNDCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LNCode", DbType="TinyInt")]
		public System.Nullable<byte> LNCode
		{
			get
			{
				return this._LNCode;
			}
			set
			{
				if ((this._LNCode != value))
				{
					if (this._lkp_LabName.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLNCodeChanging(value);
					this.SendPropertyChanging();
					this._LNCode = value;
					this.SendPropertyChanged("LNCode");
					this.OnLNCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestFee", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> TestFee
		{
			get
			{
				return this._TestFee;
			}
			set
			{
				if ((this._TestFee != value))
				{
					this.OnTestFeeChanging(value);
					this.SendPropertyChanging();
					this._TestFee = value;
					this.SendPropertyChanged("TestFee");
					this.OnTestFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFree", DbType="Bit")]
		public System.Nullable<bool> IsFree
		{
			get
			{
				return this._IsFree;
			}
			set
			{
				if ((this._IsFree != value))
				{
					this.OnIsFreeChanging(value);
					this.SendPropertyChanging();
					this._IsFree = value;
					this.SendPropertyChanged("IsFree");
					this.OnIsFreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyUserID", DbType="VarChar(50)")]
		public string ModifyUserID
		{
			get
			{
				return this._ModifyUserID;
			}
			set
			{
				if ((this._ModifyUserID != value))
				{
					this.OnModifyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifyUserID = value;
					this.SendPropertyChanged("ModifyUserID");
					this.OnModifyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDt
		{
			get
			{
				return this._ModifyDt;
			}
			set
			{
				if ((this._ModifyDt != value))
				{
					this.OnModifyDtChanging(value);
					this.SendPropertyChanging();
					this._ModifyDt = value;
					this.SendPropertyChanged("ModifyDt");
					this.OnModifyDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabTestInfo_LabTestInfoDetail", Storage="_LabTestInfo", ThisKey="LabTestID", OtherKey="LabTestID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LabTestInfo LabTestInfo
		{
			get
			{
				return this._LabTestInfo.Entity;
			}
			set
			{
				LabTestInfo previousValue = this._LabTestInfo.Entity;
				if (((previousValue != value) 
							|| (this._LabTestInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabTestInfo.Entity = null;
						previousValue.LabTestInfoDetails.Remove(this);
					}
					this._LabTestInfo.Entity = value;
					if ((value != null))
					{
						value.LabTestInfoDetails.Add(this);
						this._LabTestID = value.LabTestID;
					}
					else
					{
						this._LabTestID = default(string);
					}
					this.SendPropertyChanged("LabTestInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_LabName_LabTestInfoDetail", Storage="_lkp_LabName", ThisKey="LNCode", OtherKey="LNCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public lkp_LabName lkp_LabName
		{
			get
			{
				return this._lkp_LabName.Entity;
			}
			set
			{
				lkp_LabName previousValue = this._lkp_LabName.Entity;
				if (((previousValue != value) 
							|| (this._lkp_LabName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_LabName.Entity = null;
						previousValue.LabTestInfoDetails.Remove(this);
					}
					this._lkp_LabName.Entity = value;
					if ((value != null))
					{
						value.LabTestInfoDetails.Add(this);
						this._LNCode = value.LNCode;
					}
					else
					{
						this._LNCode = default(Nullable<byte>);
					}
					this.SendPropertyChanged("lkp_LabName");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_TestNameDetail_LabTestInfoDetail", Storage="_lkp_TestNameDetail", ThisKey="TNDCode", OtherKey="TNDCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_TestNameDetail lkp_TestNameDetail
		{
			get
			{
				return this._lkp_TestNameDetail.Entity;
			}
			set
			{
				lkp_TestNameDetail previousValue = this._lkp_TestNameDetail.Entity;
				if (((previousValue != value) 
							|| (this._lkp_TestNameDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_TestNameDetail.Entity = null;
						previousValue.LabTestInfoDetails.Remove(this);
					}
					this._lkp_TestNameDetail.Entity = value;
					if ((value != null))
					{
						value.LabTestInfoDetails.Add(this);
						this._TNDCode = value.TNDCode;
					}
					else
					{
						this._TNDCode = default(short);
					}
					this.SendPropertyChanged("lkp_TestNameDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_AdviceBangla")]
	public partial class lkp_AdviceBangla : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ABCode;
		
		private string _ABDesc;
		
		private EntitySet<AdviceBangla> _AdviceBanglas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnABCodeChanging(short value);
    partial void OnABCodeChanged();
    partial void OnABDescChanging(string value);
    partial void OnABDescChanged();
    #endregion
		
		public lkp_AdviceBangla()
		{
			this._AdviceBanglas = new EntitySet<AdviceBangla>(new Action<AdviceBangla>(this.attach_AdviceBanglas), new Action<AdviceBangla>(this.detach_AdviceBanglas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ABCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ABCode
		{
			get
			{
				return this._ABCode;
			}
			set
			{
				if ((this._ABCode != value))
				{
					this.OnABCodeChanging(value);
					this.SendPropertyChanging();
					this._ABCode = value;
					this.SendPropertyChanged("ABCode");
					this.OnABCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ABDesc", DbType="VarChar(150)")]
		public string ABDesc
		{
			get
			{
				return this._ABDesc;
			}
			set
			{
				if ((this._ABDesc != value))
				{
					this.OnABDescChanging(value);
					this.SendPropertyChanging();
					this._ABDesc = value;
					this.SendPropertyChanged("ABDesc");
					this.OnABDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_AdviceBangla_AdviceBangla", Storage="_AdviceBanglas", ThisKey="ABCode", OtherKey="ABCode")]
		public EntitySet<AdviceBangla> AdviceBanglas
		{
			get
			{
				return this._AdviceBanglas;
			}
			set
			{
				this._AdviceBanglas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdviceBanglas(AdviceBangla entity)
		{
			this.SendPropertyChanging();
			entity.lkp_AdviceBangla = this;
		}
		
		private void detach_AdviceBanglas(AdviceBangla entity)
		{
			this.SendPropertyChanging();
			entity.lkp_AdviceBangla = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_AreaDetails")]
	public partial class lkp_AreaDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AreaCode;
		
		private string _DivCode;
		
		private string _DivName;
		
		private string _DistCode;
		
		private string _DistName;
		
		private string _ThanaCode;
		
		private string _ThanaName;
		
		private EntitySet<PatientBasicInfo> _PatientBasicInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAreaCodeChanging(string value);
    partial void OnAreaCodeChanged();
    partial void OnDivCodeChanging(string value);
    partial void OnDivCodeChanged();
    partial void OnDivNameChanging(string value);
    partial void OnDivNameChanged();
    partial void OnDistCodeChanging(string value);
    partial void OnDistCodeChanged();
    partial void OnDistNameChanging(string value);
    partial void OnDistNameChanged();
    partial void OnThanaCodeChanging(string value);
    partial void OnThanaCodeChanged();
    partial void OnThanaNameChanging(string value);
    partial void OnThanaNameChanged();
    #endregion
		
		public lkp_AreaDetail()
		{
			this._PatientBasicInfos = new EntitySet<PatientBasicInfo>(new Action<PatientBasicInfo>(this.attach_PatientBasicInfos), new Action<PatientBasicInfo>(this.detach_PatientBasicInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivCode", DbType="VarChar(1)")]
		public string DivCode
		{
			get
			{
				return this._DivCode;
			}
			set
			{
				if ((this._DivCode != value))
				{
					this.OnDivCodeChanging(value);
					this.SendPropertyChanging();
					this._DivCode = value;
					this.SendPropertyChanged("DivCode");
					this.OnDivCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivName", DbType="VarChar(50)")]
		public string DivName
		{
			get
			{
				return this._DivName;
			}
			set
			{
				if ((this._DivName != value))
				{
					this.OnDivNameChanging(value);
					this.SendPropertyChanging();
					this._DivName = value;
					this.SendPropertyChanged("DivName");
					this.OnDivNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistCode", DbType="VarChar(3)")]
		public string DistCode
		{
			get
			{
				return this._DistCode;
			}
			set
			{
				if ((this._DistCode != value))
				{
					this.OnDistCodeChanging(value);
					this.SendPropertyChanging();
					this._DistCode = value;
					this.SendPropertyChanged("DistCode");
					this.OnDistCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistName", DbType="VarChar(50)")]
		public string DistName
		{
			get
			{
				return this._DistName;
			}
			set
			{
				if ((this._DistName != value))
				{
					this.OnDistNameChanging(value);
					this.SendPropertyChanging();
					this._DistName = value;
					this.SendPropertyChanged("DistName");
					this.OnDistNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThanaCode", DbType="VarChar(2)")]
		public string ThanaCode
		{
			get
			{
				return this._ThanaCode;
			}
			set
			{
				if ((this._ThanaCode != value))
				{
					this.OnThanaCodeChanging(value);
					this.SendPropertyChanging();
					this._ThanaCode = value;
					this.SendPropertyChanged("ThanaCode");
					this.OnThanaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThanaName", DbType="VarChar(50)")]
		public string ThanaName
		{
			get
			{
				return this._ThanaName;
			}
			set
			{
				if ((this._ThanaName != value))
				{
					this.OnThanaNameChanging(value);
					this.SendPropertyChanging();
					this._ThanaName = value;
					this.SendPropertyChanged("ThanaName");
					this.OnThanaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_AreaDetail_PatientBasicInfo", Storage="_PatientBasicInfos", ThisKey="AreaCode", OtherKey="AreaCode")]
		public EntitySet<PatientBasicInfo> PatientBasicInfos
		{
			get
			{
				return this._PatientBasicInfos;
			}
			set
			{
				this._PatientBasicInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientBasicInfos(PatientBasicInfo entity)
		{
			this.SendPropertyChanging();
			entity.lkp_AreaDetail = this;
		}
		
		private void detach_PatientBasicInfos(PatientBasicInfo entity)
		{
			this.SendPropertyChanging();
			entity.lkp_AreaDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Cashier")]
	public partial class lkp_Cashier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CashierCode;
		
		private string _CashierName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCashierCodeChanging(short value);
    partial void OnCashierCodeChanged();
    partial void OnCashierNameChanging(string value);
    partial void OnCashierNameChanged();
    #endregion
		
		public lkp_Cashier()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashierCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short CashierCode
		{
			get
			{
				return this._CashierCode;
			}
			set
			{
				if ((this._CashierCode != value))
				{
					this.OnCashierCodeChanging(value);
					this.SendPropertyChanging();
					this._CashierCode = value;
					this.SendPropertyChanged("CashierCode");
					this.OnCashierCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashierName", DbType="VarChar(50)")]
		public string CashierName
		{
			get
			{
				return this._CashierName;
			}
			set
			{
				if ((this._CashierName != value))
				{
					this.OnCashierNameChanging(value);
					this.SendPropertyChanging();
					this._CashierName = value;
					this.SendPropertyChanged("CashierName");
					this.OnCashierNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_ChiefComplaince")]
	public partial class lkp_ChiefComplaince : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CCCode;
		
		private string _CCGroup;
		
		private string _CCDesc;
		
		private EntitySet<ChiefComplaince> _ChiefComplainces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCCCodeChanging(short value);
    partial void OnCCCodeChanged();
    partial void OnCCGroupChanging(string value);
    partial void OnCCGroupChanged();
    partial void OnCCDescChanging(string value);
    partial void OnCCDescChanged();
    #endregion
		
		public lkp_ChiefComplaince()
		{
			this._ChiefComplainces = new EntitySet<ChiefComplaince>(new Action<ChiefComplaince>(this.attach_ChiefComplainces), new Action<ChiefComplaince>(this.detach_ChiefComplainces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short CCCode
		{
			get
			{
				return this._CCCode;
			}
			set
			{
				if ((this._CCCode != value))
				{
					this.OnCCCodeChanging(value);
					this.SendPropertyChanging();
					this._CCCode = value;
					this.SendPropertyChanged("CCCode");
					this.OnCCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCGroup", DbType="VarChar(50)")]
		public string CCGroup
		{
			get
			{
				return this._CCGroup;
			}
			set
			{
				if ((this._CCGroup != value))
				{
					this.OnCCGroupChanging(value);
					this.SendPropertyChanging();
					this._CCGroup = value;
					this.SendPropertyChanged("CCGroup");
					this.OnCCGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCDesc", DbType="VarChar(100)")]
		public string CCDesc
		{
			get
			{
				return this._CCDesc;
			}
			set
			{
				if ((this._CCDesc != value))
				{
					this.OnCCDescChanging(value);
					this.SendPropertyChanging();
					this._CCDesc = value;
					this.SendPropertyChanged("CCDesc");
					this.OnCCDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_ChiefComplaince_ChiefComplaince", Storage="_ChiefComplainces", ThisKey="CCCode", OtherKey="CCCode")]
		public EntitySet<ChiefComplaince> ChiefComplainces
		{
			get
			{
				return this._ChiefComplainces;
			}
			set
			{
				this._ChiefComplainces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChiefComplainces(ChiefComplaince entity)
		{
			this.SendPropertyChanging();
			entity.lkp_ChiefComplaince = this;
		}
		
		private void detach_ChiefComplainces(ChiefComplaince entity)
		{
			this.SendPropertyChanging();
			entity.lkp_ChiefComplaince = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_ConfirmDx")]
	public partial class lkp_ConfirmDx : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CDCode;
		
		private string _CDDesc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCDCodeChanging(short value);
    partial void OnCDCodeChanged();
    partial void OnCDDescChanging(string value);
    partial void OnCDDescChanged();
    #endregion
		
		public lkp_ConfirmDx()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CDCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short CDCode
		{
			get
			{
				return this._CDCode;
			}
			set
			{
				if ((this._CDCode != value))
				{
					this.OnCDCodeChanging(value);
					this.SendPropertyChanging();
					this._CDCode = value;
					this.SendPropertyChanged("CDCode");
					this.OnCDCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CDDesc", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CDDesc
		{
			get
			{
				return this._CDDesc;
			}
			set
			{
				if ((this._CDDesc != value))
				{
					this.OnCDDescChanging(value);
					this.SendPropertyChanging();
					this._CDDesc = value;
					this.SendPropertyChanged("CDDesc");
					this.OnCDDescChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_DentalAdvice")]
	public partial class lkp_DentalAdvice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _DACode;
		
		private string _DADesc;
		
		private EntitySet<DentalAdvice> _DentalAdvices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDACodeChanging(short value);
    partial void OnDACodeChanged();
    partial void OnDADescChanging(string value);
    partial void OnDADescChanged();
    #endregion
		
		public lkp_DentalAdvice()
		{
			this._DentalAdvices = new EntitySet<DentalAdvice>(new Action<DentalAdvice>(this.attach_DentalAdvices), new Action<DentalAdvice>(this.detach_DentalAdvices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DACode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short DACode
		{
			get
			{
				return this._DACode;
			}
			set
			{
				if ((this._DACode != value))
				{
					this.OnDACodeChanging(value);
					this.SendPropertyChanging();
					this._DACode = value;
					this.SendPropertyChanged("DACode");
					this.OnDACodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DADesc", DbType="NVarChar(50)")]
		public string DADesc
		{
			get
			{
				return this._DADesc;
			}
			set
			{
				if ((this._DADesc != value))
				{
					this.OnDADescChanging(value);
					this.SendPropertyChanging();
					this._DADesc = value;
					this.SendPropertyChanged("DADesc");
					this.OnDADescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_DentalAdvice_DentalAdvice", Storage="_DentalAdvices", ThisKey="DACode", OtherKey="DACode")]
		public EntitySet<DentalAdvice> DentalAdvices
		{
			get
			{
				return this._DentalAdvices;
			}
			set
			{
				this._DentalAdvices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DentalAdvices(DentalAdvice entity)
		{
			this.SendPropertyChanging();
			entity.lkp_DentalAdvice = this;
		}
		
		private void detach_DentalAdvices(DentalAdvice entity)
		{
			this.SendPropertyChanging();
			entity.lkp_DentalAdvice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_DentalSign")]
	public partial class lkp_DentalSign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _DSCode;
		
		private string _DSDesc;
		
		private EntitySet<DentalSign> _DentalSigns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDSCodeChanging(short value);
    partial void OnDSCodeChanged();
    partial void OnDSDescChanging(string value);
    partial void OnDSDescChanged();
    #endregion
		
		public lkp_DentalSign()
		{
			this._DentalSigns = new EntitySet<DentalSign>(new Action<DentalSign>(this.attach_DentalSigns), new Action<DentalSign>(this.detach_DentalSigns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DSCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short DSCode
		{
			get
			{
				return this._DSCode;
			}
			set
			{
				if ((this._DSCode != value))
				{
					this.OnDSCodeChanging(value);
					this.SendPropertyChanging();
					this._DSCode = value;
					this.SendPropertyChanged("DSCode");
					this.OnDSCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DSDesc", DbType="NVarChar(50)")]
		public string DSDesc
		{
			get
			{
				return this._DSDesc;
			}
			set
			{
				if ((this._DSDesc != value))
				{
					this.OnDSDescChanging(value);
					this.SendPropertyChanging();
					this._DSDesc = value;
					this.SendPropertyChanged("DSDesc");
					this.OnDSDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_DentalSign_DentalSign", Storage="_DentalSigns", ThisKey="DSCode", OtherKey="DSCode")]
		public EntitySet<DentalSign> DentalSigns
		{
			get
			{
				return this._DentalSigns;
			}
			set
			{
				this._DentalSigns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DentalSigns(DentalSign entity)
		{
			this.SendPropertyChanging();
			entity.lkp_DentalSign = this;
		}
		
		private void detach_DentalSigns(DentalSign entity)
		{
			this.SendPropertyChanging();
			entity.lkp_DentalSign = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_District")]
	public partial class lkp_District : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DivisionCode;
		
		private string _DistrictCode;
		
		private string _DistrictName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDivisionCodeChanging(string value);
    partial void OnDivisionCodeChanged();
    partial void OnDistrictCodeChanging(string value);
    partial void OnDistrictCodeChanged();
    partial void OnDistrictNameChanging(string value);
    partial void OnDistrictNameChanged();
    #endregion
		
		public lkp_District()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionCode", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string DivisionCode
		{
			get
			{
				return this._DivisionCode;
			}
			set
			{
				if ((this._DivisionCode != value))
				{
					this.OnDivisionCodeChanging(value);
					this.SendPropertyChanging();
					this._DivisionCode = value;
					this.SendPropertyChanged("DivisionCode");
					this.OnDivisionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DistrictCode
		{
			get
			{
				return this._DistrictCode;
			}
			set
			{
				if ((this._DistrictCode != value))
				{
					this.OnDistrictCodeChanging(value);
					this.SendPropertyChanging();
					this._DistrictCode = value;
					this.SendPropertyChanged("DistrictCode");
					this.OnDistrictCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string DistrictName
		{
			get
			{
				return this._DistrictName;
			}
			set
			{
				if ((this._DistrictName != value))
				{
					this.OnDistrictNameChanging(value);
					this.SendPropertyChanging();
					this._DistrictName = value;
					this.SendPropertyChanged("DistrictName");
					this.OnDistrictNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Division")]
	public partial class lkp_Division : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DivisionCode;
		
		private string _DivisionName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDivisionCodeChanging(string value);
    partial void OnDivisionCodeChanged();
    partial void OnDivisionNameChanging(string value);
    partial void OnDivisionNameChanged();
    #endregion
		
		public lkp_Division()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionCode", DbType="NVarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DivisionCode
		{
			get
			{
				return this._DivisionCode;
			}
			set
			{
				if ((this._DivisionCode != value))
				{
					this.OnDivisionCodeChanging(value);
					this.SendPropertyChanging();
					this._DivisionCode = value;
					this.SendPropertyChanged("DivisionCode");
					this.OnDivisionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionName", DbType="NVarChar(20)")]
		public string DivisionName
		{
			get
			{
				return this._DivisionName;
			}
			set
			{
				if ((this._DivisionName != value))
				{
					this.OnDivisionNameChanging(value);
					this.SendPropertyChanging();
					this._DivisionName = value;
					this.SendPropertyChanged("DivisionName");
					this.OnDivisionNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_DoctorsName")]
	public partial class lkp_DoctorsName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _DNCode;
		
		private string _DoctorName;
		
		private string _Designation;
		
		private System.Nullable<short> _DoctorFee;
		
		private System.Nullable<bool> _Status;
		
		private EntitySet<DoctorVisitInfo> _DoctorVisitInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDNCodeChanging(short value);
    partial void OnDNCodeChanged();
    partial void OnDoctorNameChanging(string value);
    partial void OnDoctorNameChanged();
    partial void OnDesignationChanging(string value);
    partial void OnDesignationChanged();
    partial void OnDoctorFeeChanging(System.Nullable<short> value);
    partial void OnDoctorFeeChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public lkp_DoctorsName()
		{
			this._DoctorVisitInfos = new EntitySet<DoctorVisitInfo>(new Action<DoctorVisitInfo>(this.attach_DoctorVisitInfos), new Action<DoctorVisitInfo>(this.detach_DoctorVisitInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short DNCode
		{
			get
			{
				return this._DNCode;
			}
			set
			{
				if ((this._DNCode != value))
				{
					this.OnDNCodeChanging(value);
					this.SendPropertyChanging();
					this._DNCode = value;
					this.SendPropertyChanged("DNCode");
					this.OnDNCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorName", DbType="NVarChar(50)")]
		public string DoctorName
		{
			get
			{
				return this._DoctorName;
			}
			set
			{
				if ((this._DoctorName != value))
				{
					this.OnDoctorNameChanging(value);
					this.SendPropertyChanging();
					this._DoctorName = value;
					this.SendPropertyChanged("DoctorName");
					this.OnDoctorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designation", DbType="NVarChar(200)")]
		public string Designation
		{
			get
			{
				return this._Designation;
			}
			set
			{
				if ((this._Designation != value))
				{
					this.OnDesignationChanging(value);
					this.SendPropertyChanging();
					this._Designation = value;
					this.SendPropertyChanged("Designation");
					this.OnDesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorFee", DbType="SmallInt")]
		public System.Nullable<short> DoctorFee
		{
			get
			{
				return this._DoctorFee;
			}
			set
			{
				if ((this._DoctorFee != value))
				{
					this.OnDoctorFeeChanging(value);
					this.SendPropertyChanging();
					this._DoctorFee = value;
					this.SendPropertyChanged("DoctorFee");
					this.OnDoctorFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_DoctorsName_DoctorVisitInfo", Storage="_DoctorVisitInfos", ThisKey="DNCode", OtherKey="DoctorCode")]
		public EntitySet<DoctorVisitInfo> DoctorVisitInfos
		{
			get
			{
				return this._DoctorVisitInfos;
			}
			set
			{
				this._DoctorVisitInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DoctorVisitInfos(DoctorVisitInfo entity)
		{
			this.SendPropertyChanging();
			entity.lkp_DoctorsName = this;
		}
		
		private void detach_DoctorVisitInfos(DoctorVisitInfo entity)
		{
			this.SendPropertyChanging();
			entity.lkp_DoctorsName = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Frequency")]
	public partial class lkp_Frequency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _FreCode;
		
		private string _FreDesc;
		
		private System.Nullable<decimal> _FreCount;
		
		private EntitySet<MedicineDetail> _MedicineDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFreCodeChanging(short value);
    partial void OnFreCodeChanged();
    partial void OnFreDescChanging(string value);
    partial void OnFreDescChanged();
    partial void OnFreCountChanging(System.Nullable<decimal> value);
    partial void OnFreCountChanged();
    #endregion
		
		public lkp_Frequency()
		{
			this._MedicineDetails = new EntitySet<MedicineDetail>(new Action<MedicineDetail>(this.attach_MedicineDetails), new Action<MedicineDetail>(this.detach_MedicineDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short FreCode
		{
			get
			{
				return this._FreCode;
			}
			set
			{
				if ((this._FreCode != value))
				{
					this.OnFreCodeChanging(value);
					this.SendPropertyChanging();
					this._FreCode = value;
					this.SendPropertyChanged("FreCode");
					this.OnFreCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreDesc", DbType="VarChar(50)")]
		public string FreDesc
		{
			get
			{
				return this._FreDesc;
			}
			set
			{
				if ((this._FreDesc != value))
				{
					this.OnFreDescChanging(value);
					this.SendPropertyChanging();
					this._FreDesc = value;
					this.SendPropertyChanged("FreDesc");
					this.OnFreDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreCount", DbType="Decimal(5,1)")]
		public System.Nullable<decimal> FreCount
		{
			get
			{
				return this._FreCount;
			}
			set
			{
				if ((this._FreCount != value))
				{
					this.OnFreCountChanging(value);
					this.SendPropertyChanging();
					this._FreCount = value;
					this.SendPropertyChanged("FreCount");
					this.OnFreCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_Frequency_MedicineDetail", Storage="_MedicineDetails", ThisKey="FreCode", OtherKey="FreCode")]
		public EntitySet<MedicineDetail> MedicineDetails
		{
			get
			{
				return this._MedicineDetails;
			}
			set
			{
				this._MedicineDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_Frequency = this;
		}
		
		private void detach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_Frequency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_GenericName")]
	public partial class lkp_GenericName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _GNCode;
		
		private string _GNDesc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGNCodeChanging(short value);
    partial void OnGNCodeChanged();
    partial void OnGNDescChanging(string value);
    partial void OnGNDescChanged();
    #endregion
		
		public lkp_GenericName()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GNCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short GNCode
		{
			get
			{
				return this._GNCode;
			}
			set
			{
				if ((this._GNCode != value))
				{
					this.OnGNCodeChanging(value);
					this.SendPropertyChanging();
					this._GNCode = value;
					this.SendPropertyChanged("GNCode");
					this.OnGNCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GNDesc", DbType="VarChar(200)")]
		public string GNDesc
		{
			get
			{
				return this._GNDesc;
			}
			set
			{
				if ((this._GNDesc != value))
				{
					this.OnGNDescChanging(value);
					this.SendPropertyChanging();
					this._GNDesc = value;
					this.SendPropertyChanged("GNDesc");
					this.OnGNDescChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_ICD10Code")]
	public partial class lkp_ICD10Code : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ICDCode;
		
		private string _ICDDesc;
		
		private string _ICDTitle;
		
		private string _ICDDesc2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnICDCodeChanging(string value);
    partial void OnICDCodeChanged();
    partial void OnICDDescChanging(string value);
    partial void OnICDDescChanged();
    partial void OnICDTitleChanging(string value);
    partial void OnICDTitleChanged();
    partial void OnICDDesc2Changing(string value);
    partial void OnICDDesc2Changed();
    #endregion
		
		public lkp_ICD10Code()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICDCode", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ICDCode
		{
			get
			{
				return this._ICDCode;
			}
			set
			{
				if ((this._ICDCode != value))
				{
					this.OnICDCodeChanging(value);
					this.SendPropertyChanging();
					this._ICDCode = value;
					this.SendPropertyChanged("ICDCode");
					this.OnICDCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICDDesc", DbType="VarChar(200)")]
		public string ICDDesc
		{
			get
			{
				return this._ICDDesc;
			}
			set
			{
				if ((this._ICDDesc != value))
				{
					this.OnICDDescChanging(value);
					this.SendPropertyChanging();
					this._ICDDesc = value;
					this.SendPropertyChanged("ICDDesc");
					this.OnICDDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICDTitle", DbType="VarChar(200)")]
		public string ICDTitle
		{
			get
			{
				return this._ICDTitle;
			}
			set
			{
				if ((this._ICDTitle != value))
				{
					this.OnICDTitleChanging(value);
					this.SendPropertyChanging();
					this._ICDTitle = value;
					this.SendPropertyChanged("ICDTitle");
					this.OnICDTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICDDesc2", DbType="VarChar(200)")]
		public string ICDDesc2
		{
			get
			{
				return this._ICDDesc2;
			}
			set
			{
				if ((this._ICDDesc2 != value))
				{
					this.OnICDDesc2Changing(value);
					this.SendPropertyChanging();
					this._ICDDesc2 = value;
					this.SendPropertyChanged("ICDDesc2");
					this.OnICDDesc2Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Investigations")]
	public partial class lkp_Investigation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _InvCode;
		
		private string _InvDesc;
		
		private EntitySet<Investigation> _Investigations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvCodeChanging(short value);
    partial void OnInvCodeChanged();
    partial void OnInvDescChanging(string value);
    partial void OnInvDescChanged();
    #endregion
		
		public lkp_Investigation()
		{
			this._Investigations = new EntitySet<Investigation>(new Action<Investigation>(this.attach_Investigations), new Action<Investigation>(this.detach_Investigations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short InvCode
		{
			get
			{
				return this._InvCode;
			}
			set
			{
				if ((this._InvCode != value))
				{
					this.OnInvCodeChanging(value);
					this.SendPropertyChanging();
					this._InvCode = value;
					this.SendPropertyChanged("InvCode");
					this.OnInvCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvDesc", DbType="NVarChar(100)")]
		public string InvDesc
		{
			get
			{
				return this._InvDesc;
			}
			set
			{
				if ((this._InvDesc != value))
				{
					this.OnInvDescChanging(value);
					this.SendPropertyChanging();
					this._InvDesc = value;
					this.SendPropertyChanged("InvDesc");
					this.OnInvDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_Investigation_Investigation", Storage="_Investigations", ThisKey="InvCode", OtherKey="InvCode")]
		public EntitySet<Investigation> Investigations
		{
			get
			{
				return this._Investigations;
			}
			set
			{
				this._Investigations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Investigations(Investigation entity)
		{
			this.SendPropertyChanging();
			entity.lkp_Investigation = this;
		}
		
		private void detach_Investigations(Investigation entity)
		{
			this.SendPropertyChanging();
			entity.lkp_Investigation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_LabName")]
	public partial class lkp_LabName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _LNCode;
		
		private string _LabName;
		
		private EntitySet<LabTestInfoDetail> _LabTestInfoDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLNCodeChanging(byte value);
    partial void OnLNCodeChanged();
    partial void OnLabNameChanging(string value);
    partial void OnLabNameChanged();
    #endregion
		
		public lkp_LabName()
		{
			this._LabTestInfoDetails = new EntitySet<LabTestInfoDetail>(new Action<LabTestInfoDetail>(this.attach_LabTestInfoDetails), new Action<LabTestInfoDetail>(this.detach_LabTestInfoDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LNCode", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte LNCode
		{
			get
			{
				return this._LNCode;
			}
			set
			{
				if ((this._LNCode != value))
				{
					this.OnLNCodeChanging(value);
					this.SendPropertyChanging();
					this._LNCode = value;
					this.SendPropertyChanged("LNCode");
					this.OnLNCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabName", DbType="VarChar(50)")]
		public string LabName
		{
			get
			{
				return this._LabName;
			}
			set
			{
				if ((this._LabName != value))
				{
					this.OnLabNameChanging(value);
					this.SendPropertyChanging();
					this._LabName = value;
					this.SendPropertyChanged("LabName");
					this.OnLabNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_LabName_LabTestInfoDetail", Storage="_LabTestInfoDetails", ThisKey="LNCode", OtherKey="LNCode")]
		public EntitySet<LabTestInfoDetail> LabTestInfoDetails
		{
			get
			{
				return this._LabTestInfoDetails;
			}
			set
			{
				this._LabTestInfoDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LabTestInfoDetails(LabTestInfoDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_LabName = this;
		}
		
		private void detach_LabTestInfoDetails(LabTestInfoDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_LabName = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_MedicineContains")]
	public partial class lkp_MedicineContain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _MCCode;
		
		private string _MDDesc;
		
		private EntitySet<lkp_MedicineName> _lkp_MedicineNames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMCCodeChanging(byte value);
    partial void OnMCCodeChanged();
    partial void OnMDDescChanging(string value);
    partial void OnMDDescChanged();
    #endregion
		
		public lkp_MedicineContain()
		{
			this._lkp_MedicineNames = new EntitySet<lkp_MedicineName>(new Action<lkp_MedicineName>(this.attach_lkp_MedicineNames), new Action<lkp_MedicineName>(this.detach_lkp_MedicineNames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MCCode", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte MCCode
		{
			get
			{
				return this._MCCode;
			}
			set
			{
				if ((this._MCCode != value))
				{
					this.OnMCCodeChanging(value);
					this.SendPropertyChanging();
					this._MCCode = value;
					this.SendPropertyChanged("MCCode");
					this.OnMCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MDDesc", DbType="VarChar(50)")]
		public string MDDesc
		{
			get
			{
				return this._MDDesc;
			}
			set
			{
				if ((this._MDDesc != value))
				{
					this.OnMDDescChanging(value);
					this.SendPropertyChanging();
					this._MDDesc = value;
					this.SendPropertyChanged("MDDesc");
					this.OnMDDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_MedicineContain_lkp_MedicineName", Storage="_lkp_MedicineNames", ThisKey="MCCode", OtherKey="MCCode")]
		public EntitySet<lkp_MedicineName> lkp_MedicineNames
		{
			get
			{
				return this._lkp_MedicineNames;
			}
			set
			{
				this._lkp_MedicineNames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lkp_MedicineNames(lkp_MedicineName entity)
		{
			this.SendPropertyChanging();
			entity.lkp_MedicineContain = this;
		}
		
		private void detach_lkp_MedicineNames(lkp_MedicineName entity)
		{
			this.SendPropertyChanging();
			entity.lkp_MedicineContain = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_MedicineForm")]
	public partial class lkp_MedicineForm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _MFCode;
		
		private string _MFDesc;
		
		private EntitySet<lkp_MedicineName> _lkp_MedicineNames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMFCodeChanging(byte value);
    partial void OnMFCodeChanged();
    partial void OnMFDescChanging(string value);
    partial void OnMFDescChanged();
    #endregion
		
		public lkp_MedicineForm()
		{
			this._lkp_MedicineNames = new EntitySet<lkp_MedicineName>(new Action<lkp_MedicineName>(this.attach_lkp_MedicineNames), new Action<lkp_MedicineName>(this.detach_lkp_MedicineNames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MFCode", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte MFCode
		{
			get
			{
				return this._MFCode;
			}
			set
			{
				if ((this._MFCode != value))
				{
					this.OnMFCodeChanging(value);
					this.SendPropertyChanging();
					this._MFCode = value;
					this.SendPropertyChanged("MFCode");
					this.OnMFCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MFDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MFDesc
		{
			get
			{
				return this._MFDesc;
			}
			set
			{
				if ((this._MFDesc != value))
				{
					this.OnMFDescChanging(value);
					this.SendPropertyChanging();
					this._MFDesc = value;
					this.SendPropertyChanged("MFDesc");
					this.OnMFDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_MedicineForm_lkp_MedicineName", Storage="_lkp_MedicineNames", ThisKey="MFCode", OtherKey="MFCode")]
		public EntitySet<lkp_MedicineName> lkp_MedicineNames
		{
			get
			{
				return this._lkp_MedicineNames;
			}
			set
			{
				this._lkp_MedicineNames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lkp_MedicineNames(lkp_MedicineName entity)
		{
			this.SendPropertyChanging();
			entity.lkp_MedicineForm = this;
		}
		
		private void detach_lkp_MedicineNames(lkp_MedicineName entity)
		{
			this.SendPropertyChanging();
			entity.lkp_MedicineForm = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_MedicineName")]
	public partial class lkp_MedicineName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _MNCode;
		
		private string _TradeName;
		
		private System.Nullable<short> _GNCode;
		
		private System.Nullable<byte> _MFCode;
		
		private System.Nullable<short> _Strength;
		
		private System.Nullable<byte> _SUCode;
		
		private System.Nullable<decimal> _MedicinePrice;
		
		private byte _MCCode;
		
		private short _PerContain;
		
		private System.Nullable<int> _StockInHand;
		
		private System.Nullable<short> _MedReorderPoint;
		
		private string _UserID;
		
		private string _ModifyUserID;
		
		private System.Nullable<System.DateTime> _ModifyDt;
		
		private EntitySet<MedicineDetail> _MedicineDetails;
		
		private EntityRef<lkp_MedicineContain> _lkp_MedicineContain;
		
		private EntityRef<lkp_MedicineForm> _lkp_MedicineForm;
		
		private EntityRef<lkp_StrengthUnit> _lkp_StrengthUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMNCodeChanging(short value);
    partial void OnMNCodeChanged();
    partial void OnTradeNameChanging(string value);
    partial void OnTradeNameChanged();
    partial void OnGNCodeChanging(System.Nullable<short> value);
    partial void OnGNCodeChanged();
    partial void OnMFCodeChanging(System.Nullable<byte> value);
    partial void OnMFCodeChanged();
    partial void OnStrengthChanging(System.Nullable<short> value);
    partial void OnStrengthChanged();
    partial void OnSUCodeChanging(System.Nullable<byte> value);
    partial void OnSUCodeChanged();
    partial void OnMedicinePriceChanging(System.Nullable<decimal> value);
    partial void OnMedicinePriceChanged();
    partial void OnMCCodeChanging(byte value);
    partial void OnMCCodeChanged();
    partial void OnPerContainChanging(short value);
    partial void OnPerContainChanged();
    partial void OnStockInHandChanging(System.Nullable<int> value);
    partial void OnStockInHandChanged();
    partial void OnMedReorderPointChanging(System.Nullable<short> value);
    partial void OnMedReorderPointChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnModifyUserIDChanging(string value);
    partial void OnModifyUserIDChanged();
    partial void OnModifyDtChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDtChanged();
    #endregion
		
		public lkp_MedicineName()
		{
			this._MedicineDetails = new EntitySet<MedicineDetail>(new Action<MedicineDetail>(this.attach_MedicineDetails), new Action<MedicineDetail>(this.detach_MedicineDetails));
			this._lkp_MedicineContain = default(EntityRef<lkp_MedicineContain>);
			this._lkp_MedicineForm = default(EntityRef<lkp_MedicineForm>);
			this._lkp_StrengthUnit = default(EntityRef<lkp_StrengthUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MNCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MNCode
		{
			get
			{
				return this._MNCode;
			}
			set
			{
				if ((this._MNCode != value))
				{
					this.OnMNCodeChanging(value);
					this.SendPropertyChanging();
					this._MNCode = value;
					this.SendPropertyChanged("MNCode");
					this.OnMNCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeName", DbType="NVarChar(50)")]
		public string TradeName
		{
			get
			{
				return this._TradeName;
			}
			set
			{
				if ((this._TradeName != value))
				{
					this.OnTradeNameChanging(value);
					this.SendPropertyChanging();
					this._TradeName = value;
					this.SendPropertyChanged("TradeName");
					this.OnTradeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GNCode", DbType="SmallInt")]
		public System.Nullable<short> GNCode
		{
			get
			{
				return this._GNCode;
			}
			set
			{
				if ((this._GNCode != value))
				{
					this.OnGNCodeChanging(value);
					this.SendPropertyChanging();
					this._GNCode = value;
					this.SendPropertyChanged("GNCode");
					this.OnGNCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MFCode", DbType="TinyInt")]
		public System.Nullable<byte> MFCode
		{
			get
			{
				return this._MFCode;
			}
			set
			{
				if ((this._MFCode != value))
				{
					if (this._lkp_MedicineForm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMFCodeChanging(value);
					this.SendPropertyChanging();
					this._MFCode = value;
					this.SendPropertyChanged("MFCode");
					this.OnMFCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Strength", DbType="SmallInt")]
		public System.Nullable<short> Strength
		{
			get
			{
				return this._Strength;
			}
			set
			{
				if ((this._Strength != value))
				{
					this.OnStrengthChanging(value);
					this.SendPropertyChanging();
					this._Strength = value;
					this.SendPropertyChanged("Strength");
					this.OnStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUCode", DbType="TinyInt")]
		public System.Nullable<byte> SUCode
		{
			get
			{
				return this._SUCode;
			}
			set
			{
				if ((this._SUCode != value))
				{
					if (this._lkp_StrengthUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSUCodeChanging(value);
					this.SendPropertyChanging();
					this._SUCode = value;
					this.SendPropertyChanged("SUCode");
					this.OnSUCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicinePrice", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> MedicinePrice
		{
			get
			{
				return this._MedicinePrice;
			}
			set
			{
				if ((this._MedicinePrice != value))
				{
					this.OnMedicinePriceChanging(value);
					this.SendPropertyChanging();
					this._MedicinePrice = value;
					this.SendPropertyChanged("MedicinePrice");
					this.OnMedicinePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MCCode", DbType="TinyInt NOT NULL")]
		public byte MCCode
		{
			get
			{
				return this._MCCode;
			}
			set
			{
				if ((this._MCCode != value))
				{
					if (this._lkp_MedicineContain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMCCodeChanging(value);
					this.SendPropertyChanging();
					this._MCCode = value;
					this.SendPropertyChanged("MCCode");
					this.OnMCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerContain", DbType="SmallInt NOT NULL")]
		public short PerContain
		{
			get
			{
				return this._PerContain;
			}
			set
			{
				if ((this._PerContain != value))
				{
					this.OnPerContainChanging(value);
					this.SendPropertyChanging();
					this._PerContain = value;
					this.SendPropertyChanged("PerContain");
					this.OnPerContainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockInHand", DbType="Int")]
		public System.Nullable<int> StockInHand
		{
			get
			{
				return this._StockInHand;
			}
			set
			{
				if ((this._StockInHand != value))
				{
					this.OnStockInHandChanging(value);
					this.SendPropertyChanging();
					this._StockInHand = value;
					this.SendPropertyChanged("StockInHand");
					this.OnStockInHandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedReorderPoint", DbType="SmallInt")]
		public System.Nullable<short> MedReorderPoint
		{
			get
			{
				return this._MedReorderPoint;
			}
			set
			{
				if ((this._MedReorderPoint != value))
				{
					this.OnMedReorderPointChanging(value);
					this.SendPropertyChanging();
					this._MedReorderPoint = value;
					this.SendPropertyChanged("MedReorderPoint");
					this.OnMedReorderPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyUserID", DbType="VarChar(50)")]
		public string ModifyUserID
		{
			get
			{
				return this._ModifyUserID;
			}
			set
			{
				if ((this._ModifyUserID != value))
				{
					this.OnModifyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifyUserID = value;
					this.SendPropertyChanged("ModifyUserID");
					this.OnModifyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDt
		{
			get
			{
				return this._ModifyDt;
			}
			set
			{
				if ((this._ModifyDt != value))
				{
					this.OnModifyDtChanging(value);
					this.SendPropertyChanging();
					this._ModifyDt = value;
					this.SendPropertyChanged("ModifyDt");
					this.OnModifyDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_MedicineName_MedicineDetail", Storage="_MedicineDetails", ThisKey="MNCode", OtherKey="MNCode")]
		public EntitySet<MedicineDetail> MedicineDetails
		{
			get
			{
				return this._MedicineDetails;
			}
			set
			{
				this._MedicineDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_MedicineContain_lkp_MedicineName", Storage="_lkp_MedicineContain", ThisKey="MCCode", OtherKey="MCCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_MedicineContain lkp_MedicineContain
		{
			get
			{
				return this._lkp_MedicineContain.Entity;
			}
			set
			{
				lkp_MedicineContain previousValue = this._lkp_MedicineContain.Entity;
				if (((previousValue != value) 
							|| (this._lkp_MedicineContain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_MedicineContain.Entity = null;
						previousValue.lkp_MedicineNames.Remove(this);
					}
					this._lkp_MedicineContain.Entity = value;
					if ((value != null))
					{
						value.lkp_MedicineNames.Add(this);
						this._MCCode = value.MCCode;
					}
					else
					{
						this._MCCode = default(byte);
					}
					this.SendPropertyChanged("lkp_MedicineContain");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_MedicineForm_lkp_MedicineName", Storage="_lkp_MedicineForm", ThisKey="MFCode", OtherKey="MFCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public lkp_MedicineForm lkp_MedicineForm
		{
			get
			{
				return this._lkp_MedicineForm.Entity;
			}
			set
			{
				lkp_MedicineForm previousValue = this._lkp_MedicineForm.Entity;
				if (((previousValue != value) 
							|| (this._lkp_MedicineForm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_MedicineForm.Entity = null;
						previousValue.lkp_MedicineNames.Remove(this);
					}
					this._lkp_MedicineForm.Entity = value;
					if ((value != null))
					{
						value.lkp_MedicineNames.Add(this);
						this._MFCode = value.MFCode;
					}
					else
					{
						this._MFCode = default(Nullable<byte>);
					}
					this.SendPropertyChanged("lkp_MedicineForm");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_StrengthUnit_lkp_MedicineName", Storage="_lkp_StrengthUnit", ThisKey="SUCode", OtherKey="SUCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public lkp_StrengthUnit lkp_StrengthUnit
		{
			get
			{
				return this._lkp_StrengthUnit.Entity;
			}
			set
			{
				lkp_StrengthUnit previousValue = this._lkp_StrengthUnit.Entity;
				if (((previousValue != value) 
							|| (this._lkp_StrengthUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_StrengthUnit.Entity = null;
						previousValue.lkp_MedicineNames.Remove(this);
					}
					this._lkp_StrengthUnit.Entity = value;
					if ((value != null))
					{
						value.lkp_MedicineNames.Add(this);
						this._SUCode = value.SUCode;
					}
					else
					{
						this._SUCode = default(Nullable<byte>);
					}
					this.SendPropertyChanged("lkp_StrengthUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_MedicineName = this;
		}
		
		private void detach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_MedicineName = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_NegativeFindings")]
	public partial class lkp_NegativeFinding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _NFCode;
		
		private string _NFDesc;
		
		private EntitySet<NegativeFinding> _NegativeFindings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNFCodeChanging(short value);
    partial void OnNFCodeChanged();
    partial void OnNFDescChanging(string value);
    partial void OnNFDescChanged();
    #endregion
		
		public lkp_NegativeFinding()
		{
			this._NegativeFindings = new EntitySet<NegativeFinding>(new Action<NegativeFinding>(this.attach_NegativeFindings), new Action<NegativeFinding>(this.detach_NegativeFindings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short NFCode
		{
			get
			{
				return this._NFCode;
			}
			set
			{
				if ((this._NFCode != value))
				{
					this.OnNFCodeChanging(value);
					this.SendPropertyChanging();
					this._NFCode = value;
					this.SendPropertyChanged("NFCode");
					this.OnNFCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFDesc", DbType="VarChar(50)")]
		public string NFDesc
		{
			get
			{
				return this._NFDesc;
			}
			set
			{
				if ((this._NFDesc != value))
				{
					this.OnNFDescChanging(value);
					this.SendPropertyChanging();
					this._NFDesc = value;
					this.SendPropertyChanged("NFDesc");
					this.OnNFDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_NegativeFinding_NegativeFinding", Storage="_NegativeFindings", ThisKey="NFCode", OtherKey="NFCode")]
		public EntitySet<NegativeFinding> NegativeFindings
		{
			get
			{
				return this._NegativeFindings;
			}
			set
			{
				this._NegativeFindings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NegativeFindings(NegativeFinding entity)
		{
			this.SendPropertyChanging();
			entity.lkp_NegativeFinding = this;
		}
		
		private void detach_NegativeFindings(NegativeFinding entity)
		{
			this.SendPropertyChanging();
			entity.lkp_NegativeFinding = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_OnExamination")]
	public partial class lkp_OnExamination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ExaCode;
		
		private string _Anemia;
		
		private string _Cervix;
		
		private string _Clubbing;
		
		private string _Heart;
		
		private string _Jaundice;
		
		private string _LN;
		
		private string _Liver;
		
		private string _Lung;
		
		private string _Oedema;
		
		private string _OS;
		
		private string _Spleen;
		
		private string _Vagina;
		
		private string _Vulva;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExaCodeChanging(byte value);
    partial void OnExaCodeChanged();
    partial void OnAnemiaChanging(string value);
    partial void OnAnemiaChanged();
    partial void OnCervixChanging(string value);
    partial void OnCervixChanged();
    partial void OnClubbingChanging(string value);
    partial void OnClubbingChanged();
    partial void OnHeartChanging(string value);
    partial void OnHeartChanged();
    partial void OnJaundiceChanging(string value);
    partial void OnJaundiceChanged();
    partial void OnLNChanging(string value);
    partial void OnLNChanged();
    partial void OnLiverChanging(string value);
    partial void OnLiverChanged();
    partial void OnLungChanging(string value);
    partial void OnLungChanged();
    partial void OnOedemaChanging(string value);
    partial void OnOedemaChanged();
    partial void OnOSChanging(string value);
    partial void OnOSChanged();
    partial void OnSpleenChanging(string value);
    partial void OnSpleenChanged();
    partial void OnVaginaChanging(string value);
    partial void OnVaginaChanged();
    partial void OnVulvaChanging(string value);
    partial void OnVulvaChanged();
    #endregion
		
		public lkp_OnExamination()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaCode", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ExaCode
		{
			get
			{
				return this._ExaCode;
			}
			set
			{
				if ((this._ExaCode != value))
				{
					this.OnExaCodeChanging(value);
					this.SendPropertyChanging();
					this._ExaCode = value;
					this.SendPropertyChanged("ExaCode");
					this.OnExaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Anemia", DbType="VarChar(50)")]
		public string Anemia
		{
			get
			{
				return this._Anemia;
			}
			set
			{
				if ((this._Anemia != value))
				{
					this.OnAnemiaChanging(value);
					this.SendPropertyChanging();
					this._Anemia = value;
					this.SendPropertyChanged("Anemia");
					this.OnAnemiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cervix", DbType="VarChar(50)")]
		public string Cervix
		{
			get
			{
				return this._Cervix;
			}
			set
			{
				if ((this._Cervix != value))
				{
					this.OnCervixChanging(value);
					this.SendPropertyChanging();
					this._Cervix = value;
					this.SendPropertyChanged("Cervix");
					this.OnCervixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clubbing", DbType="VarChar(50)")]
		public string Clubbing
		{
			get
			{
				return this._Clubbing;
			}
			set
			{
				if ((this._Clubbing != value))
				{
					this.OnClubbingChanging(value);
					this.SendPropertyChanging();
					this._Clubbing = value;
					this.SendPropertyChanged("Clubbing");
					this.OnClubbingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Heart", DbType="VarChar(50)")]
		public string Heart
		{
			get
			{
				return this._Heart;
			}
			set
			{
				if ((this._Heart != value))
				{
					this.OnHeartChanging(value);
					this.SendPropertyChanging();
					this._Heart = value;
					this.SendPropertyChanged("Heart");
					this.OnHeartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Jaundice", DbType="VarChar(50)")]
		public string Jaundice
		{
			get
			{
				return this._Jaundice;
			}
			set
			{
				if ((this._Jaundice != value))
				{
					this.OnJaundiceChanging(value);
					this.SendPropertyChanging();
					this._Jaundice = value;
					this.SendPropertyChanged("Jaundice");
					this.OnJaundiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LN", DbType="VarChar(50)")]
		public string LN
		{
			get
			{
				return this._LN;
			}
			set
			{
				if ((this._LN != value))
				{
					this.OnLNChanging(value);
					this.SendPropertyChanging();
					this._LN = value;
					this.SendPropertyChanged("LN");
					this.OnLNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Liver", DbType="VarChar(50)")]
		public string Liver
		{
			get
			{
				return this._Liver;
			}
			set
			{
				if ((this._Liver != value))
				{
					this.OnLiverChanging(value);
					this.SendPropertyChanging();
					this._Liver = value;
					this.SendPropertyChanged("Liver");
					this.OnLiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lung", DbType="VarChar(50)")]
		public string Lung
		{
			get
			{
				return this._Lung;
			}
			set
			{
				if ((this._Lung != value))
				{
					this.OnLungChanging(value);
					this.SendPropertyChanging();
					this._Lung = value;
					this.SendPropertyChanged("Lung");
					this.OnLungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Oedema", DbType="VarChar(50)")]
		public string Oedema
		{
			get
			{
				return this._Oedema;
			}
			set
			{
				if ((this._Oedema != value))
				{
					this.OnOedemaChanging(value);
					this.SendPropertyChanging();
					this._Oedema = value;
					this.SendPropertyChanged("Oedema");
					this.OnOedemaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OS", DbType="VarChar(50)")]
		public string OS
		{
			get
			{
				return this._OS;
			}
			set
			{
				if ((this._OS != value))
				{
					this.OnOSChanging(value);
					this.SendPropertyChanging();
					this._OS = value;
					this.SendPropertyChanged("OS");
					this.OnOSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Spleen", DbType="VarChar(50)")]
		public string Spleen
		{
			get
			{
				return this._Spleen;
			}
			set
			{
				if ((this._Spleen != value))
				{
					this.OnSpleenChanging(value);
					this.SendPropertyChanging();
					this._Spleen = value;
					this.SendPropertyChanged("Spleen");
					this.OnSpleenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vagina", DbType="VarChar(50)")]
		public string Vagina
		{
			get
			{
				return this._Vagina;
			}
			set
			{
				if ((this._Vagina != value))
				{
					this.OnVaginaChanging(value);
					this.SendPropertyChanging();
					this._Vagina = value;
					this.SendPropertyChanged("Vagina");
					this.OnVaginaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vulva", DbType="VarChar(50)")]
		public string Vulva
		{
			get
			{
				return this._Vulva;
			}
			set
			{
				if ((this._Vulva != value))
				{
					this.OnVulvaChanging(value);
					this.SendPropertyChanging();
					this._Vulva = value;
					this.SendPropertyChanged("Vulva");
					this.OnVulvaChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_PositiveFindings")]
	public partial class lkp_PositiveFinding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PFCode;
		
		private string _PFDesc;
		
		private EntitySet<PositiveFinding> _PositiveFindings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPFCodeChanging(short value);
    partial void OnPFCodeChanged();
    partial void OnPFDescChanging(string value);
    partial void OnPFDescChanged();
    #endregion
		
		public lkp_PositiveFinding()
		{
			this._PositiveFindings = new EntitySet<PositiveFinding>(new Action<PositiveFinding>(this.attach_PositiveFindings), new Action<PositiveFinding>(this.detach_PositiveFindings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PFCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PFCode
		{
			get
			{
				return this._PFCode;
			}
			set
			{
				if ((this._PFCode != value))
				{
					this.OnPFCodeChanging(value);
					this.SendPropertyChanging();
					this._PFCode = value;
					this.SendPropertyChanged("PFCode");
					this.OnPFCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PFDesc", DbType="VarChar(50)")]
		public string PFDesc
		{
			get
			{
				return this._PFDesc;
			}
			set
			{
				if ((this._PFDesc != value))
				{
					this.OnPFDescChanging(value);
					this.SendPropertyChanging();
					this._PFDesc = value;
					this.SendPropertyChanged("PFDesc");
					this.OnPFDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_PositiveFinding_PositiveFinding", Storage="_PositiveFindings", ThisKey="PFCode", OtherKey="PFCode")]
		public EntitySet<PositiveFinding> PositiveFindings
		{
			get
			{
				return this._PositiveFindings;
			}
			set
			{
				this._PositiveFindings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PositiveFindings(PositiveFinding entity)
		{
			this.SendPropertyChanging();
			entity.lkp_PositiveFinding = this;
		}
		
		private void detach_PositiveFindings(PositiveFinding entity)
		{
			this.SendPropertyChanging();
			entity.lkp_PositiveFinding = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_ProvisionalDx")]
	public partial class lkp_ProvisionalDx : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PDCode;
		
		private string _PDGroup;
		
		private string _PDDesc;
		
		private string _ICDCode;
		
		private EntitySet<ConfirmDx> _ConfirmDxes;
		
		private EntitySet<DifferentialDx> _DifferentialDxes;
		
		private EntitySet<ProvisionalDx> _ProvisionalDxes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPDCodeChanging(short value);
    partial void OnPDCodeChanged();
    partial void OnPDGroupChanging(string value);
    partial void OnPDGroupChanged();
    partial void OnPDDescChanging(string value);
    partial void OnPDDescChanged();
    partial void OnICDCodeChanging(string value);
    partial void OnICDCodeChanged();
    #endregion
		
		public lkp_ProvisionalDx()
		{
			this._ConfirmDxes = new EntitySet<ConfirmDx>(new Action<ConfirmDx>(this.attach_ConfirmDxes), new Action<ConfirmDx>(this.detach_ConfirmDxes));
			this._DifferentialDxes = new EntitySet<DifferentialDx>(new Action<DifferentialDx>(this.attach_DifferentialDxes), new Action<DifferentialDx>(this.detach_DifferentialDxes));
			this._ProvisionalDxes = new EntitySet<ProvisionalDx>(new Action<ProvisionalDx>(this.attach_ProvisionalDxes), new Action<ProvisionalDx>(this.detach_ProvisionalDxes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PDCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PDCode
		{
			get
			{
				return this._PDCode;
			}
			set
			{
				if ((this._PDCode != value))
				{
					this.OnPDCodeChanging(value);
					this.SendPropertyChanging();
					this._PDCode = value;
					this.SendPropertyChanged("PDCode");
					this.OnPDCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PDGroup", DbType="VarChar(50)")]
		public string PDGroup
		{
			get
			{
				return this._PDGroup;
			}
			set
			{
				if ((this._PDGroup != value))
				{
					this.OnPDGroupChanging(value);
					this.SendPropertyChanging();
					this._PDGroup = value;
					this.SendPropertyChanged("PDGroup");
					this.OnPDGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PDDesc", DbType="VarChar(100)")]
		public string PDDesc
		{
			get
			{
				return this._PDDesc;
			}
			set
			{
				if ((this._PDDesc != value))
				{
					this.OnPDDescChanging(value);
					this.SendPropertyChanging();
					this._PDDesc = value;
					this.SendPropertyChanged("PDDesc");
					this.OnPDDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICDCode", DbType="VarChar(20)")]
		public string ICDCode
		{
			get
			{
				return this._ICDCode;
			}
			set
			{
				if ((this._ICDCode != value))
				{
					this.OnICDCodeChanging(value);
					this.SendPropertyChanging();
					this._ICDCode = value;
					this.SendPropertyChanged("ICDCode");
					this.OnICDCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_ProvisionalDx_ConfirmDx", Storage="_ConfirmDxes", ThisKey="PDCode", OtherKey="CDCode")]
		public EntitySet<ConfirmDx> ConfirmDxes
		{
			get
			{
				return this._ConfirmDxes;
			}
			set
			{
				this._ConfirmDxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_ProvisionalDx_DifferentialDx", Storage="_DifferentialDxes", ThisKey="PDCode", OtherKey="DDCode")]
		public EntitySet<DifferentialDx> DifferentialDxes
		{
			get
			{
				return this._DifferentialDxes;
			}
			set
			{
				this._DifferentialDxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_ProvisionalDx_ProvisionalDx", Storage="_ProvisionalDxes", ThisKey="PDCode", OtherKey="PDCode")]
		public EntitySet<ProvisionalDx> ProvisionalDxes
		{
			get
			{
				return this._ProvisionalDxes;
			}
			set
			{
				this._ProvisionalDxes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConfirmDxes(ConfirmDx entity)
		{
			this.SendPropertyChanging();
			entity.lkp_ProvisionalDx = this;
		}
		
		private void detach_ConfirmDxes(ConfirmDx entity)
		{
			this.SendPropertyChanging();
			entity.lkp_ProvisionalDx = null;
		}
		
		private void attach_DifferentialDxes(DifferentialDx entity)
		{
			this.SendPropertyChanging();
			entity.lkp_ProvisionalDx = this;
		}
		
		private void detach_DifferentialDxes(DifferentialDx entity)
		{
			this.SendPropertyChanging();
			entity.lkp_ProvisionalDx = null;
		}
		
		private void attach_ProvisionalDxes(ProvisionalDx entity)
		{
			this.SendPropertyChanging();
			entity.lkp_ProvisionalDx = this;
		}
		
		private void detach_ProvisionalDxes(ProvisionalDx entity)
		{
			this.SendPropertyChanging();
			entity.lkp_ProvisionalDx = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Reffered")]
	public partial class lkp_Reffered : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _RefCode;
		
		private string _RefDesc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRefCodeChanging(short value);
    partial void OnRefCodeChanged();
    partial void OnRefDescChanging(string value);
    partial void OnRefDescChanged();
    #endregion
		
		public lkp_Reffered()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short RefCode
		{
			get
			{
				return this._RefCode;
			}
			set
			{
				if ((this._RefCode != value))
				{
					this.OnRefCodeChanging(value);
					this.SendPropertyChanging();
					this._RefCode = value;
					this.SendPropertyChanged("RefCode");
					this.OnRefCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefDesc", DbType="NVarChar(150)")]
		public string RefDesc
		{
			get
			{
				return this._RefDesc;
			}
			set
			{
				if ((this._RefDesc != value))
				{
					this.OnRefDescChanging(value);
					this.SendPropertyChanging();
					this._RefDesc = value;
					this.SendPropertyChanged("RefDesc");
					this.OnRefDescChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_RegistrationFee")]
	public partial class lkp_RegistrationFee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _RFCode;
		
		private System.Nullable<short> _RFTaka;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRFCodeChanging(short value);
    partial void OnRFCodeChanged();
    partial void OnRFTakaChanging(System.Nullable<short> value);
    partial void OnRFTakaChanged();
    #endregion
		
		public lkp_RegistrationFee()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RFCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short RFCode
		{
			get
			{
				return this._RFCode;
			}
			set
			{
				if ((this._RFCode != value))
				{
					this.OnRFCodeChanging(value);
					this.SendPropertyChanging();
					this._RFCode = value;
					this.SendPropertyChanged("RFCode");
					this.OnRFCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RFTaka", DbType="SmallInt")]
		public System.Nullable<short> RFTaka
		{
			get
			{
				return this._RFTaka;
			}
			set
			{
				if ((this._RFTaka != value))
				{
					this.OnRFTakaChanging(value);
					this.SendPropertyChanging();
					this._RFTaka = value;
					this.SendPropertyChanged("RFTaka");
					this.OnRFTakaChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Relationship")]
	public partial class lkp_Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RelCode;
		
		private string _RelDesc;
		
		private System.Nullable<byte> _RelMedDiscount;
		
		private System.Nullable<byte> _RelTestDiscount;
		
		private EntitySet<PatientBasicInfo> _PatientBasicInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelCodeChanging(byte value);
    partial void OnRelCodeChanged();
    partial void OnRelDescChanging(string value);
    partial void OnRelDescChanged();
    partial void OnRelMedDiscountChanging(System.Nullable<byte> value);
    partial void OnRelMedDiscountChanged();
    partial void OnRelTestDiscountChanging(System.Nullable<byte> value);
    partial void OnRelTestDiscountChanged();
    #endregion
		
		public lkp_Relationship()
		{
			this._PatientBasicInfos = new EntitySet<PatientBasicInfo>(new Action<PatientBasicInfo>(this.attach_PatientBasicInfos), new Action<PatientBasicInfo>(this.detach_PatientBasicInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelCode", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte RelCode
		{
			get
			{
				return this._RelCode;
			}
			set
			{
				if ((this._RelCode != value))
				{
					this.OnRelCodeChanging(value);
					this.SendPropertyChanging();
					this._RelCode = value;
					this.SendPropertyChanged("RelCode");
					this.OnRelCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelDesc", DbType="NVarChar(20)")]
		public string RelDesc
		{
			get
			{
				return this._RelDesc;
			}
			set
			{
				if ((this._RelDesc != value))
				{
					this.OnRelDescChanging(value);
					this.SendPropertyChanging();
					this._RelDesc = value;
					this.SendPropertyChanged("RelDesc");
					this.OnRelDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelMedDiscount", DbType="TinyInt")]
		public System.Nullable<byte> RelMedDiscount
		{
			get
			{
				return this._RelMedDiscount;
			}
			set
			{
				if ((this._RelMedDiscount != value))
				{
					this.OnRelMedDiscountChanging(value);
					this.SendPropertyChanging();
					this._RelMedDiscount = value;
					this.SendPropertyChanged("RelMedDiscount");
					this.OnRelMedDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelTestDiscount", DbType="TinyInt")]
		public System.Nullable<byte> RelTestDiscount
		{
			get
			{
				return this._RelTestDiscount;
			}
			set
			{
				if ((this._RelTestDiscount != value))
				{
					this.OnRelTestDiscountChanging(value);
					this.SendPropertyChanging();
					this._RelTestDiscount = value;
					this.SendPropertyChanged("RelTestDiscount");
					this.OnRelTestDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_Relationship_PatientBasicInfo", Storage="_PatientBasicInfos", ThisKey="RelCode", OtherKey="RelCode")]
		public EntitySet<PatientBasicInfo> PatientBasicInfos
		{
			get
			{
				return this._PatientBasicInfos;
			}
			set
			{
				this._PatientBasicInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientBasicInfos(PatientBasicInfo entity)
		{
			this.SendPropertyChanging();
			entity.lkp_Relationship = this;
		}
		
		private void detach_PatientBasicInfos(PatientBasicInfo entity)
		{
			this.SendPropertyChanging();
			entity.lkp_Relationship = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_StaffInfo")]
	public partial class lkp_StaffInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffID;
		
		private string _StaffName;
		
		private System.Nullable<System.DateTime> _JoiningDate;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Nullable<byte> _StaffAge;
		
		private byte _StaffSex;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnStaffNameChanging(string value);
    partial void OnStaffNameChanged();
    partial void OnJoiningDateChanging(System.Nullable<System.DateTime> value);
    partial void OnJoiningDateChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnStaffAgeChanging(System.Nullable<byte> value);
    partial void OnStaffAgeChanged();
    partial void OnStaffSexChanging(byte value);
    partial void OnStaffSexChanged();
    #endregion
		
		public lkp_StaffInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StaffName
		{
			get
			{
				return this._StaffName;
			}
			set
			{
				if ((this._StaffName != value))
				{
					this.OnStaffNameChanging(value);
					this.SendPropertyChanging();
					this._StaffName = value;
					this.SendPropertyChanged("StaffName");
					this.OnStaffNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoiningDate", DbType="Date")]
		public System.Nullable<System.DateTime> JoiningDate
		{
			get
			{
				return this._JoiningDate;
			}
			set
			{
				if ((this._JoiningDate != value))
				{
					this.OnJoiningDateChanging(value);
					this.SendPropertyChanging();
					this._JoiningDate = value;
					this.SendPropertyChanged("JoiningDate");
					this.OnJoiningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffAge", DbType="TinyInt")]
		public System.Nullable<byte> StaffAge
		{
			get
			{
				return this._StaffAge;
			}
			set
			{
				if ((this._StaffAge != value))
				{
					this.OnStaffAgeChanging(value);
					this.SendPropertyChanging();
					this._StaffAge = value;
					this.SendPropertyChanged("StaffAge");
					this.OnStaffAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffSex", DbType="TinyInt NOT NULL")]
		public byte StaffSex
		{
			get
			{
				return this._StaffSex;
			}
			set
			{
				if ((this._StaffSex != value))
				{
					this.OnStaffSexChanging(value);
					this.SendPropertyChanging();
					this._StaffSex = value;
					this.SendPropertyChanged("StaffSex");
					this.OnStaffSexChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_StrengthUnit")]
	public partial class lkp_StrengthUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _SUCode;
		
		private string _SUDesc;
		
		private EntitySet<lkp_MedicineName> _lkp_MedicineNames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSUCodeChanging(byte value);
    partial void OnSUCodeChanged();
    partial void OnSUDescChanging(string value);
    partial void OnSUDescChanged();
    #endregion
		
		public lkp_StrengthUnit()
		{
			this._lkp_MedicineNames = new EntitySet<lkp_MedicineName>(new Action<lkp_MedicineName>(this.attach_lkp_MedicineNames), new Action<lkp_MedicineName>(this.detach_lkp_MedicineNames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUCode", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte SUCode
		{
			get
			{
				return this._SUCode;
			}
			set
			{
				if ((this._SUCode != value))
				{
					this.OnSUCodeChanging(value);
					this.SendPropertyChanging();
					this._SUCode = value;
					this.SendPropertyChanged("SUCode");
					this.OnSUCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUDesc", DbType="VarChar(50)")]
		public string SUDesc
		{
			get
			{
				return this._SUDesc;
			}
			set
			{
				if ((this._SUDesc != value))
				{
					this.OnSUDescChanging(value);
					this.SendPropertyChanging();
					this._SUDesc = value;
					this.SendPropertyChanged("SUDesc");
					this.OnSUDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_StrengthUnit_lkp_MedicineName", Storage="_lkp_MedicineNames", ThisKey="SUCode", OtherKey="SUCode")]
		public EntitySet<lkp_MedicineName> lkp_MedicineNames
		{
			get
			{
				return this._lkp_MedicineNames;
			}
			set
			{
				this._lkp_MedicineNames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lkp_MedicineNames(lkp_MedicineName entity)
		{
			this.SendPropertyChanging();
			entity.lkp_StrengthUnit = this;
		}
		
		private void detach_lkp_MedicineNames(lkp_MedicineName entity)
		{
			this.SendPropertyChanging();
			entity.lkp_StrengthUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_StudyName")]
	public partial class lkp_StudyName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StudyName;
		
		private EntitySet<PatientBasicInfo> _PatientBasicInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudyNameChanging(string value);
    partial void OnStudyNameChanged();
    #endregion
		
		public lkp_StudyName()
		{
			this._PatientBasicInfos = new EntitySet<PatientBasicInfo>(new Action<PatientBasicInfo>(this.attach_PatientBasicInfos), new Action<PatientBasicInfo>(this.detach_PatientBasicInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyName", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StudyName
		{
			get
			{
				return this._StudyName;
			}
			set
			{
				if ((this._StudyName != value))
				{
					this.OnStudyNameChanging(value);
					this.SendPropertyChanging();
					this._StudyName = value;
					this.SendPropertyChanged("StudyName");
					this.OnStudyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_StudyName_PatientBasicInfo", Storage="_PatientBasicInfos", ThisKey="StudyName", OtherKey="StudyName")]
		public EntitySet<PatientBasicInfo> PatientBasicInfos
		{
			get
			{
				return this._PatientBasicInfos;
			}
			set
			{
				this._PatientBasicInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientBasicInfos(PatientBasicInfo entity)
		{
			this.SendPropertyChanging();
			entity.lkp_StudyName = this;
		}
		
		private void detach_PatientBasicInfos(PatientBasicInfo entity)
		{
			this.SendPropertyChanging();
			entity.lkp_StudyName = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_TestName")]
	public partial class lkp_TestName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _TNCode;
		
		private string _TNDesc;
		
		private EntitySet<lkp_TestNameDetail> _lkp_TestNameDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTNCodeChanging(byte value);
    partial void OnTNCodeChanged();
    partial void OnTNDescChanging(string value);
    partial void OnTNDescChanged();
    #endregion
		
		public lkp_TestName()
		{
			this._lkp_TestNameDetails = new EntitySet<lkp_TestNameDetail>(new Action<lkp_TestNameDetail>(this.attach_lkp_TestNameDetails), new Action<lkp_TestNameDetail>(this.detach_lkp_TestNameDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TNCode", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte TNCode
		{
			get
			{
				return this._TNCode;
			}
			set
			{
				if ((this._TNCode != value))
				{
					this.OnTNCodeChanging(value);
					this.SendPropertyChanging();
					this._TNCode = value;
					this.SendPropertyChanged("TNCode");
					this.OnTNCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TNDesc", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TNDesc
		{
			get
			{
				return this._TNDesc;
			}
			set
			{
				if ((this._TNDesc != value))
				{
					this.OnTNDescChanging(value);
					this.SendPropertyChanging();
					this._TNDesc = value;
					this.SendPropertyChanged("TNDesc");
					this.OnTNDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_TestName_lkp_TestNameDetail", Storage="_lkp_TestNameDetails", ThisKey="TNCode", OtherKey="TNCode")]
		public EntitySet<lkp_TestNameDetail> lkp_TestNameDetails
		{
			get
			{
				return this._lkp_TestNameDetails;
			}
			set
			{
				this._lkp_TestNameDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lkp_TestNameDetails(lkp_TestNameDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_TestName = this;
		}
		
		private void detach_lkp_TestNameDetails(lkp_TestNameDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_TestName = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_TestNameDetails")]
	public partial class lkp_TestNameDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _TNDCode;
		
		private byte _TNCode;
		
		private string _TestName;
		
		private System.Nullable<short> _TestFee;
		
		private System.Nullable<byte> _UnitType;
		
		private string _RefValue;
		
		private EntitySet<LabTestInfoDetail> _LabTestInfoDetails;
		
		private EntityRef<lkp_TestName> _lkp_TestName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTNDCodeChanging(short value);
    partial void OnTNDCodeChanged();
    partial void OnTNCodeChanging(byte value);
    partial void OnTNCodeChanged();
    partial void OnTestNameChanging(string value);
    partial void OnTestNameChanged();
    partial void OnTestFeeChanging(System.Nullable<short> value);
    partial void OnTestFeeChanged();
    partial void OnUnitTypeChanging(System.Nullable<byte> value);
    partial void OnUnitTypeChanged();
    partial void OnRefValueChanging(string value);
    partial void OnRefValueChanged();
    #endregion
		
		public lkp_TestNameDetail()
		{
			this._LabTestInfoDetails = new EntitySet<LabTestInfoDetail>(new Action<LabTestInfoDetail>(this.attach_LabTestInfoDetails), new Action<LabTestInfoDetail>(this.detach_LabTestInfoDetails));
			this._lkp_TestName = default(EntityRef<lkp_TestName>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TNDCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short TNDCode
		{
			get
			{
				return this._TNDCode;
			}
			set
			{
				if ((this._TNDCode != value))
				{
					this.OnTNDCodeChanging(value);
					this.SendPropertyChanging();
					this._TNDCode = value;
					this.SendPropertyChanged("TNDCode");
					this.OnTNDCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TNCode", DbType="TinyInt NOT NULL")]
		public byte TNCode
		{
			get
			{
				return this._TNCode;
			}
			set
			{
				if ((this._TNCode != value))
				{
					if (this._lkp_TestName.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTNCodeChanging(value);
					this.SendPropertyChanging();
					this._TNCode = value;
					this.SendPropertyChanged("TNCode");
					this.OnTNCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TestName
		{
			get
			{
				return this._TestName;
			}
			set
			{
				if ((this._TestName != value))
				{
					this.OnTestNameChanging(value);
					this.SendPropertyChanging();
					this._TestName = value;
					this.SendPropertyChanged("TestName");
					this.OnTestNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestFee", DbType="SmallInt")]
		public System.Nullable<short> TestFee
		{
			get
			{
				return this._TestFee;
			}
			set
			{
				if ((this._TestFee != value))
				{
					this.OnTestFeeChanging(value);
					this.SendPropertyChanging();
					this._TestFee = value;
					this.SendPropertyChanged("TestFee");
					this.OnTestFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitType", DbType="TinyInt")]
		public System.Nullable<byte> UnitType
		{
			get
			{
				return this._UnitType;
			}
			set
			{
				if ((this._UnitType != value))
				{
					this.OnUnitTypeChanging(value);
					this.SendPropertyChanging();
					this._UnitType = value;
					this.SendPropertyChanged("UnitType");
					this.OnUnitTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefValue", DbType="NVarChar(100)")]
		public string RefValue
		{
			get
			{
				return this._RefValue;
			}
			set
			{
				if ((this._RefValue != value))
				{
					this.OnRefValueChanging(value);
					this.SendPropertyChanging();
					this._RefValue = value;
					this.SendPropertyChanged("RefValue");
					this.OnRefValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_TestNameDetail_LabTestInfoDetail", Storage="_LabTestInfoDetails", ThisKey="TNDCode", OtherKey="TNDCode")]
		public EntitySet<LabTestInfoDetail> LabTestInfoDetails
		{
			get
			{
				return this._LabTestInfoDetails;
			}
			set
			{
				this._LabTestInfoDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_TestName_lkp_TestNameDetail", Storage="_lkp_TestName", ThisKey="TNCode", OtherKey="TNCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_TestName lkp_TestName
		{
			get
			{
				return this._lkp_TestName.Entity;
			}
			set
			{
				lkp_TestName previousValue = this._lkp_TestName.Entity;
				if (((previousValue != value) 
							|| (this._lkp_TestName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_TestName.Entity = null;
						previousValue.lkp_TestNameDetails.Remove(this);
					}
					this._lkp_TestName.Entity = value;
					if ((value != null))
					{
						value.lkp_TestNameDetails.Add(this);
						this._TNCode = value.TNCode;
					}
					else
					{
						this._TNCode = default(byte);
					}
					this.SendPropertyChanged("lkp_TestName");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LabTestInfoDetails(LabTestInfoDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_TestNameDetail = this;
		}
		
		private void detach_LabTestInfoDetails(LabTestInfoDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_TestNameDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_ThanaUpzilla")]
	public partial class lkp_ThanaUpzilla : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DistrictCode;
		
		private string _ThanaCode;
		
		private string _ThanaName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDistrictCodeChanging(string value);
    partial void OnDistrictCodeChanged();
    partial void OnThanaCodeChanging(string value);
    partial void OnThanaCodeChanged();
    partial void OnThanaNameChanging(string value);
    partial void OnThanaNameChanged();
    #endregion
		
		public lkp_ThanaUpzilla()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DistrictCode
		{
			get
			{
				return this._DistrictCode;
			}
			set
			{
				if ((this._DistrictCode != value))
				{
					this.OnDistrictCodeChanging(value);
					this.SendPropertyChanging();
					this._DistrictCode = value;
					this.SendPropertyChanged("DistrictCode");
					this.OnDistrictCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThanaCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ThanaCode
		{
			get
			{
				return this._ThanaCode;
			}
			set
			{
				if ((this._ThanaCode != value))
				{
					this.OnThanaCodeChanging(value);
					this.SendPropertyChanging();
					this._ThanaCode = value;
					this.SendPropertyChanged("ThanaCode");
					this.OnThanaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThanaName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ThanaName
		{
			get
			{
				return this._ThanaName;
			}
			set
			{
				if ((this._ThanaName != value))
				{
					this.OnThanaNameChanging(value);
					this.SendPropertyChanging();
					this._ThanaName = value;
					this.SendPropertyChanged("ThanaName");
					this.OnThanaNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_TransectionType")]
	public partial class lkp_TransectionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _TTCode;
		
		private string _TTDesc;
		
		private EntitySet<TransectionDetail> _TransectionDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTTCodeChanging(byte value);
    partial void OnTTCodeChanged();
    partial void OnTTDescChanging(string value);
    partial void OnTTDescChanged();
    #endregion
		
		public lkp_TransectionType()
		{
			this._TransectionDetails = new EntitySet<TransectionDetail>(new Action<TransectionDetail>(this.attach_TransectionDetails), new Action<TransectionDetail>(this.detach_TransectionDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TTCode", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte TTCode
		{
			get
			{
				return this._TTCode;
			}
			set
			{
				if ((this._TTCode != value))
				{
					this.OnTTCodeChanging(value);
					this.SendPropertyChanging();
					this._TTCode = value;
					this.SendPropertyChanged("TTCode");
					this.OnTTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TTDesc", DbType="VarChar(50)")]
		public string TTDesc
		{
			get
			{
				return this._TTDesc;
			}
			set
			{
				if ((this._TTDesc != value))
				{
					this.OnTTDescChanging(value);
					this.SendPropertyChanging();
					this._TTDesc = value;
					this.SendPropertyChanged("TTDesc");
					this.OnTTDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_TransectionType_TransectionDetail", Storage="_TransectionDetails", ThisKey="TTCode", OtherKey="TranType")]
		public EntitySet<TransectionDetail> TransectionDetails
		{
			get
			{
				return this._TransectionDetails;
			}
			set
			{
				this._TransectionDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransectionDetails(TransectionDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_TransectionType = this;
		}
		
		private void detach_TransectionDetails(TransectionDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_TransectionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Treatment")]
	public partial class lkp_Treatment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _TreCode;
		
		private string _TreDesc;
		
		private string _TreDescBangla;
		
		private EntitySet<MedicineDetail> _MedicineDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTreCodeChanging(byte value);
    partial void OnTreCodeChanged();
    partial void OnTreDescChanging(string value);
    partial void OnTreDescChanged();
    partial void OnTreDescBanglaChanging(string value);
    partial void OnTreDescBanglaChanged();
    #endregion
		
		public lkp_Treatment()
		{
			this._MedicineDetails = new EntitySet<MedicineDetail>(new Action<MedicineDetail>(this.attach_MedicineDetails), new Action<MedicineDetail>(this.detach_MedicineDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreCode", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte TreCode
		{
			get
			{
				return this._TreCode;
			}
			set
			{
				if ((this._TreCode != value))
				{
					this.OnTreCodeChanging(value);
					this.SendPropertyChanging();
					this._TreCode = value;
					this.SendPropertyChanged("TreCode");
					this.OnTreCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreDesc", DbType="VarChar(100)")]
		public string TreDesc
		{
			get
			{
				return this._TreDesc;
			}
			set
			{
				if ((this._TreDesc != value))
				{
					this.OnTreDescChanging(value);
					this.SendPropertyChanging();
					this._TreDesc = value;
					this.SendPropertyChanged("TreDesc");
					this.OnTreDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreDescBangla", DbType="VarChar(100)")]
		public string TreDescBangla
		{
			get
			{
				return this._TreDescBangla;
			}
			set
			{
				if ((this._TreDescBangla != value))
				{
					this.OnTreDescBanglaChanging(value);
					this.SendPropertyChanging();
					this._TreDescBangla = value;
					this.SendPropertyChanged("TreDescBangla");
					this.OnTreDescBanglaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_Treatment_MedicineDetail", Storage="_MedicineDetails", ThisKey="TreCode", OtherKey="TreCode")]
		public EntitySet<MedicineDetail> MedicineDetails
		{
			get
			{
				return this._MedicineDetails;
			}
			set
			{
				this._MedicineDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_Treatment = this;
		}
		
		private void detach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.lkp_Treatment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Union")]
	public partial class lkp_Union : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DistrictCode;
		
		private string _ThanaCode;
		
		private string _UnionCode;
		
		private string _UnionName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDistrictCodeChanging(string value);
    partial void OnDistrictCodeChanged();
    partial void OnThanaCodeChanging(string value);
    partial void OnThanaCodeChanged();
    partial void OnUnionCodeChanging(string value);
    partial void OnUnionCodeChanged();
    partial void OnUnionNameChanging(string value);
    partial void OnUnionNameChanged();
    #endregion
		
		public lkp_Union()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DistrictCode
		{
			get
			{
				return this._DistrictCode;
			}
			set
			{
				if ((this._DistrictCode != value))
				{
					this.OnDistrictCodeChanging(value);
					this.SendPropertyChanging();
					this._DistrictCode = value;
					this.SendPropertyChanged("DistrictCode");
					this.OnDistrictCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThanaCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ThanaCode
		{
			get
			{
				return this._ThanaCode;
			}
			set
			{
				if ((this._ThanaCode != value))
				{
					this.OnThanaCodeChanging(value);
					this.SendPropertyChanging();
					this._ThanaCode = value;
					this.SendPropertyChanged("ThanaCode");
					this.OnThanaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnionCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UnionCode
		{
			get
			{
				return this._UnionCode;
			}
			set
			{
				if ((this._UnionCode != value))
				{
					this.OnUnionCodeChanging(value);
					this.SendPropertyChanging();
					this._UnionCode = value;
					this.SendPropertyChanged("UnionCode");
					this.OnUnionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnionName", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string UnionName
		{
			get
			{
				return this._UnionName;
			}
			set
			{
				if ((this._UnionName != value))
				{
					this.OnUnionNameChanging(value);
					this.SendPropertyChanging();
					this._UnionName = value;
					this.SendPropertyChanged("UnionName");
					this.OnUnionNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Village")]
	public partial class lkp_Village : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DistrictCode;
		
		private string _ThanaCode;
		
		private string _UnionCode;
		
		private string _VillageCode;
		
		private string _VillageName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDistrictCodeChanging(string value);
    partial void OnDistrictCodeChanged();
    partial void OnThanaCodeChanging(string value);
    partial void OnThanaCodeChanged();
    partial void OnUnionCodeChanging(string value);
    partial void OnUnionCodeChanged();
    partial void OnVillageCodeChanging(string value);
    partial void OnVillageCodeChanged();
    partial void OnVillageNameChanging(string value);
    partial void OnVillageNameChanged();
    #endregion
		
		public lkp_Village()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DistrictCode
		{
			get
			{
				return this._DistrictCode;
			}
			set
			{
				if ((this._DistrictCode != value))
				{
					this.OnDistrictCodeChanging(value);
					this.SendPropertyChanging();
					this._DistrictCode = value;
					this.SendPropertyChanged("DistrictCode");
					this.OnDistrictCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThanaCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ThanaCode
		{
			get
			{
				return this._ThanaCode;
			}
			set
			{
				if ((this._ThanaCode != value))
				{
					this.OnThanaCodeChanging(value);
					this.SendPropertyChanging();
					this._ThanaCode = value;
					this.SendPropertyChanged("ThanaCode");
					this.OnThanaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnionCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UnionCode
		{
			get
			{
				return this._UnionCode;
			}
			set
			{
				if ((this._UnionCode != value))
				{
					this.OnUnionCodeChanging(value);
					this.SendPropertyChanging();
					this._UnionCode = value;
					this.SendPropertyChanged("UnionCode");
					this.OnUnionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VillageCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VillageCode
		{
			get
			{
				return this._VillageCode;
			}
			set
			{
				if ((this._VillageCode != value))
				{
					this.OnVillageCodeChanging(value);
					this.SendPropertyChanging();
					this._VillageCode = value;
					this.SendPropertyChanged("VillageCode");
					this.OnVillageCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VillageName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VillageName
		{
			get
			{
				return this._VillageName;
			}
			set
			{
				if ((this._VillageName != value))
				{
					this.OnVillageNameChanging(value);
					this.SendPropertyChanging();
					this._VillageName = value;
					this.SendPropertyChanged("VillageName");
					this.OnVillageNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicineDetails")]
	public partial class MedicineDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private short _MNCode;
		
		private System.Nullable<short> _MedQty;
		
		private System.Nullable<short> _FreCode;
		
		private System.Nullable<byte> _TreCode;
		
		private System.Nullable<decimal> _MedicinePrice;
		
		private System.Nullable<bool> _MedDispuse;
		
		private System.Nullable<short> _MedReqQty;
		
		private System.Nullable<System.DateTime> _MedDispuseDt;
		
		private string _UserID;
		
		private string _ModifyUserID;
		
		private System.Nullable<System.DateTime> _ModifyDt;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
		private EntityRef<lkp_Frequency> _lkp_Frequency;
		
		private EntityRef<lkp_MedicineName> _lkp_MedicineName;
		
		private EntityRef<lkp_Treatment> _lkp_Treatment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnMNCodeChanging(short value);
    partial void OnMNCodeChanged();
    partial void OnMedQtyChanging(System.Nullable<short> value);
    partial void OnMedQtyChanged();
    partial void OnFreCodeChanging(System.Nullable<short> value);
    partial void OnFreCodeChanged();
    partial void OnTreCodeChanging(System.Nullable<byte> value);
    partial void OnTreCodeChanged();
    partial void OnMedicinePriceChanging(System.Nullable<decimal> value);
    partial void OnMedicinePriceChanged();
    partial void OnMedDispuseChanging(System.Nullable<bool> value);
    partial void OnMedDispuseChanged();
    partial void OnMedReqQtyChanging(System.Nullable<short> value);
    partial void OnMedReqQtyChanged();
    partial void OnMedDispuseDtChanging(System.Nullable<System.DateTime> value);
    partial void OnMedDispuseDtChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnModifyUserIDChanging(string value);
    partial void OnModifyUserIDChanged();
    partial void OnModifyDtChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDtChanged();
    #endregion
		
		public MedicineDetail()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			this._lkp_Frequency = default(EntityRef<lkp_Frequency>);
			this._lkp_MedicineName = default(EntityRef<lkp_MedicineName>);
			this._lkp_Treatment = default(EntityRef<lkp_Treatment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MNCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MNCode
		{
			get
			{
				return this._MNCode;
			}
			set
			{
				if ((this._MNCode != value))
				{
					if (this._lkp_MedicineName.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMNCodeChanging(value);
					this.SendPropertyChanging();
					this._MNCode = value;
					this.SendPropertyChanged("MNCode");
					this.OnMNCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedQty", DbType="SmallInt")]
		public System.Nullable<short> MedQty
		{
			get
			{
				return this._MedQty;
			}
			set
			{
				if ((this._MedQty != value))
				{
					this.OnMedQtyChanging(value);
					this.SendPropertyChanging();
					this._MedQty = value;
					this.SendPropertyChanged("MedQty");
					this.OnMedQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreCode", DbType="SmallInt")]
		public System.Nullable<short> FreCode
		{
			get
			{
				return this._FreCode;
			}
			set
			{
				if ((this._FreCode != value))
				{
					if (this._lkp_Frequency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFreCodeChanging(value);
					this.SendPropertyChanging();
					this._FreCode = value;
					this.SendPropertyChanged("FreCode");
					this.OnFreCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreCode", DbType="TinyInt")]
		public System.Nullable<byte> TreCode
		{
			get
			{
				return this._TreCode;
			}
			set
			{
				if ((this._TreCode != value))
				{
					if (this._lkp_Treatment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTreCodeChanging(value);
					this.SendPropertyChanging();
					this._TreCode = value;
					this.SendPropertyChanged("TreCode");
					this.OnTreCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicinePrice", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> MedicinePrice
		{
			get
			{
				return this._MedicinePrice;
			}
			set
			{
				if ((this._MedicinePrice != value))
				{
					this.OnMedicinePriceChanging(value);
					this.SendPropertyChanging();
					this._MedicinePrice = value;
					this.SendPropertyChanged("MedicinePrice");
					this.OnMedicinePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedDispuse", DbType="Bit")]
		public System.Nullable<bool> MedDispuse
		{
			get
			{
				return this._MedDispuse;
			}
			set
			{
				if ((this._MedDispuse != value))
				{
					this.OnMedDispuseChanging(value);
					this.SendPropertyChanging();
					this._MedDispuse = value;
					this.SendPropertyChanged("MedDispuse");
					this.OnMedDispuseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedReqQty", DbType="SmallInt")]
		public System.Nullable<short> MedReqQty
		{
			get
			{
				return this._MedReqQty;
			}
			set
			{
				if ((this._MedReqQty != value))
				{
					this.OnMedReqQtyChanging(value);
					this.SendPropertyChanging();
					this._MedReqQty = value;
					this.SendPropertyChanged("MedReqQty");
					this.OnMedReqQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedDispuseDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> MedDispuseDt
		{
			get
			{
				return this._MedDispuseDt;
			}
			set
			{
				if ((this._MedDispuseDt != value))
				{
					this.OnMedDispuseDtChanging(value);
					this.SendPropertyChanging();
					this._MedDispuseDt = value;
					this.SendPropertyChanged("MedDispuseDt");
					this.OnMedDispuseDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyUserID", DbType="VarChar(50)")]
		public string ModifyUserID
		{
			get
			{
				return this._ModifyUserID;
			}
			set
			{
				if ((this._ModifyUserID != value))
				{
					this.OnModifyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifyUserID = value;
					this.SendPropertyChanged("ModifyUserID");
					this.OnModifyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDt
		{
			get
			{
				return this._ModifyDt;
			}
			set
			{
				if ((this._ModifyDt != value))
				{
					this.OnModifyDtChanging(value);
					this.SendPropertyChanging();
					this._ModifyDt = value;
					this.SendPropertyChanged("ModifyDt");
					this.OnModifyDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_MedicineDetail", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.MedicineDetails.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.MedicineDetails.Add(this);
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(string);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_Frequency_MedicineDetail", Storage="_lkp_Frequency", ThisKey="FreCode", OtherKey="FreCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public lkp_Frequency lkp_Frequency
		{
			get
			{
				return this._lkp_Frequency.Entity;
			}
			set
			{
				lkp_Frequency previousValue = this._lkp_Frequency.Entity;
				if (((previousValue != value) 
							|| (this._lkp_Frequency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_Frequency.Entity = null;
						previousValue.MedicineDetails.Remove(this);
					}
					this._lkp_Frequency.Entity = value;
					if ((value != null))
					{
						value.MedicineDetails.Add(this);
						this._FreCode = value.FreCode;
					}
					else
					{
						this._FreCode = default(Nullable<short>);
					}
					this.SendPropertyChanged("lkp_Frequency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_MedicineName_MedicineDetail", Storage="_lkp_MedicineName", ThisKey="MNCode", OtherKey="MNCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_MedicineName lkp_MedicineName
		{
			get
			{
				return this._lkp_MedicineName.Entity;
			}
			set
			{
				lkp_MedicineName previousValue = this._lkp_MedicineName.Entity;
				if (((previousValue != value) 
							|| (this._lkp_MedicineName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_MedicineName.Entity = null;
						previousValue.MedicineDetails.Remove(this);
					}
					this._lkp_MedicineName.Entity = value;
					if ((value != null))
					{
						value.MedicineDetails.Add(this);
						this._MNCode = value.MNCode;
					}
					else
					{
						this._MNCode = default(short);
					}
					this.SendPropertyChanged("lkp_MedicineName");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_Treatment_MedicineDetail", Storage="_lkp_Treatment", ThisKey="TreCode", OtherKey="TreCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public lkp_Treatment lkp_Treatment
		{
			get
			{
				return this._lkp_Treatment.Entity;
			}
			set
			{
				lkp_Treatment previousValue = this._lkp_Treatment.Entity;
				if (((previousValue != value) 
							|| (this._lkp_Treatment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_Treatment.Entity = null;
						previousValue.MedicineDetails.Remove(this);
					}
					this._lkp_Treatment.Entity = value;
					if ((value != null))
					{
						value.MedicineDetails.Add(this);
						this._TreCode = value.TreCode;
					}
					else
					{
						this._TreCode = default(Nullable<byte>);
					}
					this.SendPropertyChanged("lkp_Treatment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicineReceive")]
	public partial class MedicineReceive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RcvdID;
		
		private System.Nullable<System.DateTime> _RcvdDt;
		
		private System.Nullable<short> _MNCode;
		
		private System.Nullable<short> _UnitQty;
		
		private System.Nullable<byte> _MCCode;
		
		private System.Nullable<short> _PerContain;
		
		private System.Nullable<int> _RcvdQty;
		
		private System.Nullable<short> _RcvdBy;
		
		private string _UserID;
		
		private string _ModifyUserID;
		
		private System.Nullable<System.DateTime> _ModifyDt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRcvdIDChanging(int value);
    partial void OnRcvdIDChanged();
    partial void OnRcvdDtChanging(System.Nullable<System.DateTime> value);
    partial void OnRcvdDtChanged();
    partial void OnMNCodeChanging(System.Nullable<short> value);
    partial void OnMNCodeChanged();
    partial void OnUnitQtyChanging(System.Nullable<short> value);
    partial void OnUnitQtyChanged();
    partial void OnMCCodeChanging(System.Nullable<byte> value);
    partial void OnMCCodeChanged();
    partial void OnPerContainChanging(System.Nullable<short> value);
    partial void OnPerContainChanged();
    partial void OnRcvdQtyChanging(System.Nullable<int> value);
    partial void OnRcvdQtyChanged();
    partial void OnRcvdByChanging(System.Nullable<short> value);
    partial void OnRcvdByChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnModifyUserIDChanging(string value);
    partial void OnModifyUserIDChanged();
    partial void OnModifyDtChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDtChanged();
    #endregion
		
		public MedicineReceive()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RcvdID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RcvdID
		{
			get
			{
				return this._RcvdID;
			}
			set
			{
				if ((this._RcvdID != value))
				{
					this.OnRcvdIDChanging(value);
					this.SendPropertyChanging();
					this._RcvdID = value;
					this.SendPropertyChanged("RcvdID");
					this.OnRcvdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RcvdDt", DbType="Date")]
		public System.Nullable<System.DateTime> RcvdDt
		{
			get
			{
				return this._RcvdDt;
			}
			set
			{
				if ((this._RcvdDt != value))
				{
					this.OnRcvdDtChanging(value);
					this.SendPropertyChanging();
					this._RcvdDt = value;
					this.SendPropertyChanged("RcvdDt");
					this.OnRcvdDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MNCode", DbType="SmallInt")]
		public System.Nullable<short> MNCode
		{
			get
			{
				return this._MNCode;
			}
			set
			{
				if ((this._MNCode != value))
				{
					this.OnMNCodeChanging(value);
					this.SendPropertyChanging();
					this._MNCode = value;
					this.SendPropertyChanged("MNCode");
					this.OnMNCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitQty", DbType="SmallInt")]
		public System.Nullable<short> UnitQty
		{
			get
			{
				return this._UnitQty;
			}
			set
			{
				if ((this._UnitQty != value))
				{
					this.OnUnitQtyChanging(value);
					this.SendPropertyChanging();
					this._UnitQty = value;
					this.SendPropertyChanged("UnitQty");
					this.OnUnitQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MCCode", DbType="TinyInt")]
		public System.Nullable<byte> MCCode
		{
			get
			{
				return this._MCCode;
			}
			set
			{
				if ((this._MCCode != value))
				{
					this.OnMCCodeChanging(value);
					this.SendPropertyChanging();
					this._MCCode = value;
					this.SendPropertyChanged("MCCode");
					this.OnMCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerContain", DbType="SmallInt")]
		public System.Nullable<short> PerContain
		{
			get
			{
				return this._PerContain;
			}
			set
			{
				if ((this._PerContain != value))
				{
					this.OnPerContainChanging(value);
					this.SendPropertyChanging();
					this._PerContain = value;
					this.SendPropertyChanged("PerContain");
					this.OnPerContainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RcvdQty", DbType="Int")]
		public System.Nullable<int> RcvdQty
		{
			get
			{
				return this._RcvdQty;
			}
			set
			{
				if ((this._RcvdQty != value))
				{
					this.OnRcvdQtyChanging(value);
					this.SendPropertyChanging();
					this._RcvdQty = value;
					this.SendPropertyChanged("RcvdQty");
					this.OnRcvdQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RcvdBy", DbType="SmallInt")]
		public System.Nullable<short> RcvdBy
		{
			get
			{
				return this._RcvdBy;
			}
			set
			{
				if ((this._RcvdBy != value))
				{
					this.OnRcvdByChanging(value);
					this.SendPropertyChanging();
					this._RcvdBy = value;
					this.SendPropertyChanged("RcvdBy");
					this.OnRcvdByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyUserID", DbType="VarChar(50)")]
		public string ModifyUserID
		{
			get
			{
				return this._ModifyUserID;
			}
			set
			{
				if ((this._ModifyUserID != value))
				{
					this.OnModifyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifyUserID = value;
					this.SendPropertyChanged("ModifyUserID");
					this.OnModifyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDt
		{
			get
			{
				return this._ModifyDt;
			}
			set
			{
				if ((this._ModifyDt != value))
				{
					this.OnModifyDtChanging(value);
					this.SendPropertyChanging();
					this._ModifyDt = value;
					this.SendPropertyChanged("ModifyDt");
					this.OnModifyDtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicineSales")]
	public partial class MedicineSale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicineSaleID;
		
		private System.Nullable<System.DateTime> _SaleDate;
		
		private decimal _MedDiscountPercent;
		
		private System.Nullable<decimal> _TotalSaleTaka;
		
		private System.Nullable<byte> _URBPrescription;
		
		private System.Nullable<short> _MedSaleBy;
		
		private string _UserID;
		
		private string _ModifyUserID;
		
		private System.Nullable<System.DateTime> _ModifyDt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicineSaleIDChanging(int value);
    partial void OnMedicineSaleIDChanged();
    partial void OnSaleDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSaleDateChanged();
    partial void OnMedDiscountPercentChanging(decimal value);
    partial void OnMedDiscountPercentChanged();
    partial void OnTotalSaleTakaChanging(System.Nullable<decimal> value);
    partial void OnTotalSaleTakaChanged();
    partial void OnURBPrescriptionChanging(System.Nullable<byte> value);
    partial void OnURBPrescriptionChanged();
    partial void OnMedSaleByChanging(System.Nullable<short> value);
    partial void OnMedSaleByChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnModifyUserIDChanging(string value);
    partial void OnModifyUserIDChanged();
    partial void OnModifyDtChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDtChanged();
    #endregion
		
		public MedicineSale()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineSaleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MedicineSaleID
		{
			get
			{
				return this._MedicineSaleID;
			}
			set
			{
				if ((this._MedicineSaleID != value))
				{
					this.OnMedicineSaleIDChanging(value);
					this.SendPropertyChanging();
					this._MedicineSaleID = value;
					this.SendPropertyChanged("MedicineSaleID");
					this.OnMedicineSaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SaleDate
		{
			get
			{
				return this._SaleDate;
			}
			set
			{
				if ((this._SaleDate != value))
				{
					this.OnSaleDateChanging(value);
					this.SendPropertyChanging();
					this._SaleDate = value;
					this.SendPropertyChanged("SaleDate");
					this.OnSaleDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedDiscountPercent", DbType="Decimal(7,2) NOT NULL")]
		public decimal MedDiscountPercent
		{
			get
			{
				return this._MedDiscountPercent;
			}
			set
			{
				if ((this._MedDiscountPercent != value))
				{
					this.OnMedDiscountPercentChanging(value);
					this.SendPropertyChanging();
					this._MedDiscountPercent = value;
					this.SendPropertyChanged("MedDiscountPercent");
					this.OnMedDiscountPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalSaleTaka", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> TotalSaleTaka
		{
			get
			{
				return this._TotalSaleTaka;
			}
			set
			{
				if ((this._TotalSaleTaka != value))
				{
					this.OnTotalSaleTakaChanging(value);
					this.SendPropertyChanging();
					this._TotalSaleTaka = value;
					this.SendPropertyChanged("TotalSaleTaka");
					this.OnTotalSaleTakaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URBPrescription", DbType="TinyInt")]
		public System.Nullable<byte> URBPrescription
		{
			get
			{
				return this._URBPrescription;
			}
			set
			{
				if ((this._URBPrescription != value))
				{
					this.OnURBPrescriptionChanging(value);
					this.SendPropertyChanging();
					this._URBPrescription = value;
					this.SendPropertyChanged("URBPrescription");
					this.OnURBPrescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedSaleBy", DbType="SmallInt")]
		public System.Nullable<short> MedSaleBy
		{
			get
			{
				return this._MedSaleBy;
			}
			set
			{
				if ((this._MedSaleBy != value))
				{
					this.OnMedSaleByChanging(value);
					this.SendPropertyChanging();
					this._MedSaleBy = value;
					this.SendPropertyChanged("MedSaleBy");
					this.OnMedSaleByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyUserID", DbType="VarChar(50)")]
		public string ModifyUserID
		{
			get
			{
				return this._ModifyUserID;
			}
			set
			{
				if ((this._ModifyUserID != value))
				{
					this.OnModifyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifyUserID = value;
					this.SendPropertyChanged("ModifyUserID");
					this.OnModifyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDt
		{
			get
			{
				return this._ModifyDt;
			}
			set
			{
				if ((this._ModifyDt != value))
				{
					this.OnModifyDtChanging(value);
					this.SendPropertyChanging();
					this._ModifyDt = value;
					this.SendPropertyChanged("ModifyDt");
					this.OnModifyDtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicineSalesDetails")]
	public partial class MedicineSalesDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicineSaleID;
		
		private short _MedicineCode;
		
		private short _MedicineSaleQry;
		
		private System.Nullable<decimal> _MedicinePrice;
		
		private System.Nullable<System.DateTime> _SaleDt;
		
		private string _UserID;
		
		private string _ModifyUserID;
		
		private System.Nullable<System.DateTime> _ModifyDt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicineSaleIDChanging(int value);
    partial void OnMedicineSaleIDChanged();
    partial void OnMedicineCodeChanging(short value);
    partial void OnMedicineCodeChanged();
    partial void OnMedicineSaleQryChanging(short value);
    partial void OnMedicineSaleQryChanged();
    partial void OnMedicinePriceChanging(System.Nullable<decimal> value);
    partial void OnMedicinePriceChanged();
    partial void OnSaleDtChanging(System.Nullable<System.DateTime> value);
    partial void OnSaleDtChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnModifyUserIDChanging(string value);
    partial void OnModifyUserIDChanged();
    partial void OnModifyDtChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDtChanged();
    #endregion
		
		public MedicineSalesDetail()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineSaleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MedicineSaleID
		{
			get
			{
				return this._MedicineSaleID;
			}
			set
			{
				if ((this._MedicineSaleID != value))
				{
					this.OnMedicineSaleIDChanging(value);
					this.SendPropertyChanging();
					this._MedicineSaleID = value;
					this.SendPropertyChanged("MedicineSaleID");
					this.OnMedicineSaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MedicineCode
		{
			get
			{
				return this._MedicineCode;
			}
			set
			{
				if ((this._MedicineCode != value))
				{
					this.OnMedicineCodeChanging(value);
					this.SendPropertyChanging();
					this._MedicineCode = value;
					this.SendPropertyChanged("MedicineCode");
					this.OnMedicineCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineSaleQry", DbType="SmallInt NOT NULL")]
		public short MedicineSaleQry
		{
			get
			{
				return this._MedicineSaleQry;
			}
			set
			{
				if ((this._MedicineSaleQry != value))
				{
					this.OnMedicineSaleQryChanging(value);
					this.SendPropertyChanging();
					this._MedicineSaleQry = value;
					this.SendPropertyChanged("MedicineSaleQry");
					this.OnMedicineSaleQryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicinePrice", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> MedicinePrice
		{
			get
			{
				return this._MedicinePrice;
			}
			set
			{
				if ((this._MedicinePrice != value))
				{
					this.OnMedicinePriceChanging(value);
					this.SendPropertyChanging();
					this._MedicinePrice = value;
					this.SendPropertyChanged("MedicinePrice");
					this.OnMedicinePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleDt", DbType="Date")]
		public System.Nullable<System.DateTime> SaleDt
		{
			get
			{
				return this._SaleDt;
			}
			set
			{
				if ((this._SaleDt != value))
				{
					this.OnSaleDtChanging(value);
					this.SendPropertyChanging();
					this._SaleDt = value;
					this.SendPropertyChanged("SaleDt");
					this.OnSaleDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyUserID", DbType="VarChar(50)")]
		public string ModifyUserID
		{
			get
			{
				return this._ModifyUserID;
			}
			set
			{
				if ((this._ModifyUserID != value))
				{
					this.OnModifyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifyUserID = value;
					this.SendPropertyChanged("ModifyUserID");
					this.OnModifyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDt
		{
			get
			{
				return this._ModifyDt;
			}
			set
			{
				if ((this._ModifyDt != value))
				{
					this.OnModifyDtChanging(value);
					this.SendPropertyChanging();
					this._ModifyDt = value;
					this.SendPropertyChanged("ModifyDt");
					this.OnModifyDtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NegativeFindings")]
	public partial class NegativeFinding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private short _NFCode;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
		private EntityRef<lkp_NegativeFinding> _lkp_NegativeFinding;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnNFCodeChanging(short value);
    partial void OnNFCodeChanged();
    #endregion
		
		public NegativeFinding()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			this._lkp_NegativeFinding = default(EntityRef<lkp_NegativeFinding>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short NFCode
		{
			get
			{
				return this._NFCode;
			}
			set
			{
				if ((this._NFCode != value))
				{
					if (this._lkp_NegativeFinding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNFCodeChanging(value);
					this.SendPropertyChanging();
					this._NFCode = value;
					this.SendPropertyChanged("NFCode");
					this.OnNFCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_NegativeFinding", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.NegativeFindings.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.NegativeFindings.Add(this);
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(string);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_NegativeFinding_NegativeFinding", Storage="_lkp_NegativeFinding", ThisKey="NFCode", OtherKey="NFCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_NegativeFinding lkp_NegativeFinding
		{
			get
			{
				return this._lkp_NegativeFinding.Entity;
			}
			set
			{
				lkp_NegativeFinding previousValue = this._lkp_NegativeFinding.Entity;
				if (((previousValue != value) 
							|| (this._lkp_NegativeFinding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_NegativeFinding.Entity = null;
						previousValue.NegativeFindings.Remove(this);
					}
					this._lkp_NegativeFinding.Entity = value;
					if ((value != null))
					{
						value.NegativeFindings.Add(this);
						this._NFCode = value.NFCode;
					}
					else
					{
						this._NFCode = default(short);
					}
					this.SendPropertyChanged("lkp_NegativeFinding");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientBasicInfo")]
	public partial class PatientBasicInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PatientID;
		
		private System.Nullable<System.DateTime> _RegistrationDt;
		
		private System.Nullable<byte> _PatientType;
		
		private string _StudyName;
		
		private string _StudyID;
		
		private string _EmployeeID;
		
		private System.Nullable<byte> _RelCode;
		
		private string _PatientName;
		
		private System.Nullable<byte> _MaritalStatus;
		
		private System.Nullable<byte> _Gender;
		
		private string _SpouseName;
		
		private string _FatherName;
		
		private string _MotherName;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _NationalID;
		
		private string _ContactNo;
		
		private string _AreaCode;
		
		private string _PDistrict;
		
		private string _PThana;
		
		private string _PUnion;
		
		private string _PVillage;
		
		private string _PAddress;
		
		private System.Nullable<decimal> _RegistrationFee;
		
		private System.Nullable<decimal> _MedDiscount;
		
		private System.Nullable<decimal> _TestDiscount;
		
		private string _Remarks;
		
		private string _UserID;
		
		private string _ModifyUserID;
		
		private System.Nullable<System.DateTime> _ModifyDt;
		
		private EntitySet<DoctorVisitInfo> _DoctorVisitInfos;
		
		private EntityRef<lkp_AreaDetail> _lkp_AreaDetail;
		
		private EntityRef<lkp_Relationship> _lkp_Relationship;
		
		private EntityRef<lkp_StudyName> _lkp_StudyName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnRegistrationDtChanging(System.Nullable<System.DateTime> value);
    partial void OnRegistrationDtChanged();
    partial void OnPatientTypeChanging(System.Nullable<byte> value);
    partial void OnPatientTypeChanged();
    partial void OnStudyNameChanging(string value);
    partial void OnStudyNameChanged();
    partial void OnStudyIDChanging(string value);
    partial void OnStudyIDChanged();
    partial void OnEmployeeIDChanging(string value);
    partial void OnEmployeeIDChanged();
    partial void OnRelCodeChanging(System.Nullable<byte> value);
    partial void OnRelCodeChanged();
    partial void OnPatientNameChanging(string value);
    partial void OnPatientNameChanged();
    partial void OnMaritalStatusChanging(System.Nullable<byte> value);
    partial void OnMaritalStatusChanged();
    partial void OnGenderChanging(System.Nullable<byte> value);
    partial void OnGenderChanged();
    partial void OnSpouseNameChanging(string value);
    partial void OnSpouseNameChanged();
    partial void OnFatherNameChanging(string value);
    partial void OnFatherNameChanged();
    partial void OnMotherNameChanging(string value);
    partial void OnMotherNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnNationalIDChanging(string value);
    partial void OnNationalIDChanged();
    partial void OnContactNoChanging(string value);
    partial void OnContactNoChanged();
    partial void OnAreaCodeChanging(string value);
    partial void OnAreaCodeChanged();
    partial void OnPDistrictChanging(string value);
    partial void OnPDistrictChanged();
    partial void OnPThanaChanging(string value);
    partial void OnPThanaChanged();
    partial void OnPUnionChanging(string value);
    partial void OnPUnionChanged();
    partial void OnPVillageChanging(string value);
    partial void OnPVillageChanged();
    partial void OnPAddressChanging(string value);
    partial void OnPAddressChanged();
    partial void OnRegistrationFeeChanging(System.Nullable<decimal> value);
    partial void OnRegistrationFeeChanged();
    partial void OnMedDiscountChanging(System.Nullable<decimal> value);
    partial void OnMedDiscountChanged();
    partial void OnTestDiscountChanging(System.Nullable<decimal> value);
    partial void OnTestDiscountChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnModifyUserIDChanging(string value);
    partial void OnModifyUserIDChanged();
    partial void OnModifyDtChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDtChanged();
    #endregion
		
		public PatientBasicInfo()
		{
			this._DoctorVisitInfos = new EntitySet<DoctorVisitInfo>(new Action<DoctorVisitInfo>(this.attach_DoctorVisitInfos), new Action<DoctorVisitInfo>(this.detach_DoctorVisitInfos));
			this._lkp_AreaDetail = default(EntityRef<lkp_AreaDetail>);
			this._lkp_Relationship = default(EntityRef<lkp_Relationship>);
			this._lkp_StudyName = default(EntityRef<lkp_StudyName>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDt", DbType="Date")]
		public System.Nullable<System.DateTime> RegistrationDt
		{
			get
			{
				return this._RegistrationDt;
			}
			set
			{
				if ((this._RegistrationDt != value))
				{
					this.OnRegistrationDtChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDt = value;
					this.SendPropertyChanged("RegistrationDt");
					this.OnRegistrationDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientType", DbType="TinyInt")]
		public System.Nullable<byte> PatientType
		{
			get
			{
				return this._PatientType;
			}
			set
			{
				if ((this._PatientType != value))
				{
					this.OnPatientTypeChanging(value);
					this.SendPropertyChanging();
					this._PatientType = value;
					this.SendPropertyChanged("PatientType");
					this.OnPatientTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyName", DbType="VarChar(20)")]
		public string StudyName
		{
			get
			{
				return this._StudyName;
			}
			set
			{
				if ((this._StudyName != value))
				{
					if (this._lkp_StudyName.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyNameChanging(value);
					this.SendPropertyChanging();
					this._StudyName = value;
					this.SendPropertyChanged("StudyName");
					this.OnStudyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyID", DbType="VarChar(6)")]
		public string StudyID
		{
			get
			{
				return this._StudyID;
			}
			set
			{
				if ((this._StudyID != value))
				{
					this.OnStudyIDChanging(value);
					this.SendPropertyChanging();
					this._StudyID = value;
					this.SendPropertyChanged("StudyID");
					this.OnStudyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="VarChar(6)")]
		public string EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelCode", DbType="TinyInt")]
		public System.Nullable<byte> RelCode
		{
			get
			{
				return this._RelCode;
			}
			set
			{
				if ((this._RelCode != value))
				{
					if (this._lkp_Relationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelCodeChanging(value);
					this.SendPropertyChanging();
					this._RelCode = value;
					this.SendPropertyChanged("RelCode");
					this.OnRelCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="VarChar(50)")]
		public string PatientName
		{
			get
			{
				return this._PatientName;
			}
			set
			{
				if ((this._PatientName != value))
				{
					this.OnPatientNameChanging(value);
					this.SendPropertyChanging();
					this._PatientName = value;
					this.SendPropertyChanged("PatientName");
					this.OnPatientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatus", DbType="TinyInt")]
		public System.Nullable<byte> MaritalStatus
		{
			get
			{
				return this._MaritalStatus;
			}
			set
			{
				if ((this._MaritalStatus != value))
				{
					this.OnMaritalStatusChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatus = value;
					this.SendPropertyChanged("MaritalStatus");
					this.OnMaritalStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="TinyInt")]
		public System.Nullable<byte> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseName", DbType="VarChar(50)")]
		public string SpouseName
		{
			get
			{
				return this._SpouseName;
			}
			set
			{
				if ((this._SpouseName != value))
				{
					this.OnSpouseNameChanging(value);
					this.SendPropertyChanging();
					this._SpouseName = value;
					this.SendPropertyChanged("SpouseName");
					this.OnSpouseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherName", DbType="VarChar(50)")]
		public string FatherName
		{
			get
			{
				return this._FatherName;
			}
			set
			{
				if ((this._FatherName != value))
				{
					this.OnFatherNameChanging(value);
					this.SendPropertyChanging();
					this._FatherName = value;
					this.SendPropertyChanged("FatherName");
					this.OnFatherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherName", DbType="VarChar(50)")]
		public string MotherName
		{
			get
			{
				return this._MotherName;
			}
			set
			{
				if ((this._MotherName != value))
				{
					this.OnMotherNameChanging(value);
					this.SendPropertyChanging();
					this._MotherName = value;
					this.SendPropertyChanged("MotherName");
					this.OnMotherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalID", DbType="VarChar(17)")]
		public string NationalID
		{
			get
			{
				return this._NationalID;
			}
			set
			{
				if ((this._NationalID != value))
				{
					this.OnNationalIDChanging(value);
					this.SendPropertyChanging();
					this._NationalID = value;
					this.SendPropertyChanged("NationalID");
					this.OnNationalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="VarChar(11)")]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaCode", DbType="VarChar(5)")]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					if (this._lkp_AreaDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PDistrict", DbType="VarChar(3)")]
		public string PDistrict
		{
			get
			{
				return this._PDistrict;
			}
			set
			{
				if ((this._PDistrict != value))
				{
					this.OnPDistrictChanging(value);
					this.SendPropertyChanging();
					this._PDistrict = value;
					this.SendPropertyChanged("PDistrict");
					this.OnPDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PThana", DbType="VarChar(2)")]
		public string PThana
		{
			get
			{
				return this._PThana;
			}
			set
			{
				if ((this._PThana != value))
				{
					this.OnPThanaChanging(value);
					this.SendPropertyChanging();
					this._PThana = value;
					this.SendPropertyChanged("PThana");
					this.OnPThanaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PUnion", DbType="VarChar(50)")]
		public string PUnion
		{
			get
			{
				return this._PUnion;
			}
			set
			{
				if ((this._PUnion != value))
				{
					this.OnPUnionChanging(value);
					this.SendPropertyChanging();
					this._PUnion = value;
					this.SendPropertyChanged("PUnion");
					this.OnPUnionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PVillage", DbType="VarChar(50)")]
		public string PVillage
		{
			get
			{
				return this._PVillage;
			}
			set
			{
				if ((this._PVillage != value))
				{
					this.OnPVillageChanging(value);
					this.SendPropertyChanging();
					this._PVillage = value;
					this.SendPropertyChanged("PVillage");
					this.OnPVillageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAddress", DbType="VarChar(100)")]
		public string PAddress
		{
			get
			{
				return this._PAddress;
			}
			set
			{
				if ((this._PAddress != value))
				{
					this.OnPAddressChanging(value);
					this.SendPropertyChanging();
					this._PAddress = value;
					this.SendPropertyChanged("PAddress");
					this.OnPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationFee", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> RegistrationFee
		{
			get
			{
				return this._RegistrationFee;
			}
			set
			{
				if ((this._RegistrationFee != value))
				{
					this.OnRegistrationFeeChanging(value);
					this.SendPropertyChanging();
					this._RegistrationFee = value;
					this.SendPropertyChanged("RegistrationFee");
					this.OnRegistrationFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedDiscount", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> MedDiscount
		{
			get
			{
				return this._MedDiscount;
			}
			set
			{
				if ((this._MedDiscount != value))
				{
					this.OnMedDiscountChanging(value);
					this.SendPropertyChanging();
					this._MedDiscount = value;
					this.SendPropertyChanged("MedDiscount");
					this.OnMedDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestDiscount", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> TestDiscount
		{
			get
			{
				return this._TestDiscount;
			}
			set
			{
				if ((this._TestDiscount != value))
				{
					this.OnTestDiscountChanging(value);
					this.SendPropertyChanging();
					this._TestDiscount = value;
					this.SendPropertyChanged("TestDiscount");
					this.OnTestDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(200)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyUserID", DbType="VarChar(50)")]
		public string ModifyUserID
		{
			get
			{
				return this._ModifyUserID;
			}
			set
			{
				if ((this._ModifyUserID != value))
				{
					this.OnModifyUserIDChanging(value);
					this.SendPropertyChanging();
					this._ModifyUserID = value;
					this.SendPropertyChanged("ModifyUserID");
					this.OnModifyUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDt
		{
			get
			{
				return this._ModifyDt;
			}
			set
			{
				if ((this._ModifyDt != value))
				{
					this.OnModifyDtChanging(value);
					this.SendPropertyChanging();
					this._ModifyDt = value;
					this.SendPropertyChanged("ModifyDt");
					this.OnModifyDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientBasicInfo_DoctorVisitInfo", Storage="_DoctorVisitInfos", ThisKey="PatientID", OtherKey="PatientID")]
		public EntitySet<DoctorVisitInfo> DoctorVisitInfos
		{
			get
			{
				return this._DoctorVisitInfos;
			}
			set
			{
				this._DoctorVisitInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_AreaDetail_PatientBasicInfo", Storage="_lkp_AreaDetail", ThisKey="AreaCode", OtherKey="AreaCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public lkp_AreaDetail lkp_AreaDetail
		{
			get
			{
				return this._lkp_AreaDetail.Entity;
			}
			set
			{
				lkp_AreaDetail previousValue = this._lkp_AreaDetail.Entity;
				if (((previousValue != value) 
							|| (this._lkp_AreaDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_AreaDetail.Entity = null;
						previousValue.PatientBasicInfos.Remove(this);
					}
					this._lkp_AreaDetail.Entity = value;
					if ((value != null))
					{
						value.PatientBasicInfos.Add(this);
						this._AreaCode = value.AreaCode;
					}
					else
					{
						this._AreaCode = default(string);
					}
					this.SendPropertyChanged("lkp_AreaDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_Relationship_PatientBasicInfo", Storage="_lkp_Relationship", ThisKey="RelCode", OtherKey="RelCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public lkp_Relationship lkp_Relationship
		{
			get
			{
				return this._lkp_Relationship.Entity;
			}
			set
			{
				lkp_Relationship previousValue = this._lkp_Relationship.Entity;
				if (((previousValue != value) 
							|| (this._lkp_Relationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_Relationship.Entity = null;
						previousValue.PatientBasicInfos.Remove(this);
					}
					this._lkp_Relationship.Entity = value;
					if ((value != null))
					{
						value.PatientBasicInfos.Add(this);
						this._RelCode = value.RelCode;
					}
					else
					{
						this._RelCode = default(Nullable<byte>);
					}
					this.SendPropertyChanged("lkp_Relationship");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_StudyName_PatientBasicInfo", Storage="_lkp_StudyName", ThisKey="StudyName", OtherKey="StudyName", IsForeignKey=true, DeleteRule="CASCADE")]
		public lkp_StudyName lkp_StudyName
		{
			get
			{
				return this._lkp_StudyName.Entity;
			}
			set
			{
				lkp_StudyName previousValue = this._lkp_StudyName.Entity;
				if (((previousValue != value) 
							|| (this._lkp_StudyName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_StudyName.Entity = null;
						previousValue.PatientBasicInfos.Remove(this);
					}
					this._lkp_StudyName.Entity = value;
					if ((value != null))
					{
						value.PatientBasicInfos.Add(this);
						this._StudyName = value.StudyName;
					}
					else
					{
						this._StudyName = default(string);
					}
					this.SendPropertyChanged("lkp_StudyName");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DoctorVisitInfos(DoctorVisitInfo entity)
		{
			this.SendPropertyChanging();
			entity.PatientBasicInfo = this;
		}
		
		private void detach_DoctorVisitInfos(DoctorVisitInfo entity)
		{
			this.SendPropertyChanging();
			entity.PatientBasicInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PositiveFindings")]
	public partial class PositiveFinding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private short _PFCode;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
		private EntityRef<lkp_PositiveFinding> _lkp_PositiveFinding;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnPFCodeChanging(short value);
    partial void OnPFCodeChanged();
    #endregion
		
		public PositiveFinding()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			this._lkp_PositiveFinding = default(EntityRef<lkp_PositiveFinding>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PFCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PFCode
		{
			get
			{
				return this._PFCode;
			}
			set
			{
				if ((this._PFCode != value))
				{
					if (this._lkp_PositiveFinding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPFCodeChanging(value);
					this.SendPropertyChanging();
					this._PFCode = value;
					this.SendPropertyChanged("PFCode");
					this.OnPFCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_PositiveFinding", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.PositiveFindings.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.PositiveFindings.Add(this);
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(string);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_PositiveFinding_PositiveFinding", Storage="_lkp_PositiveFinding", ThisKey="PFCode", OtherKey="PFCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_PositiveFinding lkp_PositiveFinding
		{
			get
			{
				return this._lkp_PositiveFinding.Entity;
			}
			set
			{
				lkp_PositiveFinding previousValue = this._lkp_PositiveFinding.Entity;
				if (((previousValue != value) 
							|| (this._lkp_PositiveFinding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_PositiveFinding.Entity = null;
						previousValue.PositiveFindings.Remove(this);
					}
					this._lkp_PositiveFinding.Entity = value;
					if ((value != null))
					{
						value.PositiveFindings.Add(this);
						this._PFCode = value.PFCode;
					}
					else
					{
						this._PFCode = default(short);
					}
					this.SendPropertyChanged("lkp_PositiveFinding");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProvisionalDx")]
	public partial class ProvisionalDx : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private short _PDCode;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
		private EntityRef<lkp_ProvisionalDx> _lkp_ProvisionalDx;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnPDCodeChanging(short value);
    partial void OnPDCodeChanged();
    #endregion
		
		public ProvisionalDx()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			this._lkp_ProvisionalDx = default(EntityRef<lkp_ProvisionalDx>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PDCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PDCode
		{
			get
			{
				return this._PDCode;
			}
			set
			{
				if ((this._PDCode != value))
				{
					if (this._lkp_ProvisionalDx.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPDCodeChanging(value);
					this.SendPropertyChanging();
					this._PDCode = value;
					this.SendPropertyChanged("PDCode");
					this.OnPDCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_ProvisionalDx", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.ProvisionalDxes.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.ProvisionalDxes.Add(this);
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(string);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_ProvisionalDx_ProvisionalDx", Storage="_lkp_ProvisionalDx", ThisKey="PDCode", OtherKey="PDCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_ProvisionalDx lkp_ProvisionalDx
		{
			get
			{
				return this._lkp_ProvisionalDx.Entity;
			}
			set
			{
				lkp_ProvisionalDx previousValue = this._lkp_ProvisionalDx.Entity;
				if (((previousValue != value) 
							|| (this._lkp_ProvisionalDx.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_ProvisionalDx.Entity = null;
						previousValue.ProvisionalDxes.Remove(this);
					}
					this._lkp_ProvisionalDx.Entity = value;
					if ((value != null))
					{
						value.ProvisionalDxes.Add(this);
						this._PDCode = value.PDCode;
					}
					else
					{
						this._PDCode = default(short);
					}
					this.SendPropertyChanged("lkp_ProvisionalDx");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _UserName;
		
		private string _FName;
		
		private string _LName;
		
		private EntitySet<AspNetUserClaim> _AspNetUserClaims;
		
		private EntitySet<AspNetUserLogin> _AspNetUserLogins;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFNameChanging(string value);
    partial void OnFNameChanged();
    partial void OnLNameChanging(string value);
    partial void OnLNameChanged();
    #endregion
		
		public AspNetUser()
		{
			this._AspNetUserClaims = new EntitySet<AspNetUserClaim>(new Action<AspNetUserClaim>(this.attach_AspNetUserClaims), new Action<AspNetUserClaim>(this.detach_AspNetUserClaims));
			this._AspNetUserLogins = new EntitySet<AspNetUserLogin>(new Action<AspNetUserLogin>(this.attach_AspNetUserLogins), new Action<AspNetUserLogin>(this.detach_AspNetUserLogins));
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FName", DbType="NVarChar(50)")]
		public string FName
		{
			get
			{
				return this._FName;
			}
			set
			{
				if ((this._FName != value))
				{
					this.OnFNameChanging(value);
					this.SendPropertyChanging();
					this._FName = value;
					this.SendPropertyChanged("FName");
					this.OnFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LName", DbType="NVarChar(50)")]
		public string LName
		{
			get
			{
				return this._LName;
			}
			set
			{
				if ((this._LName != value))
				{
					this.OnLNameChanging(value);
					this.SendPropertyChanging();
					this._LName = value;
					this.SendPropertyChanged("LName");
					this.OnLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUserClaims", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this._AspNetUserClaims;
			}
			set
			{
				this._AspNetUserClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUserLogins", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this._AspNetUserLogins;
			}
			set
			{
				this._AspNetUserLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
	}
	
	public partial class sp_rpt_DailyDoctorVisitResult
	{
		
		private string _DoctorName;
		
		private string _VisitID;
		
		private string _PatientID;
		
		private System.Nullable<decimal> _DoctorFee;
		
		private System.Nullable<System.DateTime> _EntryDate;
		
		private System.Nullable<byte> _status;
		
		public sp_rpt_DailyDoctorVisitResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorName", DbType="NVarChar(50)")]
		public string DoctorName
		{
			get
			{
				return this._DoctorName;
			}
			set
			{
				if ((this._DoctorName != value))
				{
					this._DoctorName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this._VisitID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11)")]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this._PatientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorFee", DbType="SmallMoney")]
		public System.Nullable<decimal> DoctorFee
		{
			get
			{
				return this._DoctorFee;
			}
			set
			{
				if ((this._DoctorFee != value))
				{
					this._DoctorFee = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="Date")]
		public System.Nullable<System.DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this._EntryDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt")]
		public System.Nullable<byte> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this._status = value;
				}
			}
		}
	}
	
	public partial class sp_rpt_DailyVisitByDoctorResult
	{
		
		private string _DoctorName;
		
		private string _VisitID;
		
		private string _PatientID;
		
		private System.Nullable<decimal> _DoctorFee;
		
		private System.Nullable<System.DateTime> _EntryDate;
		
		private System.Nullable<byte> _status;
		
		public sp_rpt_DailyVisitByDoctorResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorName", DbType="NVarChar(50)")]
		public string DoctorName
		{
			get
			{
				return this._DoctorName;
			}
			set
			{
				if ((this._DoctorName != value))
				{
					this._DoctorName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this._VisitID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11)")]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this._PatientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorFee", DbType="SmallMoney")]
		public System.Nullable<decimal> DoctorFee
		{
			get
			{
				return this._DoctorFee;
			}
			set
			{
				if ((this._DoctorFee != value))
				{
					this._DoctorFee = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="Date")]
		public System.Nullable<System.DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this._EntryDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="TinyInt")]
		public System.Nullable<byte> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this._status = value;
				}
			}
		}
	}
	
	public partial class sp_rpt_DoctorVisitMoneyReceiptResult
	{
		
		private string _VisitID;
		
		private string _PatientID;
		
		private System.Nullable<System.DateTime> _EntryDate;
		
		private string _PatientName;
		
		private string _Sex;
		
		private string _Age;
		
		private System.Nullable<decimal> _RegFee;
		
		private System.Nullable<decimal> _DoctorFee;
		
		private System.Nullable<int> _Visitcount;
		
		private System.Nullable<decimal> _RegistrationFee;
		
		public sp_rpt_DoctorVisitMoneyReceiptResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this._VisitID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11)")]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this._PatientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this._EntryDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="VarChar(50)")]
		public string PatientName
		{
			get
			{
				return this._PatientName;
			}
			set
			{
				if ((this._PatientName != value))
				{
					this._PatientName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this._Sex = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="VarChar(15)")]
		public string Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this._Age = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegFee", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> RegFee
		{
			get
			{
				return this._RegFee;
			}
			set
			{
				if ((this._RegFee != value))
				{
					this._RegFee = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorFee", DbType="SmallMoney")]
		public System.Nullable<decimal> DoctorFee
		{
			get
			{
				return this._DoctorFee;
			}
			set
			{
				if ((this._DoctorFee != value))
				{
					this._DoctorFee = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visitcount", DbType="Int")]
		public System.Nullable<int> Visitcount
		{
			get
			{
				return this._Visitcount;
			}
			set
			{
				if ((this._Visitcount != value))
				{
					this._Visitcount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationFee", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> RegistrationFee
		{
			get
			{
				return this._RegistrationFee;
			}
			set
			{
				if ((this._RegistrationFee != value))
				{
					this._RegistrationFee = value;
				}
			}
		}
	}
	
	public partial class sp_rpt_LabTestOrderResult
	{
		
		private string _LabTestID;
		
		private string _PatientID;
		
		private string _PatientName;
		
		private System.Nullable<System.DateTime> _TestDate;
		
		private System.Nullable<System.DateTime> _DeliveryDate;
		
		private string _Sex;
		
		private string _Age;
		
		private System.Nullable<short> _HeightCM;
		
		private System.Nullable<short> _WeightKG;
		
		private System.Nullable<short> _HipCM;
		
		private System.Nullable<short> _WaistCM;
		
		private string _DoctorName;
		
		private string _FromOutOfURB;
		
		public sp_rpt_LabTestOrderResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabTestID", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string LabTestID
		{
			get
			{
				return this._LabTestID;
			}
			set
			{
				if ((this._LabTestID != value))
				{
					this._LabTestID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11)")]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this._PatientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="VarChar(50)")]
		public string PatientName
		{
			get
			{
				return this._PatientName;
			}
			set
			{
				if ((this._PatientName != value))
				{
					this._PatientName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestDate", DbType="Date")]
		public System.Nullable<System.DateTime> TestDate
		{
			get
			{
				return this._TestDate;
			}
			set
			{
				if ((this._TestDate != value))
				{
					this._TestDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDate", DbType="Date")]
		public System.Nullable<System.DateTime> DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this._DeliveryDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this._Sex = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="VarChar(15)")]
		public string Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this._Age = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeightCM", DbType="SmallInt")]
		public System.Nullable<short> HeightCM
		{
			get
			{
				return this._HeightCM;
			}
			set
			{
				if ((this._HeightCM != value))
				{
					this._HeightCM = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeightKG", DbType="SmallInt")]
		public System.Nullable<short> WeightKG
		{
			get
			{
				return this._WeightKG;
			}
			set
			{
				if ((this._WeightKG != value))
				{
					this._WeightKG = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HipCM", DbType="SmallInt")]
		public System.Nullable<short> HipCM
		{
			get
			{
				return this._HipCM;
			}
			set
			{
				if ((this._HipCM != value))
				{
					this._HipCM = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaistCM", DbType="SmallInt")]
		public System.Nullable<short> WaistCM
		{
			get
			{
				return this._WaistCM;
			}
			set
			{
				if ((this._WaistCM != value))
				{
					this._WaistCM = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorName", DbType="NVarChar(50)")]
		public string DoctorName
		{
			get
			{
				return this._DoctorName;
			}
			set
			{
				if ((this._DoctorName != value))
				{
					this._DoctorName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromOutOfURB", DbType="NVarChar(100)")]
		public string FromOutOfURB
		{
			get
			{
				return this._FromOutOfURB;
			}
			set
			{
				if ((this._FromOutOfURB != value))
				{
					this._FromOutOfURB = value;
				}
			}
		}
	}
	
	public partial class sp_rpt_PrescriptionMainResult
	{
		
		private string _VisitID;
		
		private string _PatientID;
		
		private System.Nullable<System.DateTime> _VisitDate;
		
		private string _PatientName;
		
		private string _PatientType;
		
		private string _StudyID;
		
		private string _StudyName;
		
		private string _Sex;
		
		private string _Age;
		
		private string _DrugHistory;
		
		private string _DrugAllergy;
		
		private string _Anemia;
		
		private string _Cervix;
		
		private string _Clubbing;
		
		private string _Heart;
		
		private string _Jaundice;
		
		private string _L_N;
		
		private string _Liver;
		
		private string _Lung;
		
		private string _Oedema;
		
		private string _OS;
		
		private string _Spleen;
		
		private string _Vagina;
		
		private string _Vulva;
		
		private string _BP;
		
		private System.Nullable<byte> _Pulse;
		
		private System.Nullable<short> _Temperature;
		
		private System.Nullable<byte> _Weight;
		
		private string _Others;
		
		private System.Nullable<System.DateTime> _NextVisitDt;
		
		private string _Reffered;
		
		private string _DoctorName;
		
		public sp_rpt_PrescriptionMainResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this._VisitID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11)")]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this._PatientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> VisitDate
		{
			get
			{
				return this._VisitDate;
			}
			set
			{
				if ((this._VisitDate != value))
				{
					this._VisitDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="VarChar(50)")]
		public string PatientName
		{
			get
			{
				return this._PatientName;
			}
			set
			{
				if ((this._PatientName != value))
				{
					this._PatientName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientType", DbType="VarChar(15)")]
		public string PatientType
		{
			get
			{
				return this._PatientType;
			}
			set
			{
				if ((this._PatientType != value))
				{
					this._PatientType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyID", DbType="VarChar(6)")]
		public string StudyID
		{
			get
			{
				return this._StudyID;
			}
			set
			{
				if ((this._StudyID != value))
				{
					this._StudyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyName", DbType="VarChar(20)")]
		public string StudyName
		{
			get
			{
				return this._StudyName;
			}
			set
			{
				if ((this._StudyName != value))
				{
					this._StudyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this._Sex = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="VarChar(15)")]
		public string Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this._Age = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugHistory", DbType="VarChar(100)")]
		public string DrugHistory
		{
			get
			{
				return this._DrugHistory;
			}
			set
			{
				if ((this._DrugHistory != value))
				{
					this._DrugHistory = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugAllergy", DbType="NVarChar(50)")]
		public string DrugAllergy
		{
			get
			{
				return this._DrugAllergy;
			}
			set
			{
				if ((this._DrugAllergy != value))
				{
					this._DrugAllergy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Anemia", DbType="VarChar(50)")]
		public string Anemia
		{
			get
			{
				return this._Anemia;
			}
			set
			{
				if ((this._Anemia != value))
				{
					this._Anemia = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cervix", DbType="VarChar(50)")]
		public string Cervix
		{
			get
			{
				return this._Cervix;
			}
			set
			{
				if ((this._Cervix != value))
				{
					this._Cervix = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clubbing", DbType="VarChar(50)")]
		public string Clubbing
		{
			get
			{
				return this._Clubbing;
			}
			set
			{
				if ((this._Clubbing != value))
				{
					this._Clubbing = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Heart", DbType="VarChar(50)")]
		public string Heart
		{
			get
			{
				return this._Heart;
			}
			set
			{
				if ((this._Heart != value))
				{
					this._Heart = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Jaundice", DbType="VarChar(50)")]
		public string Jaundice
		{
			get
			{
				return this._Jaundice;
			}
			set
			{
				if ((this._Jaundice != value))
				{
					this._Jaundice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_L_N", DbType="VarChar(50)")]
		public string L_N
		{
			get
			{
				return this._L_N;
			}
			set
			{
				if ((this._L_N != value))
				{
					this._L_N = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Liver", DbType="VarChar(50)")]
		public string Liver
		{
			get
			{
				return this._Liver;
			}
			set
			{
				if ((this._Liver != value))
				{
					this._Liver = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lung", DbType="VarChar(50)")]
		public string Lung
		{
			get
			{
				return this._Lung;
			}
			set
			{
				if ((this._Lung != value))
				{
					this._Lung = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Oedema", DbType="VarChar(50)")]
		public string Oedema
		{
			get
			{
				return this._Oedema;
			}
			set
			{
				if ((this._Oedema != value))
				{
					this._Oedema = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OS", DbType="VarChar(50)")]
		public string OS
		{
			get
			{
				return this._OS;
			}
			set
			{
				if ((this._OS != value))
				{
					this._OS = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Spleen", DbType="VarChar(50)")]
		public string Spleen
		{
			get
			{
				return this._Spleen;
			}
			set
			{
				if ((this._Spleen != value))
				{
					this._Spleen = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vagina", DbType="VarChar(50)")]
		public string Vagina
		{
			get
			{
				return this._Vagina;
			}
			set
			{
				if ((this._Vagina != value))
				{
					this._Vagina = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vulva", DbType="VarChar(50)")]
		public string Vulva
		{
			get
			{
				return this._Vulva;
			}
			set
			{
				if ((this._Vulva != value))
				{
					this._Vulva = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BP", DbType="VarChar(7)")]
		public string BP
		{
			get
			{
				return this._BP;
			}
			set
			{
				if ((this._BP != value))
				{
					this._BP = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pulse", DbType="TinyInt")]
		public System.Nullable<byte> Pulse
		{
			get
			{
				return this._Pulse;
			}
			set
			{
				if ((this._Pulse != value))
				{
					this._Pulse = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="SmallInt")]
		public System.Nullable<short> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this._Temperature = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="TinyInt")]
		public System.Nullable<byte> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this._Weight = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Others", DbType="NVarChar(50)")]
		public string Others
		{
			get
			{
				return this._Others;
			}
			set
			{
				if ((this._Others != value))
				{
					this._Others = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextVisitDt", DbType="Date")]
		public System.Nullable<System.DateTime> NextVisitDt
		{
			get
			{
				return this._NextVisitDt;
			}
			set
			{
				if ((this._NextVisitDt != value))
				{
					this._NextVisitDt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reffered", DbType="NVarChar(150)")]
		public string Reffered
		{
			get
			{
				return this._Reffered;
			}
			set
			{
				if ((this._Reffered != value))
				{
					this._Reffered = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorName", DbType="NVarChar(50)")]
		public string DoctorName
		{
			get
			{
				return this._DoctorName;
			}
			set
			{
				if ((this._DoctorName != value))
				{
					this._DoctorName = value;
				}
			}
		}
	}
	
	public partial class sp_SelectPatientIDResult
	{
		
		private string _PatientID;
		
		public sp_SelectPatientIDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this._PatientID = value;
				}
			}
		}
	}
	
	public partial class sp_SelectStudyNameResult
	{
		
		private string _StudyName;
		
		public sp_SelectStudyNameResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string StudyName
		{
			get
			{
				return this._StudyName;
			}
			set
			{
				if ((this._StudyName != value))
				{
					this._StudyName = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
