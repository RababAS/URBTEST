#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnlineOutPatientManagementSystem.ORM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OnLinePrescription")]
	public partial class OnLinePrescriptionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertlkp_Union(lkp_Union instance);
    partial void Updatelkp_Union(lkp_Union instance);
    partial void Deletelkp_Union(lkp_Union instance);
    partial void Insertlkp_Village(lkp_Village instance);
    partial void Updatelkp_Village(lkp_Village instance);
    partial void Deletelkp_Village(lkp_Village instance);
    partial void Insertlkp_ThanaUpzilla(lkp_ThanaUpzilla instance);
    partial void Updatelkp_ThanaUpzilla(lkp_ThanaUpzilla instance);
    partial void Deletelkp_ThanaUpzilla(lkp_ThanaUpzilla instance);
    partial void Insertlkp_District(lkp_District instance);
    partial void Updatelkp_District(lkp_District instance);
    partial void Deletelkp_District(lkp_District instance);
    partial void Insertlkp_StudyName(lkp_StudyName instance);
    partial void Updatelkp_StudyName(lkp_StudyName instance);
    partial void Deletelkp_StudyName(lkp_StudyName instance);
    partial void Insertlkp_Relationship(lkp_Relationship instance);
    partial void Updatelkp_Relationship(lkp_Relationship instance);
    partial void Deletelkp_Relationship(lkp_Relationship instance);
    partial void Insertlkp_StaffInfo(lkp_StaffInfo instance);
    partial void Updatelkp_StaffInfo(lkp_StaffInfo instance);
    partial void Deletelkp_StaffInfo(lkp_StaffInfo instance);
    partial void InsertPatientBasicInfo(PatientBasicInfo instance);
    partial void UpdatePatientBasicInfo(PatientBasicInfo instance);
    partial void DeletePatientBasicInfo(PatientBasicInfo instance);
    partial void InsertTestInfo(TestInfo instance);
    partial void UpdateTestInfo(TestInfo instance);
    partial void DeleteTestInfo(TestInfo instance);
    partial void InsertTestInfoDetail(TestInfoDetail instance);
    partial void UpdateTestInfoDetail(TestInfoDetail instance);
    partial void DeleteTestInfoDetail(TestInfoDetail instance);
    partial void Insertlkp_ChiefComplaince(lkp_ChiefComplaince instance);
    partial void Updatelkp_ChiefComplaince(lkp_ChiefComplaince instance);
    partial void Deletelkp_ChiefComplaince(lkp_ChiefComplaince instance);
    partial void Insertlkp_ProvisionalDx(lkp_ProvisionalDx instance);
    partial void Updatelkp_ProvisionalDx(lkp_ProvisionalDx instance);
    partial void Deletelkp_ProvisionalDx(lkp_ProvisionalDx instance);
    partial void Insertlkp_MedicineName(lkp_MedicineName instance);
    partial void Updatelkp_MedicineName(lkp_MedicineName instance);
    partial void Deletelkp_MedicineName(lkp_MedicineName instance);
    partial void Insertlkp_Frequency(lkp_Frequency instance);
    partial void Updatelkp_Frequency(lkp_Frequency instance);
    partial void Deletelkp_Frequency(lkp_Frequency instance);
    partial void Insertlkp_Treatment(lkp_Treatment instance);
    partial void Updatelkp_Treatment(lkp_Treatment instance);
    partial void Deletelkp_Treatment(lkp_Treatment instance);
    partial void Insertlkp_Investigation(lkp_Investigation instance);
    partial void Updatelkp_Investigation(lkp_Investigation instance);
    partial void Deletelkp_Investigation(lkp_Investigation instance);
    partial void Insertlkp_NegativeFinding(lkp_NegativeFinding instance);
    partial void Updatelkp_NegativeFinding(lkp_NegativeFinding instance);
    partial void Deletelkp_NegativeFinding(lkp_NegativeFinding instance);
    partial void Insertlkp_PositiveFinding(lkp_PositiveFinding instance);
    partial void Updatelkp_PositiveFinding(lkp_PositiveFinding instance);
    partial void Deletelkp_PositiveFinding(lkp_PositiveFinding instance);
    partial void Insertlkp_DentalSign(lkp_DentalSign instance);
    partial void Updatelkp_DentalSign(lkp_DentalSign instance);
    partial void Deletelkp_DentalSign(lkp_DentalSign instance);
    partial void Insertlkp_DoctorsName(lkp_DoctorsName instance);
    partial void Updatelkp_DoctorsName(lkp_DoctorsName instance);
    partial void Deletelkp_DoctorsName(lkp_DoctorsName instance);
    partial void Insertlkp_AdviceBangla(lkp_AdviceBangla instance);
    partial void Updatelkp_AdviceBangla(lkp_AdviceBangla instance);
    partial void Deletelkp_AdviceBangla(lkp_AdviceBangla instance);
    partial void InsertClinicVisitHistory(ClinicVisitHistory instance);
    partial void UpdateClinicVisitHistory(ClinicVisitHistory instance);
    partial void DeleteClinicVisitHistory(ClinicVisitHistory instance);
    partial void Insertlkp_Reffered(lkp_Reffered instance);
    partial void Updatelkp_Reffered(lkp_Reffered instance);
    partial void Deletelkp_Reffered(lkp_Reffered instance);
    partial void InsertProvisionalDx(ProvisionalDx instance);
    partial void UpdateProvisionalDx(ProvisionalDx instance);
    partial void DeleteProvisionalDx(ProvisionalDx instance);
    partial void InsertDifferentialDx(DifferentialDx instance);
    partial void UpdateDifferentialDx(DifferentialDx instance);
    partial void DeleteDifferentialDx(DifferentialDx instance);
    partial void InsertConfirmDx(ConfirmDx instance);
    partial void UpdateConfirmDx(ConfirmDx instance);
    partial void DeleteConfirmDx(ConfirmDx instance);
    partial void InsertMedicineDetail(MedicineDetail instance);
    partial void UpdateMedicineDetail(MedicineDetail instance);
    partial void DeleteMedicineDetail(MedicineDetail instance);
    partial void InsertDentalSign(DentalSign instance);
    partial void UpdateDentalSign(DentalSign instance);
    partial void DeleteDentalSign(DentalSign instance);
    partial void InsertDentalAdvice(DentalAdvice instance);
    partial void UpdateDentalAdvice(DentalAdvice instance);
    partial void DeleteDentalAdvice(DentalAdvice instance);
    partial void InsertAdviceBangla(AdviceBangla instance);
    partial void UpdateAdviceBangla(AdviceBangla instance);
    partial void DeleteAdviceBangla(AdviceBangla instance);
    partial void InsertInvestigation(Investigation instance);
    partial void UpdateInvestigation(Investigation instance);
    partial void DeleteInvestigation(Investigation instance);
    partial void InsertPositiveFinding(PositiveFinding instance);
    partial void UpdatePositiveFinding(PositiveFinding instance);
    partial void DeletePositiveFinding(PositiveFinding instance);
    partial void InsertNegativeFinding(NegativeFinding instance);
    partial void UpdateNegativeFinding(NegativeFinding instance);
    partial void DeleteNegativeFinding(NegativeFinding instance);
    partial void InsertChiefComplaince(ChiefComplaince instance);
    partial void UpdateChiefComplaince(ChiefComplaince instance);
    partial void DeleteChiefComplaince(ChiefComplaince instance);
    #endregion
		
		public OnLinePrescriptionDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OnLinePrescriptionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnLinePrescriptionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnLinePrescriptionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnLinePrescriptionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<lkp_Union> lkp_Unions
		{
			get
			{
				return this.GetTable<lkp_Union>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Village> lkp_Villages
		{
			get
			{
				return this.GetTable<lkp_Village>();
			}
		}
		
		public System.Data.Linq.Table<lkp_ThanaUpzilla> lkp_ThanaUpzillas
		{
			get
			{
				return this.GetTable<lkp_ThanaUpzilla>();
			}
		}
		
		public System.Data.Linq.Table<lkp_District> lkp_Districts
		{
			get
			{
				return this.GetTable<lkp_District>();
			}
		}
		
		public System.Data.Linq.Table<lkp_StudyName> lkp_StudyNames
		{
			get
			{
				return this.GetTable<lkp_StudyName>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Relationship> lkp_Relationships
		{
			get
			{
				return this.GetTable<lkp_Relationship>();
			}
		}
		
		public System.Data.Linq.Table<lkp_StaffInfo> lkp_StaffInfos
		{
			get
			{
				return this.GetTable<lkp_StaffInfo>();
			}
		}
		
		public System.Data.Linq.Table<PatientBasicInfo> PatientBasicInfos
		{
			get
			{
				return this.GetTable<PatientBasicInfo>();
			}
		}
		
		public System.Data.Linq.Table<TestInfo> TestInfos
		{
			get
			{
				return this.GetTable<TestInfo>();
			}
		}
		
		public System.Data.Linq.Table<TestInfoDetail> TestInfoDetails
		{
			get
			{
				return this.GetTable<TestInfoDetail>();
			}
		}
		
		public System.Data.Linq.Table<lkp_ChiefComplaince> lkp_ChiefComplainces
		{
			get
			{
				return this.GetTable<lkp_ChiefComplaince>();
			}
		}
		
		public System.Data.Linq.Table<lkp_ProvisionalDx> lkp_ProvisionalDxes
		{
			get
			{
				return this.GetTable<lkp_ProvisionalDx>();
			}
		}
		
		public System.Data.Linq.Table<lkp_MedicineName> lkp_MedicineNames
		{
			get
			{
				return this.GetTable<lkp_MedicineName>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Frequency> lkp_Frequencies
		{
			get
			{
				return this.GetTable<lkp_Frequency>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Treatment> lkp_Treatments
		{
			get
			{
				return this.GetTable<lkp_Treatment>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Investigation> lkp_Investigations
		{
			get
			{
				return this.GetTable<lkp_Investigation>();
			}
		}
		
		public System.Data.Linq.Table<lkp_NegativeFinding> lkp_NegativeFindings
		{
			get
			{
				return this.GetTable<lkp_NegativeFinding>();
			}
		}
		
		public System.Data.Linq.Table<lkp_PositiveFinding> lkp_PositiveFindings
		{
			get
			{
				return this.GetTable<lkp_PositiveFinding>();
			}
		}
		
		public System.Data.Linq.Table<lkp_DentalSign> lkp_DentalSigns
		{
			get
			{
				return this.GetTable<lkp_DentalSign>();
			}
		}
		
		public System.Data.Linq.Table<lkp_DentalAdvice> lkp_DentalAdvices
		{
			get
			{
				return this.GetTable<lkp_DentalAdvice>();
			}
		}
		
		public System.Data.Linq.Table<lkp_DoctorsName> lkp_DoctorsNames
		{
			get
			{
				return this.GetTable<lkp_DoctorsName>();
			}
		}
		
		public System.Data.Linq.Table<lkp_AdviceBangla> lkp_AdviceBanglas
		{
			get
			{
				return this.GetTable<lkp_AdviceBangla>();
			}
		}
		
		public System.Data.Linq.Table<ClinicVisitHistory> ClinicVisitHistories
		{
			get
			{
				return this.GetTable<ClinicVisitHistory>();
			}
		}
		
		public System.Data.Linq.Table<lkp_Reffered> lkp_Reffereds
		{
			get
			{
				return this.GetTable<lkp_Reffered>();
			}
		}
		
		public System.Data.Linq.Table<ProvisionalDx> ProvisionalDxes
		{
			get
			{
				return this.GetTable<ProvisionalDx>();
			}
		}
		
		public System.Data.Linq.Table<DifferentialDx> DifferentialDxes
		{
			get
			{
				return this.GetTable<DifferentialDx>();
			}
		}
		
		public System.Data.Linq.Table<ConfirmDx> ConfirmDxes
		{
			get
			{
				return this.GetTable<ConfirmDx>();
			}
		}
		
		public System.Data.Linq.Table<MedicineDetail> MedicineDetails
		{
			get
			{
				return this.GetTable<MedicineDetail>();
			}
		}
		
		public System.Data.Linq.Table<DentalSign> DentalSigns
		{
			get
			{
				return this.GetTable<DentalSign>();
			}
		}
		
		public System.Data.Linq.Table<DentalAdvice> DentalAdvices
		{
			get
			{
				return this.GetTable<DentalAdvice>();
			}
		}
		
		public System.Data.Linq.Table<AdviceBangla> AdviceBanglas
		{
			get
			{
				return this.GetTable<AdviceBangla>();
			}
		}
		
		public System.Data.Linq.Table<Investigation> Investigations
		{
			get
			{
				return this.GetTable<Investigation>();
			}
		}
		
		public System.Data.Linq.Table<PositiveFinding> PositiveFindings
		{
			get
			{
				return this.GetTable<PositiveFinding>();
			}
		}
		
		public System.Data.Linq.Table<NegativeFinding> NegativeFindings
		{
			get
			{
				return this.GetTable<NegativeFinding>();
			}
		}
		
		public System.Data.Linq.Table<ChiefComplaince> ChiefComplainces
		{
			get
			{
				return this.GetTable<ChiefComplaince>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Union")]
	public partial class lkp_Union : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DistrictCode;
		
		private string _ThanaCode;
		
		private string _UnionCode;
		
		private string _UnionName;
		
		private EntitySet<lkp_Village> _lkp_Villages;
		
		private EntityRef<lkp_ThanaUpzilla> _lkp_ThanaUpzilla;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDistrictCodeChanging(string value);
    partial void OnDistrictCodeChanged();
    partial void OnThanaCodeChanging(string value);
    partial void OnThanaCodeChanged();
    partial void OnUnionCodeChanging(string value);
    partial void OnUnionCodeChanged();
    partial void OnUnionNameChanging(string value);
    partial void OnUnionNameChanged();
    #endregion
		
		public lkp_Union()
		{
			this._lkp_Villages = new EntitySet<lkp_Village>(new Action<lkp_Village>(this.attach_lkp_Villages), new Action<lkp_Village>(this.detach_lkp_Villages));
			this._lkp_ThanaUpzilla = default(EntityRef<lkp_ThanaUpzilla>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DistrictCode
		{
			get
			{
				return this._DistrictCode;
			}
			set
			{
				if ((this._DistrictCode != value))
				{
					if (this._lkp_ThanaUpzilla.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictCodeChanging(value);
					this.SendPropertyChanging();
					this._DistrictCode = value;
					this.SendPropertyChanged("DistrictCode");
					this.OnDistrictCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThanaCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ThanaCode
		{
			get
			{
				return this._ThanaCode;
			}
			set
			{
				if ((this._ThanaCode != value))
				{
					if (this._lkp_ThanaUpzilla.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThanaCodeChanging(value);
					this.SendPropertyChanging();
					this._ThanaCode = value;
					this.SendPropertyChanged("ThanaCode");
					this.OnThanaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnionCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UnionCode
		{
			get
			{
				return this._UnionCode;
			}
			set
			{
				if ((this._UnionCode != value))
				{
					this.OnUnionCodeChanging(value);
					this.SendPropertyChanging();
					this._UnionCode = value;
					this.SendPropertyChanged("UnionCode");
					this.OnUnionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnionName", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string UnionName
		{
			get
			{
				return this._UnionName;
			}
			set
			{
				if ((this._UnionName != value))
				{
					this.OnUnionNameChanging(value);
					this.SendPropertyChanging();
					this._UnionName = value;
					this.SendPropertyChanged("UnionName");
					this.OnUnionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_Union_lkp_Village", Storage="_lkp_Villages", ThisKey="DistrictCode,ThanaCode,UnionCode", OtherKey="DistrictCode,ThanaCode,UnionCode")]
		public EntitySet<lkp_Village> lkp_Villages
		{
			get
			{
				return this._lkp_Villages;
			}
			set
			{
				this._lkp_Villages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_ThanaUpzilla_lkp_Union", Storage="_lkp_ThanaUpzilla", ThisKey="DistrictCode,ThanaCode", OtherKey="DistrictCode,ThanaCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_ThanaUpzilla lkp_ThanaUpzilla
		{
			get
			{
				return this._lkp_ThanaUpzilla.Entity;
			}
			set
			{
				lkp_ThanaUpzilla previousValue = this._lkp_ThanaUpzilla.Entity;
				if (((previousValue != value) 
							|| (this._lkp_ThanaUpzilla.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_ThanaUpzilla.Entity = null;
						previousValue.lkp_Unions.Remove(this);
					}
					this._lkp_ThanaUpzilla.Entity = value;
					if ((value != null))
					{
						value.lkp_Unions.Add(this);
						this._DistrictCode = value.DistrictCode;
						this._ThanaCode = value.ThanaCode;
					}
					else
					{
						this._DistrictCode = default(string);
						this._ThanaCode = default(string);
					}
					this.SendPropertyChanged("lkp_ThanaUpzilla");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lkp_Villages(lkp_Village entity)
		{
			this.SendPropertyChanging();
			entity.lkp_Union = this;
		}
		
		private void detach_lkp_Villages(lkp_Village entity)
		{
			this.SendPropertyChanging();
			entity.lkp_Union = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Village")]
	public partial class lkp_Village : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DistrictCode;
		
		private string _ThanaCode;
		
		private string _UnionCode;
		
		private string _VillageCode;
		
		private string _VillageName;
		
		private EntityRef<lkp_Union> _lkp_Union;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDistrictCodeChanging(string value);
    partial void OnDistrictCodeChanged();
    partial void OnThanaCodeChanging(string value);
    partial void OnThanaCodeChanged();
    partial void OnUnionCodeChanging(string value);
    partial void OnUnionCodeChanged();
    partial void OnVillageCodeChanging(string value);
    partial void OnVillageCodeChanged();
    partial void OnVillageNameChanging(string value);
    partial void OnVillageNameChanged();
    #endregion
		
		public lkp_Village()
		{
			this._lkp_Union = default(EntityRef<lkp_Union>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DistrictCode
		{
			get
			{
				return this._DistrictCode;
			}
			set
			{
				if ((this._DistrictCode != value))
				{
					if (this._lkp_Union.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictCodeChanging(value);
					this.SendPropertyChanging();
					this._DistrictCode = value;
					this.SendPropertyChanged("DistrictCode");
					this.OnDistrictCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThanaCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ThanaCode
		{
			get
			{
				return this._ThanaCode;
			}
			set
			{
				if ((this._ThanaCode != value))
				{
					if (this._lkp_Union.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThanaCodeChanging(value);
					this.SendPropertyChanging();
					this._ThanaCode = value;
					this.SendPropertyChanged("ThanaCode");
					this.OnThanaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnionCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UnionCode
		{
			get
			{
				return this._UnionCode;
			}
			set
			{
				if ((this._UnionCode != value))
				{
					if (this._lkp_Union.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnionCodeChanging(value);
					this.SendPropertyChanging();
					this._UnionCode = value;
					this.SendPropertyChanged("UnionCode");
					this.OnUnionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VillageCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VillageCode
		{
			get
			{
				return this._VillageCode;
			}
			set
			{
				if ((this._VillageCode != value))
				{
					this.OnVillageCodeChanging(value);
					this.SendPropertyChanging();
					this._VillageCode = value;
					this.SendPropertyChanged("VillageCode");
					this.OnVillageCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VillageName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VillageName
		{
			get
			{
				return this._VillageName;
			}
			set
			{
				if ((this._VillageName != value))
				{
					this.OnVillageNameChanging(value);
					this.SendPropertyChanging();
					this._VillageName = value;
					this.SendPropertyChanged("VillageName");
					this.OnVillageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_Union_lkp_Village", Storage="_lkp_Union", ThisKey="DistrictCode,ThanaCode,UnionCode", OtherKey="DistrictCode,ThanaCode,UnionCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_Union lkp_Union
		{
			get
			{
				return this._lkp_Union.Entity;
			}
			set
			{
				lkp_Union previousValue = this._lkp_Union.Entity;
				if (((previousValue != value) 
							|| (this._lkp_Union.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_Union.Entity = null;
						previousValue.lkp_Villages.Remove(this);
					}
					this._lkp_Union.Entity = value;
					if ((value != null))
					{
						value.lkp_Villages.Add(this);
						this._DistrictCode = value.DistrictCode;
						this._ThanaCode = value.ThanaCode;
						this._UnionCode = value.UnionCode;
					}
					else
					{
						this._DistrictCode = default(string);
						this._ThanaCode = default(string);
						this._UnionCode = default(string);
					}
					this.SendPropertyChanged("lkp_Union");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_ThanaUpzilla")]
	public partial class lkp_ThanaUpzilla : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DistrictCode;
		
		private string _ThanaCode;
		
		private string _ThanaName;
		
		private EntitySet<lkp_Union> _lkp_Unions;
		
		private EntityRef<lkp_District> _lkp_District;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDistrictCodeChanging(string value);
    partial void OnDistrictCodeChanged();
    partial void OnThanaCodeChanging(string value);
    partial void OnThanaCodeChanged();
    partial void OnThanaNameChanging(string value);
    partial void OnThanaNameChanged();
    #endregion
		
		public lkp_ThanaUpzilla()
		{
			this._lkp_Unions = new EntitySet<lkp_Union>(new Action<lkp_Union>(this.attach_lkp_Unions), new Action<lkp_Union>(this.detach_lkp_Unions));
			this._lkp_District = default(EntityRef<lkp_District>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DistrictCode
		{
			get
			{
				return this._DistrictCode;
			}
			set
			{
				if ((this._DistrictCode != value))
				{
					if (this._lkp_District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictCodeChanging(value);
					this.SendPropertyChanging();
					this._DistrictCode = value;
					this.SendPropertyChanged("DistrictCode");
					this.OnDistrictCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThanaCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ThanaCode
		{
			get
			{
				return this._ThanaCode;
			}
			set
			{
				if ((this._ThanaCode != value))
				{
					this.OnThanaCodeChanging(value);
					this.SendPropertyChanging();
					this._ThanaCode = value;
					this.SendPropertyChanged("ThanaCode");
					this.OnThanaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThanaName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ThanaName
		{
			get
			{
				return this._ThanaName;
			}
			set
			{
				if ((this._ThanaName != value))
				{
					this.OnThanaNameChanging(value);
					this.SendPropertyChanging();
					this._ThanaName = value;
					this.SendPropertyChanged("ThanaName");
					this.OnThanaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_ThanaUpzilla_lkp_Union", Storage="_lkp_Unions", ThisKey="DistrictCode,ThanaCode", OtherKey="DistrictCode,ThanaCode")]
		public EntitySet<lkp_Union> lkp_Unions
		{
			get
			{
				return this._lkp_Unions;
			}
			set
			{
				this._lkp_Unions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_District_lkp_ThanaUpzilla", Storage="_lkp_District", ThisKey="DistrictCode", OtherKey="DistrictCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public lkp_District lkp_District
		{
			get
			{
				return this._lkp_District.Entity;
			}
			set
			{
				lkp_District previousValue = this._lkp_District.Entity;
				if (((previousValue != value) 
							|| (this._lkp_District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lkp_District.Entity = null;
						previousValue.lkp_ThanaUpzillas.Remove(this);
					}
					this._lkp_District.Entity = value;
					if ((value != null))
					{
						value.lkp_ThanaUpzillas.Add(this);
						this._DistrictCode = value.DistrictCode;
					}
					else
					{
						this._DistrictCode = default(string);
					}
					this.SendPropertyChanged("lkp_District");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lkp_Unions(lkp_Union entity)
		{
			this.SendPropertyChanging();
			entity.lkp_ThanaUpzilla = this;
		}
		
		private void detach_lkp_Unions(lkp_Union entity)
		{
			this.SendPropertyChanging();
			entity.lkp_ThanaUpzilla = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_District")]
	public partial class lkp_District : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DivisionCode;
		
		private string _DistrictCode;
		
		private string _DistrictName;
		
		private EntitySet<lkp_ThanaUpzilla> _lkp_ThanaUpzillas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDivisionCodeChanging(string value);
    partial void OnDivisionCodeChanged();
    partial void OnDistrictCodeChanging(string value);
    partial void OnDistrictCodeChanged();
    partial void OnDistrictNameChanging(string value);
    partial void OnDistrictNameChanged();
    #endregion
		
		public lkp_District()
		{
			this._lkp_ThanaUpzillas = new EntitySet<lkp_ThanaUpzilla>(new Action<lkp_ThanaUpzilla>(this.attach_lkp_ThanaUpzillas), new Action<lkp_ThanaUpzilla>(this.detach_lkp_ThanaUpzillas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionCode", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string DivisionCode
		{
			get
			{
				return this._DivisionCode;
			}
			set
			{
				if ((this._DivisionCode != value))
				{
					this.OnDivisionCodeChanging(value);
					this.SendPropertyChanging();
					this._DivisionCode = value;
					this.SendPropertyChanged("DivisionCode");
					this.OnDivisionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictCode", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DistrictCode
		{
			get
			{
				return this._DistrictCode;
			}
			set
			{
				if ((this._DistrictCode != value))
				{
					this.OnDistrictCodeChanging(value);
					this.SendPropertyChanging();
					this._DistrictCode = value;
					this.SendPropertyChanged("DistrictCode");
					this.OnDistrictCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string DistrictName
		{
			get
			{
				return this._DistrictName;
			}
			set
			{
				if ((this._DistrictName != value))
				{
					this.OnDistrictNameChanging(value);
					this.SendPropertyChanging();
					this._DistrictName = value;
					this.SendPropertyChanged("DistrictName");
					this.OnDistrictNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lkp_District_lkp_ThanaUpzilla", Storage="_lkp_ThanaUpzillas", ThisKey="DistrictCode", OtherKey="DistrictCode")]
		public EntitySet<lkp_ThanaUpzilla> lkp_ThanaUpzillas
		{
			get
			{
				return this._lkp_ThanaUpzillas;
			}
			set
			{
				this._lkp_ThanaUpzillas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lkp_ThanaUpzillas(lkp_ThanaUpzilla entity)
		{
			this.SendPropertyChanging();
			entity.lkp_District = this;
		}
		
		private void detach_lkp_ThanaUpzillas(lkp_ThanaUpzilla entity)
		{
			this.SendPropertyChanging();
			entity.lkp_District = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_StudyName")]
	public partial class lkp_StudyName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StudyName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudyNameChanging(string value);
    partial void OnStudyNameChanged();
    #endregion
		
		public lkp_StudyName()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyName", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StudyName
		{
			get
			{
				return this._StudyName;
			}
			set
			{
				if ((this._StudyName != value))
				{
					this.OnStudyNameChanging(value);
					this.SendPropertyChanging();
					this._StudyName = value;
					this.SendPropertyChanged("StudyName");
					this.OnStudyNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Relationship")]
	public partial class lkp_Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RelationCode;
		
		private string _RelationDescription;
		
		private System.Nullable<byte> _MedicineDiscountPer;
		
		private System.Nullable<byte> _TestDiscountPer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationCodeChanging(byte value);
    partial void OnRelationCodeChanged();
    partial void OnRelationDescriptionChanging(string value);
    partial void OnRelationDescriptionChanged();
    partial void OnMedicineDiscountPerChanging(System.Nullable<byte> value);
    partial void OnMedicineDiscountPerChanged();
    partial void OnTestDiscountPerChanging(System.Nullable<byte> value);
    partial void OnTestDiscountPerChanged();
    #endregion
		
		public lkp_Relationship()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationCode", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte RelationCode
		{
			get
			{
				return this._RelationCode;
			}
			set
			{
				if ((this._RelationCode != value))
				{
					this.OnRelationCodeChanging(value);
					this.SendPropertyChanging();
					this._RelationCode = value;
					this.SendPropertyChanged("RelationCode");
					this.OnRelationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationDescription", DbType="NVarChar(20)")]
		public string RelationDescription
		{
			get
			{
				return this._RelationDescription;
			}
			set
			{
				if ((this._RelationDescription != value))
				{
					this.OnRelationDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RelationDescription = value;
					this.SendPropertyChanged("RelationDescription");
					this.OnRelationDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineDiscountPer", DbType="TinyInt")]
		public System.Nullable<byte> MedicineDiscountPer
		{
			get
			{
				return this._MedicineDiscountPer;
			}
			set
			{
				if ((this._MedicineDiscountPer != value))
				{
					this.OnMedicineDiscountPerChanging(value);
					this.SendPropertyChanging();
					this._MedicineDiscountPer = value;
					this.SendPropertyChanged("MedicineDiscountPer");
					this.OnMedicineDiscountPerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestDiscountPer", DbType="TinyInt")]
		public System.Nullable<byte> TestDiscountPer
		{
			get
			{
				return this._TestDiscountPer;
			}
			set
			{
				if ((this._TestDiscountPer != value))
				{
					this.OnTestDiscountPerChanging(value);
					this.SendPropertyChanging();
					this._TestDiscountPer = value;
					this.SendPropertyChanged("TestDiscountPer");
					this.OnTestDiscountPerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_StaffInfo")]
	public partial class lkp_StaffInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffID;
		
		private string _StaffName;
		
		private System.Nullable<System.DateTime> _JoiningDate;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private byte _StaffAge;
		
		private byte _StaffSex;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnStaffNameChanging(string value);
    partial void OnStaffNameChanged();
    partial void OnJoiningDateChanging(System.Nullable<System.DateTime> value);
    partial void OnJoiningDateChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnStaffAgeChanging(byte value);
    partial void OnStaffAgeChanged();
    partial void OnStaffSexChanging(byte value);
    partial void OnStaffSexChanged();
    #endregion
		
		public lkp_StaffInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StaffName
		{
			get
			{
				return this._StaffName;
			}
			set
			{
				if ((this._StaffName != value))
				{
					this.OnStaffNameChanging(value);
					this.SendPropertyChanging();
					this._StaffName = value;
					this.SendPropertyChanged("StaffName");
					this.OnStaffNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoiningDate", DbType="Date")]
		public System.Nullable<System.DateTime> JoiningDate
		{
			get
			{
				return this._JoiningDate;
			}
			set
			{
				if ((this._JoiningDate != value))
				{
					this.OnJoiningDateChanging(value);
					this.SendPropertyChanging();
					this._JoiningDate = value;
					this.SendPropertyChanged("JoiningDate");
					this.OnJoiningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffAge", DbType="TinyInt NOT NULL")]
		public byte StaffAge
		{
			get
			{
				return this._StaffAge;
			}
			set
			{
				if ((this._StaffAge != value))
				{
					this.OnStaffAgeChanging(value);
					this.SendPropertyChanging();
					this._StaffAge = value;
					this.SendPropertyChanged("StaffAge");
					this.OnStaffAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffSex", DbType="TinyInt NOT NULL")]
		public byte StaffSex
		{
			get
			{
				return this._StaffSex;
			}
			set
			{
				if ((this._StaffSex != value))
				{
					this.OnStaffSexChanging(value);
					this.SendPropertyChanging();
					this._StaffSex = value;
					this.SendPropertyChanged("StaffSex");
					this.OnStaffSexChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientBasicInfo")]
	public partial class PatientBasicInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PatientID;
		
		private System.Nullable<System.DateTime> _RegistrationDt;
		
		private System.Nullable<byte> _PatientType;
		
		private string _StudyID;
		
		private string _StudyName;
		
		private System.Nullable<byte> _Relationship;
		
		private string _PatientName;
		
		private System.Nullable<byte> _MaritalStatus;
		
		private string _FatherName;
		
		private string _MotherName;
		
		private string _SpouseName;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _PatientAge;
		
		private System.Nullable<byte> _Gender;
		
		private string _NationalID;
		
		private string _ContactNo;
		
		private string _PDistrict;
		
		private string _PThana;
		
		private string _PUnion;
		
		private string _PVillage;
		
		private string _PAddress;
		
		private System.Nullable<decimal> _RegistrationFee;
		
		private string _Remarks;
		
		private EntitySet<TestInfo> _TestInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnRegistrationDtChanging(System.Nullable<System.DateTime> value);
    partial void OnRegistrationDtChanged();
    partial void OnPatientTypeChanging(System.Nullable<byte> value);
    partial void OnPatientTypeChanged();
    partial void OnStudyIDChanging(string value);
    partial void OnStudyIDChanged();
    partial void OnStudyNameChanging(string value);
    partial void OnStudyNameChanged();
    partial void OnRelationshipChanging(System.Nullable<byte> value);
    partial void OnRelationshipChanged();
    partial void OnPatientNameChanging(string value);
    partial void OnPatientNameChanged();
    partial void OnMaritalStatusChanging(System.Nullable<byte> value);
    partial void OnMaritalStatusChanged();
    partial void OnFatherNameChanging(string value);
    partial void OnFatherNameChanged();
    partial void OnMotherNameChanging(string value);
    partial void OnMotherNameChanged();
    partial void OnSpouseNameChanging(string value);
    partial void OnSpouseNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnPatientAgeChanging(string value);
    partial void OnPatientAgeChanged();
    partial void OnGenderChanging(System.Nullable<byte> value);
    partial void OnGenderChanged();
    partial void OnNationalIDChanging(string value);
    partial void OnNationalIDChanged();
    partial void OnContactNoChanging(string value);
    partial void OnContactNoChanged();
    partial void OnPDistrictChanging(string value);
    partial void OnPDistrictChanged();
    partial void OnPThanaChanging(string value);
    partial void OnPThanaChanged();
    partial void OnPUnionChanging(string value);
    partial void OnPUnionChanged();
    partial void OnPVillageChanging(string value);
    partial void OnPVillageChanged();
    partial void OnPAddressChanging(string value);
    partial void OnPAddressChanged();
    partial void OnRegistrationFeeChanging(System.Nullable<decimal> value);
    partial void OnRegistrationFeeChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public PatientBasicInfo()
		{
			this._TestInfos = new EntitySet<TestInfo>(new Action<TestInfo>(this.attach_TestInfos), new Action<TestInfo>(this.detach_TestInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> RegistrationDt
		{
			get
			{
				return this._RegistrationDt;
			}
			set
			{
				if ((this._RegistrationDt != value))
				{
					this.OnRegistrationDtChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDt = value;
					this.SendPropertyChanged("RegistrationDt");
					this.OnRegistrationDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientType", DbType="TinyInt")]
		public System.Nullable<byte> PatientType
		{
			get
			{
				return this._PatientType;
			}
			set
			{
				if ((this._PatientType != value))
				{
					this.OnPatientTypeChanging(value);
					this.SendPropertyChanging();
					this._PatientType = value;
					this.SendPropertyChanged("PatientType");
					this.OnPatientTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyID", DbType="VarChar(6)")]
		public string StudyID
		{
			get
			{
				return this._StudyID;
			}
			set
			{
				if ((this._StudyID != value))
				{
					this.OnStudyIDChanging(value);
					this.SendPropertyChanging();
					this._StudyID = value;
					this.SendPropertyChanged("StudyID");
					this.OnStudyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyName", DbType="VarChar(20)")]
		public string StudyName
		{
			get
			{
				return this._StudyName;
			}
			set
			{
				if ((this._StudyName != value))
				{
					this.OnStudyNameChanging(value);
					this.SendPropertyChanging();
					this._StudyName = value;
					this.SendPropertyChanged("StudyName");
					this.OnStudyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Relationship", DbType="TinyInt")]
		public System.Nullable<byte> Relationship
		{
			get
			{
				return this._Relationship;
			}
			set
			{
				if ((this._Relationship != value))
				{
					this.OnRelationshipChanging(value);
					this.SendPropertyChanging();
					this._Relationship = value;
					this.SendPropertyChanged("Relationship");
					this.OnRelationshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="VarChar(50)")]
		public string PatientName
		{
			get
			{
				return this._PatientName;
			}
			set
			{
				if ((this._PatientName != value))
				{
					this.OnPatientNameChanging(value);
					this.SendPropertyChanging();
					this._PatientName = value;
					this.SendPropertyChanged("PatientName");
					this.OnPatientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatus", DbType="TinyInt")]
		public System.Nullable<byte> MaritalStatus
		{
			get
			{
				return this._MaritalStatus;
			}
			set
			{
				if ((this._MaritalStatus != value))
				{
					this.OnMaritalStatusChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatus = value;
					this.SendPropertyChanged("MaritalStatus");
					this.OnMaritalStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherName", DbType="VarChar(50)")]
		public string FatherName
		{
			get
			{
				return this._FatherName;
			}
			set
			{
				if ((this._FatherName != value))
				{
					this.OnFatherNameChanging(value);
					this.SendPropertyChanging();
					this._FatherName = value;
					this.SendPropertyChanged("FatherName");
					this.OnFatherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherName", DbType="VarChar(50)")]
		public string MotherName
		{
			get
			{
				return this._MotherName;
			}
			set
			{
				if ((this._MotherName != value))
				{
					this.OnMotherNameChanging(value);
					this.SendPropertyChanging();
					this._MotherName = value;
					this.SendPropertyChanged("MotherName");
					this.OnMotherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseName", DbType="VarChar(50)")]
		public string SpouseName
		{
			get
			{
				return this._SpouseName;
			}
			set
			{
				if ((this._SpouseName != value))
				{
					this.OnSpouseNameChanging(value);
					this.SendPropertyChanging();
					this._SpouseName = value;
					this.SendPropertyChanged("SpouseName");
					this.OnSpouseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientAge", DbType="VarChar(10)")]
		public string PatientAge
		{
			get
			{
				return this._PatientAge;
			}
			set
			{
				if ((this._PatientAge != value))
				{
					this.OnPatientAgeChanging(value);
					this.SendPropertyChanging();
					this._PatientAge = value;
					this.SendPropertyChanged("PatientAge");
					this.OnPatientAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="TinyInt")]
		public System.Nullable<byte> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalID", DbType="VarChar(17)")]
		public string NationalID
		{
			get
			{
				return this._NationalID;
			}
			set
			{
				if ((this._NationalID != value))
				{
					this.OnNationalIDChanging(value);
					this.SendPropertyChanging();
					this._NationalID = value;
					this.SendPropertyChanged("NationalID");
					this.OnNationalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="VarChar(11)")]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PDistrict", DbType="VarChar(2)")]
		public string PDistrict
		{
			get
			{
				return this._PDistrict;
			}
			set
			{
				if ((this._PDistrict != value))
				{
					this.OnPDistrictChanging(value);
					this.SendPropertyChanging();
					this._PDistrict = value;
					this.SendPropertyChanged("PDistrict");
					this.OnPDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PThana", DbType="VarChar(2)")]
		public string PThana
		{
			get
			{
				return this._PThana;
			}
			set
			{
				if ((this._PThana != value))
				{
					this.OnPThanaChanging(value);
					this.SendPropertyChanging();
					this._PThana = value;
					this.SendPropertyChanged("PThana");
					this.OnPThanaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PUnion", DbType="VarChar(2)")]
		public string PUnion
		{
			get
			{
				return this._PUnion;
			}
			set
			{
				if ((this._PUnion != value))
				{
					this.OnPUnionChanging(value);
					this.SendPropertyChanging();
					this._PUnion = value;
					this.SendPropertyChanged("PUnion");
					this.OnPUnionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PVillage", DbType="VarChar(5)")]
		public string PVillage
		{
			get
			{
				return this._PVillage;
			}
			set
			{
				if ((this._PVillage != value))
				{
					this.OnPVillageChanging(value);
					this.SendPropertyChanging();
					this._PVillage = value;
					this.SendPropertyChanged("PVillage");
					this.OnPVillageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAddress", DbType="VarChar(100)")]
		public string PAddress
		{
			get
			{
				return this._PAddress;
			}
			set
			{
				if ((this._PAddress != value))
				{
					this.OnPAddressChanging(value);
					this.SendPropertyChanging();
					this._PAddress = value;
					this.SendPropertyChanged("PAddress");
					this.OnPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationFee", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> RegistrationFee
		{
			get
			{
				return this._RegistrationFee;
			}
			set
			{
				if ((this._RegistrationFee != value))
				{
					this.OnRegistrationFeeChanging(value);
					this.SendPropertyChanging();
					this._RegistrationFee = value;
					this.SendPropertyChanged("RegistrationFee");
					this.OnRegistrationFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(200)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientBasicInfo_TestInfo", Storage="_TestInfos", ThisKey="PatientID", OtherKey="PatientID")]
		public EntitySet<TestInfo> TestInfos
		{
			get
			{
				return this._TestInfos;
			}
			set
			{
				this._TestInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestInfos(TestInfo entity)
		{
			this.SendPropertyChanging();
			entity.PatientBasicInfo = this;
		}
		
		private void detach_TestInfos(TestInfo entity)
		{
			this.SendPropertyChanging();
			entity.PatientBasicInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestInfo")]
	public partial class TestInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LabID;
		
		private string _PatientID;
		
		private System.Nullable<System.DateTime> _TestDate;
		
		private System.Nullable<System.DateTime> _DeliveryDt;
		
		private System.Nullable<short> _PHeightCM;
		
		private System.Nullable<short> _PWeightKG;
		
		private System.Nullable<short> _PHipCM;
		
		private System.Nullable<short> _PWaistCM;
		
		private System.Nullable<short> _DoctorsName;
		
		private string _ReferredFrom;
		
		private System.Nullable<decimal> _TotalBill;
		
		private System.Nullable<decimal> _PaidDueBill;
		
		private System.Nullable<decimal> _PaidBill;
		
		private System.Nullable<bool> _PaidYesNo;
		
		private System.Nullable<System.DateTime> _CashRcvdDt;
		
		private System.Nullable<bool> _RptDelivered;
		
		private System.Nullable<System.DateTime> _RptDeliveredDt;
		
		private System.Nullable<int> _CashRcvdBy;
		
		private EntitySet<TestInfoDetail> _TestInfoDetails;
		
		private EntityRef<PatientBasicInfo> _PatientBasicInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabIDChanging(string value);
    partial void OnLabIDChanged();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnTestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTestDateChanged();
    partial void OnDeliveryDtChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliveryDtChanged();
    partial void OnPHeightCMChanging(System.Nullable<short> value);
    partial void OnPHeightCMChanged();
    partial void OnPWeightKGChanging(System.Nullable<short> value);
    partial void OnPWeightKGChanged();
    partial void OnPHipCMChanging(System.Nullable<short> value);
    partial void OnPHipCMChanged();
    partial void OnPWaistCMChanging(System.Nullable<short> value);
    partial void OnPWaistCMChanged();
    partial void OnDoctorsNameChanging(System.Nullable<short> value);
    partial void OnDoctorsNameChanged();
    partial void OnReferredFromChanging(string value);
    partial void OnReferredFromChanged();
    partial void OnTotalBillChanging(System.Nullable<decimal> value);
    partial void OnTotalBillChanged();
    partial void OnPaidDueBillChanging(System.Nullable<decimal> value);
    partial void OnPaidDueBillChanged();
    partial void OnPaidBillChanging(System.Nullable<decimal> value);
    partial void OnPaidBillChanged();
    partial void OnPaidYesNoChanging(System.Nullable<bool> value);
    partial void OnPaidYesNoChanged();
    partial void OnCashRcvdDtChanging(System.Nullable<System.DateTime> value);
    partial void OnCashRcvdDtChanged();
    partial void OnRptDeliveredChanging(System.Nullable<bool> value);
    partial void OnRptDeliveredChanged();
    partial void OnRptDeliveredDtChanging(System.Nullable<System.DateTime> value);
    partial void OnRptDeliveredDtChanged();
    partial void OnCashRcvdByChanging(System.Nullable<int> value);
    partial void OnCashRcvdByChanged();
    #endregion
		
		public TestInfo()
		{
			this._TestInfoDetails = new EntitySet<TestInfoDetail>(new Action<TestInfoDetail>(this.attach_TestInfoDetails), new Action<TestInfoDetail>(this.detach_TestInfoDetails));
			this._PatientBasicInfo = default(EntityRef<PatientBasicInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LabID
		{
			get
			{
				return this._LabID;
			}
			set
			{
				if ((this._LabID != value))
				{
					this.OnLabIDChanging(value);
					this.SendPropertyChanging();
					this._LabID = value;
					this.SendPropertyChanged("LabID");
					this.OnLabIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11)")]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._PatientBasicInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestDate", DbType="Date")]
		public System.Nullable<System.DateTime> TestDate
		{
			get
			{
				return this._TestDate;
			}
			set
			{
				if ((this._TestDate != value))
				{
					this.OnTestDateChanging(value);
					this.SendPropertyChanging();
					this._TestDate = value;
					this.SendPropertyChanged("TestDate");
					this.OnTestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDt", DbType="Date")]
		public System.Nullable<System.DateTime> DeliveryDt
		{
			get
			{
				return this._DeliveryDt;
			}
			set
			{
				if ((this._DeliveryDt != value))
				{
					this.OnDeliveryDtChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDt = value;
					this.SendPropertyChanged("DeliveryDt");
					this.OnDeliveryDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHeightCM", DbType="SmallInt")]
		public System.Nullable<short> PHeightCM
		{
			get
			{
				return this._PHeightCM;
			}
			set
			{
				if ((this._PHeightCM != value))
				{
					this.OnPHeightCMChanging(value);
					this.SendPropertyChanging();
					this._PHeightCM = value;
					this.SendPropertyChanged("PHeightCM");
					this.OnPHeightCMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PWeightKG", DbType="SmallInt")]
		public System.Nullable<short> PWeightKG
		{
			get
			{
				return this._PWeightKG;
			}
			set
			{
				if ((this._PWeightKG != value))
				{
					this.OnPWeightKGChanging(value);
					this.SendPropertyChanging();
					this._PWeightKG = value;
					this.SendPropertyChanged("PWeightKG");
					this.OnPWeightKGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHipCM", DbType="SmallInt")]
		public System.Nullable<short> PHipCM
		{
			get
			{
				return this._PHipCM;
			}
			set
			{
				if ((this._PHipCM != value))
				{
					this.OnPHipCMChanging(value);
					this.SendPropertyChanging();
					this._PHipCM = value;
					this.SendPropertyChanged("PHipCM");
					this.OnPHipCMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PWaistCM", DbType="SmallInt")]
		public System.Nullable<short> PWaistCM
		{
			get
			{
				return this._PWaistCM;
			}
			set
			{
				if ((this._PWaistCM != value))
				{
					this.OnPWaistCMChanging(value);
					this.SendPropertyChanging();
					this._PWaistCM = value;
					this.SendPropertyChanged("PWaistCM");
					this.OnPWaistCMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorsName", DbType="SmallInt")]
		public System.Nullable<short> DoctorsName
		{
			get
			{
				return this._DoctorsName;
			}
			set
			{
				if ((this._DoctorsName != value))
				{
					this.OnDoctorsNameChanging(value);
					this.SendPropertyChanging();
					this._DoctorsName = value;
					this.SendPropertyChanged("DoctorsName");
					this.OnDoctorsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferredFrom", DbType="NVarChar(100)")]
		public string ReferredFrom
		{
			get
			{
				return this._ReferredFrom;
			}
			set
			{
				if ((this._ReferredFrom != value))
				{
					this.OnReferredFromChanging(value);
					this.SendPropertyChanging();
					this._ReferredFrom = value;
					this.SendPropertyChanged("ReferredFrom");
					this.OnReferredFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalBill", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> TotalBill
		{
			get
			{
				return this._TotalBill;
			}
			set
			{
				if ((this._TotalBill != value))
				{
					this.OnTotalBillChanging(value);
					this.SendPropertyChanging();
					this._TotalBill = value;
					this.SendPropertyChanged("TotalBill");
					this.OnTotalBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidDueBill", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> PaidDueBill
		{
			get
			{
				return this._PaidDueBill;
			}
			set
			{
				if ((this._PaidDueBill != value))
				{
					this.OnPaidDueBillChanging(value);
					this.SendPropertyChanging();
					this._PaidDueBill = value;
					this.SendPropertyChanged("PaidDueBill");
					this.OnPaidDueBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidBill", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> PaidBill
		{
			get
			{
				return this._PaidBill;
			}
			set
			{
				if ((this._PaidBill != value))
				{
					this.OnPaidBillChanging(value);
					this.SendPropertyChanging();
					this._PaidBill = value;
					this.SendPropertyChanged("PaidBill");
					this.OnPaidBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidYesNo", DbType="Bit")]
		public System.Nullable<bool> PaidYesNo
		{
			get
			{
				return this._PaidYesNo;
			}
			set
			{
				if ((this._PaidYesNo != value))
				{
					this.OnPaidYesNoChanging(value);
					this.SendPropertyChanging();
					this._PaidYesNo = value;
					this.SendPropertyChanged("PaidYesNo");
					this.OnPaidYesNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashRcvdDt", DbType="Date")]
		public System.Nullable<System.DateTime> CashRcvdDt
		{
			get
			{
				return this._CashRcvdDt;
			}
			set
			{
				if ((this._CashRcvdDt != value))
				{
					this.OnCashRcvdDtChanging(value);
					this.SendPropertyChanging();
					this._CashRcvdDt = value;
					this.SendPropertyChanged("CashRcvdDt");
					this.OnCashRcvdDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RptDelivered", DbType="Bit")]
		public System.Nullable<bool> RptDelivered
		{
			get
			{
				return this._RptDelivered;
			}
			set
			{
				if ((this._RptDelivered != value))
				{
					this.OnRptDeliveredChanging(value);
					this.SendPropertyChanging();
					this._RptDelivered = value;
					this.SendPropertyChanged("RptDelivered");
					this.OnRptDeliveredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RptDeliveredDt", DbType="Date")]
		public System.Nullable<System.DateTime> RptDeliveredDt
		{
			get
			{
				return this._RptDeliveredDt;
			}
			set
			{
				if ((this._RptDeliveredDt != value))
				{
					this.OnRptDeliveredDtChanging(value);
					this.SendPropertyChanging();
					this._RptDeliveredDt = value;
					this.SendPropertyChanged("RptDeliveredDt");
					this.OnRptDeliveredDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashRcvdBy", DbType="Int")]
		public System.Nullable<int> CashRcvdBy
		{
			get
			{
				return this._CashRcvdBy;
			}
			set
			{
				if ((this._CashRcvdBy != value))
				{
					this.OnCashRcvdByChanging(value);
					this.SendPropertyChanging();
					this._CashRcvdBy = value;
					this.SendPropertyChanged("CashRcvdBy");
					this.OnCashRcvdByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestInfo_TestInfoDetail", Storage="_TestInfoDetails", ThisKey="LabID", OtherKey="LabID")]
		public EntitySet<TestInfoDetail> TestInfoDetails
		{
			get
			{
				return this._TestInfoDetails;
			}
			set
			{
				this._TestInfoDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientBasicInfo_TestInfo", Storage="_PatientBasicInfo", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true, DeleteRule="CASCADE")]
		public PatientBasicInfo PatientBasicInfo
		{
			get
			{
				return this._PatientBasicInfo.Entity;
			}
			set
			{
				PatientBasicInfo previousValue = this._PatientBasicInfo.Entity;
				if (((previousValue != value) 
							|| (this._PatientBasicInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientBasicInfo.Entity = null;
						previousValue.TestInfos.Remove(this);
					}
					this._PatientBasicInfo.Entity = value;
					if ((value != null))
					{
						value.TestInfos.Add(this);
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(string);
					}
					this.SendPropertyChanged("PatientBasicInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestInfoDetails(TestInfoDetail entity)
		{
			this.SendPropertyChanging();
			entity.TestInfo = this;
		}
		
		private void detach_TestInfoDetails(TestInfoDetail entity)
		{
			this.SendPropertyChanging();
			entity.TestInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestInfoDetails")]
	public partial class TestInfoDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LabID;
		
		private short _TestCode;
		
		private System.Nullable<decimal> _TestFee;
		
		private System.Nullable<bool> _IsFree;
		
		private EntityRef<TestInfo> _TestInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabIDChanging(string value);
    partial void OnLabIDChanged();
    partial void OnTestCodeChanging(short value);
    partial void OnTestCodeChanged();
    partial void OnTestFeeChanging(System.Nullable<decimal> value);
    partial void OnTestFeeChanged();
    partial void OnIsFreeChanging(System.Nullable<bool> value);
    partial void OnIsFreeChanged();
    #endregion
		
		public TestInfoDetail()
		{
			this._TestInfo = default(EntityRef<TestInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabID", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LabID
		{
			get
			{
				return this._LabID;
			}
			set
			{
				if ((this._LabID != value))
				{
					if (this._TestInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabIDChanging(value);
					this.SendPropertyChanging();
					this._LabID = value;
					this.SendPropertyChanged("LabID");
					this.OnLabIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short TestCode
		{
			get
			{
				return this._TestCode;
			}
			set
			{
				if ((this._TestCode != value))
				{
					this.OnTestCodeChanging(value);
					this.SendPropertyChanging();
					this._TestCode = value;
					this.SendPropertyChanged("TestCode");
					this.OnTestCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestFee", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> TestFee
		{
			get
			{
				return this._TestFee;
			}
			set
			{
				if ((this._TestFee != value))
				{
					this.OnTestFeeChanging(value);
					this.SendPropertyChanging();
					this._TestFee = value;
					this.SendPropertyChanged("TestFee");
					this.OnTestFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFree", DbType="Bit")]
		public System.Nullable<bool> IsFree
		{
			get
			{
				return this._IsFree;
			}
			set
			{
				if ((this._IsFree != value))
				{
					this.OnIsFreeChanging(value);
					this.SendPropertyChanging();
					this._IsFree = value;
					this.SendPropertyChanged("IsFree");
					this.OnIsFreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestInfo_TestInfoDetail", Storage="_TestInfo", ThisKey="LabID", OtherKey="LabID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TestInfo TestInfo
		{
			get
			{
				return this._TestInfo.Entity;
			}
			set
			{
				TestInfo previousValue = this._TestInfo.Entity;
				if (((previousValue != value) 
							|| (this._TestInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestInfo.Entity = null;
						previousValue.TestInfoDetails.Remove(this);
					}
					this._TestInfo.Entity = value;
					if ((value != null))
					{
						value.TestInfoDetails.Add(this);
						this._LabID = value.LabID;
					}
					else
					{
						this._LabID = default(string);
					}
					this.SendPropertyChanged("TestInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_ChiefComplaince")]
	public partial class lkp_ChiefComplaince : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CCCode;
		
		private string _CCGroup;
		
		private string _CC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCCCodeChanging(short value);
    partial void OnCCCodeChanged();
    partial void OnCCGroupChanging(string value);
    partial void OnCCGroupChanged();
    partial void OnCCChanging(string value);
    partial void OnCCChanged();
    #endregion
		
		public lkp_ChiefComplaince()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short CCCode
		{
			get
			{
				return this._CCCode;
			}
			set
			{
				if ((this._CCCode != value))
				{
					this.OnCCCodeChanging(value);
					this.SendPropertyChanging();
					this._CCCode = value;
					this.SendPropertyChanged("CCCode");
					this.OnCCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCGroup", DbType="VarChar(50)")]
		public string CCGroup
		{
			get
			{
				return this._CCGroup;
			}
			set
			{
				if ((this._CCGroup != value))
				{
					this.OnCCGroupChanging(value);
					this.SendPropertyChanging();
					this._CCGroup = value;
					this.SendPropertyChanged("CCGroup");
					this.OnCCGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CC", DbType="VarChar(50)")]
		public string CC
		{
			get
			{
				return this._CC;
			}
			set
			{
				if ((this._CC != value))
				{
					this.OnCCChanging(value);
					this.SendPropertyChanging();
					this._CC = value;
					this.SendPropertyChanged("CC");
					this.OnCCChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_ProvisionalDx")]
	public partial class lkp_ProvisionalDx : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProvisionalDxCode;
		
		private string _ProvisionalGroup;
		
		private string _ProvisionalDx;
		
		private string _ICDCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvisionalDxCodeChanging(int value);
    partial void OnProvisionalDxCodeChanged();
    partial void OnProvisionalGroupChanging(string value);
    partial void OnProvisionalGroupChanged();
    partial void OnProvisionalDxChanging(string value);
    partial void OnProvisionalDxChanged();
    partial void OnICDCodeChanging(string value);
    partial void OnICDCodeChanged();
    #endregion
		
		public lkp_ProvisionalDx()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvisionalDxCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProvisionalDxCode
		{
			get
			{
				return this._ProvisionalDxCode;
			}
			set
			{
				if ((this._ProvisionalDxCode != value))
				{
					this.OnProvisionalDxCodeChanging(value);
					this.SendPropertyChanging();
					this._ProvisionalDxCode = value;
					this.SendPropertyChanged("ProvisionalDxCode");
					this.OnProvisionalDxCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvisionalGroup", DbType="VarChar(50)")]
		public string ProvisionalGroup
		{
			get
			{
				return this._ProvisionalGroup;
			}
			set
			{
				if ((this._ProvisionalGroup != value))
				{
					this.OnProvisionalGroupChanging(value);
					this.SendPropertyChanging();
					this._ProvisionalGroup = value;
					this.SendPropertyChanged("ProvisionalGroup");
					this.OnProvisionalGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvisionalDx", DbType="VarChar(100)")]
		public string ProvisionalDx
		{
			get
			{
				return this._ProvisionalDx;
			}
			set
			{
				if ((this._ProvisionalDx != value))
				{
					this.OnProvisionalDxChanging(value);
					this.SendPropertyChanging();
					this._ProvisionalDx = value;
					this.SendPropertyChanged("ProvisionalDx");
					this.OnProvisionalDxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICDCode", DbType="VarChar(20)")]
		public string ICDCode
		{
			get
			{
				return this._ICDCode;
			}
			set
			{
				if ((this._ICDCode != value))
				{
					this.OnICDCodeChanging(value);
					this.SendPropertyChanging();
					this._ICDCode = value;
					this.SendPropertyChanged("ICDCode");
					this.OnICDCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_MedicineName")]
	public partial class lkp_MedicineName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _MedicineCode;
		
		private string _TradeName;
		
		private System.Nullable<short> _GenericNameCode;
		
		private string _MedicineForm;
		
		private System.Nullable<int> _Strength;
		
		private string _StrengthType;
		
		private System.Nullable<decimal> _MedicinePrice;
		
		private byte _UnitType;
		
		private int _PerUnit;
		
		private System.Nullable<int> _StockInHand;
		
		private System.Nullable<short> _MedReorderPoint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicineCodeChanging(short value);
    partial void OnMedicineCodeChanged();
    partial void OnTradeNameChanging(string value);
    partial void OnTradeNameChanged();
    partial void OnGenericNameCodeChanging(System.Nullable<short> value);
    partial void OnGenericNameCodeChanged();
    partial void OnMedicineFormChanging(string value);
    partial void OnMedicineFormChanged();
    partial void OnStrengthChanging(System.Nullable<int> value);
    partial void OnStrengthChanged();
    partial void OnStrengthTypeChanging(string value);
    partial void OnStrengthTypeChanged();
    partial void OnMedicinePriceChanging(System.Nullable<decimal> value);
    partial void OnMedicinePriceChanged();
    partial void OnUnitTypeChanging(byte value);
    partial void OnUnitTypeChanged();
    partial void OnPerUnitChanging(int value);
    partial void OnPerUnitChanged();
    partial void OnStockInHandChanging(System.Nullable<int> value);
    partial void OnStockInHandChanged();
    partial void OnMedReorderPointChanging(System.Nullable<short> value);
    partial void OnMedReorderPointChanged();
    #endregion
		
		public lkp_MedicineName()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MedicineCode
		{
			get
			{
				return this._MedicineCode;
			}
			set
			{
				if ((this._MedicineCode != value))
				{
					this.OnMedicineCodeChanging(value);
					this.SendPropertyChanging();
					this._MedicineCode = value;
					this.SendPropertyChanged("MedicineCode");
					this.OnMedicineCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeName", DbType="NVarChar(50)")]
		public string TradeName
		{
			get
			{
				return this._TradeName;
			}
			set
			{
				if ((this._TradeName != value))
				{
					this.OnTradeNameChanging(value);
					this.SendPropertyChanging();
					this._TradeName = value;
					this.SendPropertyChanged("TradeName");
					this.OnTradeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenericNameCode", DbType="SmallInt")]
		public System.Nullable<short> GenericNameCode
		{
			get
			{
				return this._GenericNameCode;
			}
			set
			{
				if ((this._GenericNameCode != value))
				{
					this.OnGenericNameCodeChanging(value);
					this.SendPropertyChanging();
					this._GenericNameCode = value;
					this.SendPropertyChanged("GenericNameCode");
					this.OnGenericNameCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineForm", DbType="VarChar(20)")]
		public string MedicineForm
		{
			get
			{
				return this._MedicineForm;
			}
			set
			{
				if ((this._MedicineForm != value))
				{
					this.OnMedicineFormChanging(value);
					this.SendPropertyChanging();
					this._MedicineForm = value;
					this.SendPropertyChanged("MedicineForm");
					this.OnMedicineFormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Strength", DbType="Int")]
		public System.Nullable<int> Strength
		{
			get
			{
				return this._Strength;
			}
			set
			{
				if ((this._Strength != value))
				{
					this.OnStrengthChanging(value);
					this.SendPropertyChanging();
					this._Strength = value;
					this.SendPropertyChanged("Strength");
					this.OnStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrengthType", DbType="VarChar(10)")]
		public string StrengthType
		{
			get
			{
				return this._StrengthType;
			}
			set
			{
				if ((this._StrengthType != value))
				{
					this.OnStrengthTypeChanging(value);
					this.SendPropertyChanging();
					this._StrengthType = value;
					this.SendPropertyChanged("StrengthType");
					this.OnStrengthTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicinePrice", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> MedicinePrice
		{
			get
			{
				return this._MedicinePrice;
			}
			set
			{
				if ((this._MedicinePrice != value))
				{
					this.OnMedicinePriceChanging(value);
					this.SendPropertyChanging();
					this._MedicinePrice = value;
					this.SendPropertyChanged("MedicinePrice");
					this.OnMedicinePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitType", DbType="TinyInt NOT NULL")]
		public byte UnitType
		{
			get
			{
				return this._UnitType;
			}
			set
			{
				if ((this._UnitType != value))
				{
					this.OnUnitTypeChanging(value);
					this.SendPropertyChanging();
					this._UnitType = value;
					this.SendPropertyChanged("UnitType");
					this.OnUnitTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerUnit", DbType="Int NOT NULL")]
		public int PerUnit
		{
			get
			{
				return this._PerUnit;
			}
			set
			{
				if ((this._PerUnit != value))
				{
					this.OnPerUnitChanging(value);
					this.SendPropertyChanging();
					this._PerUnit = value;
					this.SendPropertyChanged("PerUnit");
					this.OnPerUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockInHand", DbType="Int")]
		public System.Nullable<int> StockInHand
		{
			get
			{
				return this._StockInHand;
			}
			set
			{
				if ((this._StockInHand != value))
				{
					this.OnStockInHandChanging(value);
					this.SendPropertyChanging();
					this._StockInHand = value;
					this.SendPropertyChanged("StockInHand");
					this.OnStockInHandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedReorderPoint", DbType="SmallInt")]
		public System.Nullable<short> MedReorderPoint
		{
			get
			{
				return this._MedReorderPoint;
			}
			set
			{
				if ((this._MedReorderPoint != value))
				{
					this.OnMedReorderPointChanging(value);
					this.SendPropertyChanging();
					this._MedReorderPoint = value;
					this.SendPropertyChanged("MedReorderPoint");
					this.OnMedReorderPointChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Frequency")]
	public partial class lkp_Frequency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _FrequencyCode;
		
		private string _FrequencyType;
		
		private System.Nullable<decimal> _MedicineCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFrequencyCodeChanging(short value);
    partial void OnFrequencyCodeChanged();
    partial void OnFrequencyTypeChanging(string value);
    partial void OnFrequencyTypeChanged();
    partial void OnMedicineCountChanging(System.Nullable<decimal> value);
    partial void OnMedicineCountChanged();
    #endregion
		
		public lkp_Frequency()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FrequencyCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short FrequencyCode
		{
			get
			{
				return this._FrequencyCode;
			}
			set
			{
				if ((this._FrequencyCode != value))
				{
					this.OnFrequencyCodeChanging(value);
					this.SendPropertyChanging();
					this._FrequencyCode = value;
					this.SendPropertyChanged("FrequencyCode");
					this.OnFrequencyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FrequencyType", DbType="VarChar(50)")]
		public string FrequencyType
		{
			get
			{
				return this._FrequencyType;
			}
			set
			{
				if ((this._FrequencyType != value))
				{
					this.OnFrequencyTypeChanging(value);
					this.SendPropertyChanging();
					this._FrequencyType = value;
					this.SendPropertyChanged("FrequencyType");
					this.OnFrequencyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineCount", DbType="Decimal(5,1)")]
		public System.Nullable<decimal> MedicineCount
		{
			get
			{
				return this._MedicineCount;
			}
			set
			{
				if ((this._MedicineCount != value))
				{
					this.OnMedicineCountChanging(value);
					this.SendPropertyChanging();
					this._MedicineCount = value;
					this.SendPropertyChanged("MedicineCount");
					this.OnMedicineCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Treatment")]
	public partial class lkp_Treatment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _TreatmentCode;
		
		private string _Treatment;
		
		private string _TreatmentBangla;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTreatmentCodeChanging(byte value);
    partial void OnTreatmentCodeChanged();
    partial void OnTreatmentChanging(string value);
    partial void OnTreatmentChanged();
    partial void OnTreatmentBanglaChanging(string value);
    partial void OnTreatmentBanglaChanged();
    #endregion
		
		public lkp_Treatment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatmentCode", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte TreatmentCode
		{
			get
			{
				return this._TreatmentCode;
			}
			set
			{
				if ((this._TreatmentCode != value))
				{
					this.OnTreatmentCodeChanging(value);
					this.SendPropertyChanging();
					this._TreatmentCode = value;
					this.SendPropertyChanged("TreatmentCode");
					this.OnTreatmentCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Treatment", DbType="VarChar(100)")]
		public string Treatment
		{
			get
			{
				return this._Treatment;
			}
			set
			{
				if ((this._Treatment != value))
				{
					this.OnTreatmentChanging(value);
					this.SendPropertyChanging();
					this._Treatment = value;
					this.SendPropertyChanged("Treatment");
					this.OnTreatmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatmentBangla", DbType="VarChar(100)")]
		public string TreatmentBangla
		{
			get
			{
				return this._TreatmentBangla;
			}
			set
			{
				if ((this._TreatmentBangla != value))
				{
					this.OnTreatmentBanglaChanging(value);
					this.SendPropertyChanging();
					this._TreatmentBangla = value;
					this.SendPropertyChanged("TreatmentBangla");
					this.OnTreatmentBanglaChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Investigations")]
	public partial class lkp_Investigation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _InvestigationCode;
		
		private string _Investigation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvestigationCodeChanging(short value);
    partial void OnInvestigationCodeChanged();
    partial void OnInvestigationChanging(string value);
    partial void OnInvestigationChanged();
    #endregion
		
		public lkp_Investigation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvestigationCode", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short InvestigationCode
		{
			get
			{
				return this._InvestigationCode;
			}
			set
			{
				if ((this._InvestigationCode != value))
				{
					this.OnInvestigationCodeChanging(value);
					this.SendPropertyChanging();
					this._InvestigationCode = value;
					this.SendPropertyChanged("InvestigationCode");
					this.OnInvestigationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Investigation", DbType="NVarChar(100)")]
		public string Investigation
		{
			get
			{
				return this._Investigation;
			}
			set
			{
				if ((this._Investigation != value))
				{
					this.OnInvestigationChanging(value);
					this.SendPropertyChanging();
					this._Investigation = value;
					this.SendPropertyChanged("Investigation");
					this.OnInvestigationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_NegativeFindings")]
	public partial class lkp_NegativeFinding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _NegativeCode;
		
		private string _NegativeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNegativeCodeChanging(short value);
    partial void OnNegativeCodeChanged();
    partial void OnNegativeTypeChanging(string value);
    partial void OnNegativeTypeChanged();
    #endregion
		
		public lkp_NegativeFinding()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NegativeCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short NegativeCode
		{
			get
			{
				return this._NegativeCode;
			}
			set
			{
				if ((this._NegativeCode != value))
				{
					this.OnNegativeCodeChanging(value);
					this.SendPropertyChanging();
					this._NegativeCode = value;
					this.SendPropertyChanged("NegativeCode");
					this.OnNegativeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NegativeType", DbType="VarChar(50)")]
		public string NegativeType
		{
			get
			{
				return this._NegativeType;
			}
			set
			{
				if ((this._NegativeType != value))
				{
					this.OnNegativeTypeChanging(value);
					this.SendPropertyChanging();
					this._NegativeType = value;
					this.SendPropertyChanged("NegativeType");
					this.OnNegativeTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_PositiveFindings")]
	public partial class lkp_PositiveFinding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PositiveCode;
		
		private string _PositiveType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPositiveCodeChanging(short value);
    partial void OnPositiveCodeChanged();
    partial void OnPositiveTypeChanging(string value);
    partial void OnPositiveTypeChanged();
    #endregion
		
		public lkp_PositiveFinding()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositiveCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PositiveCode
		{
			get
			{
				return this._PositiveCode;
			}
			set
			{
				if ((this._PositiveCode != value))
				{
					this.OnPositiveCodeChanging(value);
					this.SendPropertyChanging();
					this._PositiveCode = value;
					this.SendPropertyChanged("PositiveCode");
					this.OnPositiveCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositiveType", DbType="VarChar(50)")]
		public string PositiveType
		{
			get
			{
				return this._PositiveType;
			}
			set
			{
				if ((this._PositiveType != value))
				{
					this.OnPositiveTypeChanging(value);
					this.SendPropertyChanging();
					this._PositiveType = value;
					this.SendPropertyChanged("PositiveType");
					this.OnPositiveTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_DentalSign")]
	public partial class lkp_DentalSign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DenSignCode;
		
		private string _DenSignType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDenSignCodeChanging(int value);
    partial void OnDenSignCodeChanged();
    partial void OnDenSignTypeChanging(string value);
    partial void OnDenSignTypeChanged();
    #endregion
		
		public lkp_DentalSign()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DenSignCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DenSignCode
		{
			get
			{
				return this._DenSignCode;
			}
			set
			{
				if ((this._DenSignCode != value))
				{
					this.OnDenSignCodeChanging(value);
					this.SendPropertyChanging();
					this._DenSignCode = value;
					this.SendPropertyChanged("DenSignCode");
					this.OnDenSignCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DenSignType", DbType="NVarChar(50)")]
		public string DenSignType
		{
			get
			{
				return this._DenSignType;
			}
			set
			{
				if ((this._DenSignType != value))
				{
					this.OnDenSignTypeChanging(value);
					this.SendPropertyChanging();
					this._DenSignType = value;
					this.SendPropertyChanged("DenSignType");
					this.OnDenSignTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_DentalAdvice")]
	public partial class lkp_DentalAdvice
	{
		
		private int _DenAdviceCode;
		
		private string _DenAdviceType;
		
		public lkp_DentalAdvice()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DenAdviceCode", DbType="Int NOT NULL")]
		public int DenAdviceCode
		{
			get
			{
				return this._DenAdviceCode;
			}
			set
			{
				if ((this._DenAdviceCode != value))
				{
					this._DenAdviceCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DenAdviceType", DbType="NVarChar(50)")]
		public string DenAdviceType
		{
			get
			{
				return this._DenAdviceType;
			}
			set
			{
				if ((this._DenAdviceType != value))
				{
					this._DenAdviceType = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_DoctorsName")]
	public partial class lkp_DoctorsName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _DoctorCode;
		
		private string _DoctorsName;
		
		private string _DoctorDesignation;
		
		private System.Nullable<short> _DoctorsFee;
		
		private System.Nullable<bool> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctorCodeChanging(short value);
    partial void OnDoctorCodeChanged();
    partial void OnDoctorsNameChanging(string value);
    partial void OnDoctorsNameChanged();
    partial void OnDoctorDesignationChanging(string value);
    partial void OnDoctorDesignationChanged();
    partial void OnDoctorsFeeChanging(System.Nullable<short> value);
    partial void OnDoctorsFeeChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public lkp_DoctorsName()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short DoctorCode
		{
			get
			{
				return this._DoctorCode;
			}
			set
			{
				if ((this._DoctorCode != value))
				{
					this.OnDoctorCodeChanging(value);
					this.SendPropertyChanging();
					this._DoctorCode = value;
					this.SendPropertyChanged("DoctorCode");
					this.OnDoctorCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorsName", DbType="NVarChar(50)")]
		public string DoctorsName
		{
			get
			{
				return this._DoctorsName;
			}
			set
			{
				if ((this._DoctorsName != value))
				{
					this.OnDoctorsNameChanging(value);
					this.SendPropertyChanging();
					this._DoctorsName = value;
					this.SendPropertyChanged("DoctorsName");
					this.OnDoctorsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorDesignation", DbType="NVarChar(200)")]
		public string DoctorDesignation
		{
			get
			{
				return this._DoctorDesignation;
			}
			set
			{
				if ((this._DoctorDesignation != value))
				{
					this.OnDoctorDesignationChanging(value);
					this.SendPropertyChanging();
					this._DoctorDesignation = value;
					this.SendPropertyChanged("DoctorDesignation");
					this.OnDoctorDesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorsFee", DbType="SmallInt")]
		public System.Nullable<short> DoctorsFee
		{
			get
			{
				return this._DoctorsFee;
			}
			set
			{
				if ((this._DoctorsFee != value))
				{
					this.OnDoctorsFeeChanging(value);
					this.SendPropertyChanging();
					this._DoctorsFee = value;
					this.SendPropertyChanged("DoctorsFee");
					this.OnDoctorsFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_AdviceBangla")]
	public partial class lkp_AdviceBangla : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdviceCode;
		
		private string _Advice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdviceCodeChanging(int value);
    partial void OnAdviceCodeChanged();
    partial void OnAdviceChanging(string value);
    partial void OnAdviceChanged();
    #endregion
		
		public lkp_AdviceBangla()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdviceCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdviceCode
		{
			get
			{
				return this._AdviceCode;
			}
			set
			{
				if ((this._AdviceCode != value))
				{
					this.OnAdviceCodeChanging(value);
					this.SendPropertyChanging();
					this._AdviceCode = value;
					this.SendPropertyChanged("AdviceCode");
					this.OnAdviceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Advice", DbType="VarChar(150)")]
		public string Advice
		{
			get
			{
				return this._Advice;
			}
			set
			{
				if ((this._Advice != value))
				{
					this.OnAdviceChanging(value);
					this.SendPropertyChanging();
					this._Advice = value;
					this.SendPropertyChanged("Advice");
					this.OnAdviceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClinicVisitHistory")]
	public partial class ClinicVisitHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClinicVisitID;
		
		private System.Nullable<System.DateTime> _VisitDate;
		
		private string _PatientID;
		
		private System.Nullable<byte> _Relations;
		
		private System.Nullable<byte> _PatientAge;
		
		private System.Nullable<byte> _ChildAge;
		
		private string _DrugHistory;
		
		private System.Nullable<short> _DrugAllergy;
		
		private System.Nullable<byte> _ExaAnemia;
		
		private System.Nullable<byte> _ExaJaundice;
		
		private System.Nullable<byte> _ExaClubbing;
		
		private System.Nullable<byte> _ExaOedema;
		
		private System.Nullable<byte> _ExaL_N;
		
		private string _ExaHeart;
		
		private string _ExaLung;
		
		private System.Nullable<byte> _ExaLiver;
		
		private System.Nullable<byte> _ExaSpleen;
		
		private string _ExaOthers;
		
		private System.Nullable<short> _ExaSystolic;
		
		private System.Nullable<short> _ExaDiastolic;
		
		private System.Nullable<byte> _ExaPulse;
		
		private System.Nullable<short> _ExaTemp;
		
		private System.Nullable<byte> _ExaWt;
		
		private string _ExaVulva;
		
		private string _ExaVagina;
		
		private string _ExaOS;
		
		private System.Nullable<short> _ExaCervix;
		
		private System.Nullable<int> _ReferredCode;
		
		private System.Nullable<short> _DoctorCode1;
		
		private System.Nullable<short> _DoctorCode2;
		
		private System.Nullable<System.DateTime> _NextVisitDt;
		
		private System.Nullable<System.DateTime> _EntryDate;
		
		private EntitySet<MedicineDetail> _MedicineDetails;
		
		private EntitySet<PositiveFinding> _PositiveFindings;
		
		private EntitySet<NegativeFinding> _NegativeFindings;
		
		private EntitySet<ChiefComplaince> _ChiefComplainces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClinicVisitIDChanging(int value);
    partial void OnClinicVisitIDChanged();
    partial void OnVisitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVisitDateChanged();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnRelationsChanging(System.Nullable<byte> value);
    partial void OnRelationsChanged();
    partial void OnPatientAgeChanging(System.Nullable<byte> value);
    partial void OnPatientAgeChanged();
    partial void OnChildAgeChanging(System.Nullable<byte> value);
    partial void OnChildAgeChanged();
    partial void OnDrugHistoryChanging(string value);
    partial void OnDrugHistoryChanged();
    partial void OnDrugAllergyChanging(System.Nullable<short> value);
    partial void OnDrugAllergyChanged();
    partial void OnExaAnemiaChanging(System.Nullable<byte> value);
    partial void OnExaAnemiaChanged();
    partial void OnExaJaundiceChanging(System.Nullable<byte> value);
    partial void OnExaJaundiceChanged();
    partial void OnExaClubbingChanging(System.Nullable<byte> value);
    partial void OnExaClubbingChanged();
    partial void OnExaOedemaChanging(System.Nullable<byte> value);
    partial void OnExaOedemaChanged();
    partial void OnExaL_NChanging(System.Nullable<byte> value);
    partial void OnExaL_NChanged();
    partial void OnExaHeartChanging(string value);
    partial void OnExaHeartChanged();
    partial void OnExaLungChanging(string value);
    partial void OnExaLungChanged();
    partial void OnExaLiverChanging(System.Nullable<byte> value);
    partial void OnExaLiverChanged();
    partial void OnExaSpleenChanging(System.Nullable<byte> value);
    partial void OnExaSpleenChanged();
    partial void OnExaOthersChanging(string value);
    partial void OnExaOthersChanged();
    partial void OnExaSystolicChanging(System.Nullable<short> value);
    partial void OnExaSystolicChanged();
    partial void OnExaDiastolicChanging(System.Nullable<short> value);
    partial void OnExaDiastolicChanged();
    partial void OnExaPulseChanging(System.Nullable<byte> value);
    partial void OnExaPulseChanged();
    partial void OnExaTempChanging(System.Nullable<short> value);
    partial void OnExaTempChanged();
    partial void OnExaWtChanging(System.Nullable<byte> value);
    partial void OnExaWtChanged();
    partial void OnExaVulvaChanging(string value);
    partial void OnExaVulvaChanged();
    partial void OnExaVaginaChanging(string value);
    partial void OnExaVaginaChanged();
    partial void OnExaOSChanging(string value);
    partial void OnExaOSChanged();
    partial void OnExaCervixChanging(System.Nullable<short> value);
    partial void OnExaCervixChanged();
    partial void OnReferredCodeChanging(System.Nullable<int> value);
    partial void OnReferredCodeChanged();
    partial void OnDoctorCode1Changing(System.Nullable<short> value);
    partial void OnDoctorCode1Changed();
    partial void OnDoctorCode2Changing(System.Nullable<short> value);
    partial void OnDoctorCode2Changed();
    partial void OnNextVisitDtChanging(System.Nullable<System.DateTime> value);
    partial void OnNextVisitDtChanged();
    partial void OnEntryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntryDateChanged();
    #endregion
		
		public ClinicVisitHistory()
		{
			this._MedicineDetails = new EntitySet<MedicineDetail>(new Action<MedicineDetail>(this.attach_MedicineDetails), new Action<MedicineDetail>(this.detach_MedicineDetails));
			this._PositiveFindings = new EntitySet<PositiveFinding>(new Action<PositiveFinding>(this.attach_PositiveFindings), new Action<PositiveFinding>(this.detach_PositiveFindings));
			this._NegativeFindings = new EntitySet<NegativeFinding>(new Action<NegativeFinding>(this.attach_NegativeFindings), new Action<NegativeFinding>(this.detach_NegativeFindings));
			this._ChiefComplainces = new EntitySet<ChiefComplaince>(new Action<ChiefComplaince>(this.attach_ChiefComplainces), new Action<ChiefComplaince>(this.detach_ChiefComplainces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicVisitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClinicVisitID
		{
			get
			{
				return this._ClinicVisitID;
			}
			set
			{
				if ((this._ClinicVisitID != value))
				{
					this.OnClinicVisitIDChanging(value);
					this.SendPropertyChanging();
					this._ClinicVisitID = value;
					this.SendPropertyChanged("ClinicVisitID");
					this.OnClinicVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitDate", DbType="Date")]
		public System.Nullable<System.DateTime> VisitDate
		{
			get
			{
				return this._VisitDate;
			}
			set
			{
				if ((this._VisitDate != value))
				{
					this.OnVisitDateChanging(value);
					this.SendPropertyChanging();
					this._VisitDate = value;
					this.SendPropertyChanged("VisitDate");
					this.OnVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="VarChar(11)")]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Relations", DbType="TinyInt")]
		public System.Nullable<byte> Relations
		{
			get
			{
				return this._Relations;
			}
			set
			{
				if ((this._Relations != value))
				{
					this.OnRelationsChanging(value);
					this.SendPropertyChanging();
					this._Relations = value;
					this.SendPropertyChanged("Relations");
					this.OnRelationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientAge", DbType="TinyInt")]
		public System.Nullable<byte> PatientAge
		{
			get
			{
				return this._PatientAge;
			}
			set
			{
				if ((this._PatientAge != value))
				{
					this.OnPatientAgeChanging(value);
					this.SendPropertyChanging();
					this._PatientAge = value;
					this.SendPropertyChanged("PatientAge");
					this.OnPatientAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildAge", DbType="TinyInt")]
		public System.Nullable<byte> ChildAge
		{
			get
			{
				return this._ChildAge;
			}
			set
			{
				if ((this._ChildAge != value))
				{
					this.OnChildAgeChanging(value);
					this.SendPropertyChanging();
					this._ChildAge = value;
					this.SendPropertyChanged("ChildAge");
					this.OnChildAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugHistory", DbType="NVarChar(100)")]
		public string DrugHistory
		{
			get
			{
				return this._DrugHistory;
			}
			set
			{
				if ((this._DrugHistory != value))
				{
					this.OnDrugHistoryChanging(value);
					this.SendPropertyChanging();
					this._DrugHistory = value;
					this.SendPropertyChanged("DrugHistory");
					this.OnDrugHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugAllergy", DbType="SmallInt")]
		public System.Nullable<short> DrugAllergy
		{
			get
			{
				return this._DrugAllergy;
			}
			set
			{
				if ((this._DrugAllergy != value))
				{
					this.OnDrugAllergyChanging(value);
					this.SendPropertyChanging();
					this._DrugAllergy = value;
					this.SendPropertyChanged("DrugAllergy");
					this.OnDrugAllergyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaAnemia", DbType="TinyInt")]
		public System.Nullable<byte> ExaAnemia
		{
			get
			{
				return this._ExaAnemia;
			}
			set
			{
				if ((this._ExaAnemia != value))
				{
					this.OnExaAnemiaChanging(value);
					this.SendPropertyChanging();
					this._ExaAnemia = value;
					this.SendPropertyChanged("ExaAnemia");
					this.OnExaAnemiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaJaundice", DbType="TinyInt")]
		public System.Nullable<byte> ExaJaundice
		{
			get
			{
				return this._ExaJaundice;
			}
			set
			{
				if ((this._ExaJaundice != value))
				{
					this.OnExaJaundiceChanging(value);
					this.SendPropertyChanging();
					this._ExaJaundice = value;
					this.SendPropertyChanged("ExaJaundice");
					this.OnExaJaundiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaClubbing", DbType="TinyInt")]
		public System.Nullable<byte> ExaClubbing
		{
			get
			{
				return this._ExaClubbing;
			}
			set
			{
				if ((this._ExaClubbing != value))
				{
					this.OnExaClubbingChanging(value);
					this.SendPropertyChanging();
					this._ExaClubbing = value;
					this.SendPropertyChanged("ExaClubbing");
					this.OnExaClubbingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaOedema", DbType="TinyInt")]
		public System.Nullable<byte> ExaOedema
		{
			get
			{
				return this._ExaOedema;
			}
			set
			{
				if ((this._ExaOedema != value))
				{
					this.OnExaOedemaChanging(value);
					this.SendPropertyChanging();
					this._ExaOedema = value;
					this.SendPropertyChanged("ExaOedema");
					this.OnExaOedemaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaL_N", DbType="TinyInt")]
		public System.Nullable<byte> ExaL_N
		{
			get
			{
				return this._ExaL_N;
			}
			set
			{
				if ((this._ExaL_N != value))
				{
					this.OnExaL_NChanging(value);
					this.SendPropertyChanging();
					this._ExaL_N = value;
					this.SendPropertyChanged("ExaL_N");
					this.OnExaL_NChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaHeart", DbType="NVarChar(50)")]
		public string ExaHeart
		{
			get
			{
				return this._ExaHeart;
			}
			set
			{
				if ((this._ExaHeart != value))
				{
					this.OnExaHeartChanging(value);
					this.SendPropertyChanging();
					this._ExaHeart = value;
					this.SendPropertyChanged("ExaHeart");
					this.OnExaHeartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaLung", DbType="NVarChar(50)")]
		public string ExaLung
		{
			get
			{
				return this._ExaLung;
			}
			set
			{
				if ((this._ExaLung != value))
				{
					this.OnExaLungChanging(value);
					this.SendPropertyChanging();
					this._ExaLung = value;
					this.SendPropertyChanged("ExaLung");
					this.OnExaLungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaLiver", DbType="TinyInt")]
		public System.Nullable<byte> ExaLiver
		{
			get
			{
				return this._ExaLiver;
			}
			set
			{
				if ((this._ExaLiver != value))
				{
					this.OnExaLiverChanging(value);
					this.SendPropertyChanging();
					this._ExaLiver = value;
					this.SendPropertyChanged("ExaLiver");
					this.OnExaLiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaSpleen", DbType="TinyInt")]
		public System.Nullable<byte> ExaSpleen
		{
			get
			{
				return this._ExaSpleen;
			}
			set
			{
				if ((this._ExaSpleen != value))
				{
					this.OnExaSpleenChanging(value);
					this.SendPropertyChanging();
					this._ExaSpleen = value;
					this.SendPropertyChanged("ExaSpleen");
					this.OnExaSpleenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaOthers", DbType="NVarChar(50)")]
		public string ExaOthers
		{
			get
			{
				return this._ExaOthers;
			}
			set
			{
				if ((this._ExaOthers != value))
				{
					this.OnExaOthersChanging(value);
					this.SendPropertyChanging();
					this._ExaOthers = value;
					this.SendPropertyChanged("ExaOthers");
					this.OnExaOthersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaSystolic", DbType="SmallInt")]
		public System.Nullable<short> ExaSystolic
		{
			get
			{
				return this._ExaSystolic;
			}
			set
			{
				if ((this._ExaSystolic != value))
				{
					this.OnExaSystolicChanging(value);
					this.SendPropertyChanging();
					this._ExaSystolic = value;
					this.SendPropertyChanged("ExaSystolic");
					this.OnExaSystolicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaDiastolic", DbType="SmallInt")]
		public System.Nullable<short> ExaDiastolic
		{
			get
			{
				return this._ExaDiastolic;
			}
			set
			{
				if ((this._ExaDiastolic != value))
				{
					this.OnExaDiastolicChanging(value);
					this.SendPropertyChanging();
					this._ExaDiastolic = value;
					this.SendPropertyChanged("ExaDiastolic");
					this.OnExaDiastolicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaPulse", DbType="TinyInt")]
		public System.Nullable<byte> ExaPulse
		{
			get
			{
				return this._ExaPulse;
			}
			set
			{
				if ((this._ExaPulse != value))
				{
					this.OnExaPulseChanging(value);
					this.SendPropertyChanging();
					this._ExaPulse = value;
					this.SendPropertyChanged("ExaPulse");
					this.OnExaPulseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaTemp", DbType="SmallInt")]
		public System.Nullable<short> ExaTemp
		{
			get
			{
				return this._ExaTemp;
			}
			set
			{
				if ((this._ExaTemp != value))
				{
					this.OnExaTempChanging(value);
					this.SendPropertyChanging();
					this._ExaTemp = value;
					this.SendPropertyChanged("ExaTemp");
					this.OnExaTempChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaWt", DbType="TinyInt")]
		public System.Nullable<byte> ExaWt
		{
			get
			{
				return this._ExaWt;
			}
			set
			{
				if ((this._ExaWt != value))
				{
					this.OnExaWtChanging(value);
					this.SendPropertyChanging();
					this._ExaWt = value;
					this.SendPropertyChanged("ExaWt");
					this.OnExaWtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaVulva", DbType="NVarChar(7)")]
		public string ExaVulva
		{
			get
			{
				return this._ExaVulva;
			}
			set
			{
				if ((this._ExaVulva != value))
				{
					this.OnExaVulvaChanging(value);
					this.SendPropertyChanging();
					this._ExaVulva = value;
					this.SendPropertyChanged("ExaVulva");
					this.OnExaVulvaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaVagina", DbType="NVarChar(7)")]
		public string ExaVagina
		{
			get
			{
				return this._ExaVagina;
			}
			set
			{
				if ((this._ExaVagina != value))
				{
					this.OnExaVaginaChanging(value);
					this.SendPropertyChanging();
					this._ExaVagina = value;
					this.SendPropertyChanged("ExaVagina");
					this.OnExaVaginaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaOS", DbType="NVarChar(7)")]
		public string ExaOS
		{
			get
			{
				return this._ExaOS;
			}
			set
			{
				if ((this._ExaOS != value))
				{
					this.OnExaOSChanging(value);
					this.SendPropertyChanging();
					this._ExaOS = value;
					this.SendPropertyChanged("ExaOS");
					this.OnExaOSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaCervix", DbType="SmallInt")]
		public System.Nullable<short> ExaCervix
		{
			get
			{
				return this._ExaCervix;
			}
			set
			{
				if ((this._ExaCervix != value))
				{
					this.OnExaCervixChanging(value);
					this.SendPropertyChanging();
					this._ExaCervix = value;
					this.SendPropertyChanged("ExaCervix");
					this.OnExaCervixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferredCode", DbType="Int")]
		public System.Nullable<int> ReferredCode
		{
			get
			{
				return this._ReferredCode;
			}
			set
			{
				if ((this._ReferredCode != value))
				{
					this.OnReferredCodeChanging(value);
					this.SendPropertyChanging();
					this._ReferredCode = value;
					this.SendPropertyChanged("ReferredCode");
					this.OnReferredCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorCode1", DbType="SmallInt")]
		public System.Nullable<short> DoctorCode1
		{
			get
			{
				return this._DoctorCode1;
			}
			set
			{
				if ((this._DoctorCode1 != value))
				{
					this.OnDoctorCode1Changing(value);
					this.SendPropertyChanging();
					this._DoctorCode1 = value;
					this.SendPropertyChanged("DoctorCode1");
					this.OnDoctorCode1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorCode2", DbType="SmallInt")]
		public System.Nullable<short> DoctorCode2
		{
			get
			{
				return this._DoctorCode2;
			}
			set
			{
				if ((this._DoctorCode2 != value))
				{
					this.OnDoctorCode2Changing(value);
					this.SendPropertyChanging();
					this._DoctorCode2 = value;
					this.SendPropertyChanged("DoctorCode2");
					this.OnDoctorCode2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextVisitDt", DbType="Date")]
		public System.Nullable<System.DateTime> NextVisitDt
		{
			get
			{
				return this._NextVisitDt;
			}
			set
			{
				if ((this._NextVisitDt != value))
				{
					this.OnNextVisitDtChanging(value);
					this.SendPropertyChanging();
					this._NextVisitDt = value;
					this.SendPropertyChanged("NextVisitDt");
					this.OnNextVisitDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="Date")]
		public System.Nullable<System.DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_MedicineDetail", Storage="_MedicineDetails", ThisKey="ClinicVisitID", OtherKey="VisitID")]
		public EntitySet<MedicineDetail> MedicineDetails
		{
			get
			{
				return this._MedicineDetails;
			}
			set
			{
				this._MedicineDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_PositiveFinding", Storage="_PositiveFindings", ThisKey="ClinicVisitID", OtherKey="ClinicVisitID")]
		public EntitySet<PositiveFinding> PositiveFindings
		{
			get
			{
				return this._PositiveFindings;
			}
			set
			{
				this._PositiveFindings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_NegativeFinding", Storage="_NegativeFindings", ThisKey="ClinicVisitID", OtherKey="ClinicVisitID")]
		public EntitySet<NegativeFinding> NegativeFindings
		{
			get
			{
				return this._NegativeFindings;
			}
			set
			{
				this._NegativeFindings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_ChiefComplaince", Storage="_ChiefComplainces", ThisKey="ClinicVisitID", OtherKey="VisitID")]
		public EntitySet<ChiefComplaince> ChiefComplainces
		{
			get
			{
				return this._ChiefComplainces;
			}
			set
			{
				this._ChiefComplainces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_PositiveFindings(PositiveFinding entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_PositiveFindings(PositiveFinding entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_NegativeFindings(NegativeFinding entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_NegativeFindings(NegativeFinding entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
		
		private void attach_ChiefComplainces(ChiefComplaince entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = this;
		}
		
		private void detach_ChiefComplainces(ChiefComplaince entity)
		{
			this.SendPropertyChanging();
			entity.ClinicVisitHistory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lkp_Reffered")]
	public partial class lkp_Reffered : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Reffered_ID;
		
		private string _Reffered_Des;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReffered_IDChanging(int value);
    partial void OnReffered_IDChanged();
    partial void OnReffered_DesChanging(string value);
    partial void OnReffered_DesChanged();
    #endregion
		
		public lkp_Reffered()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reffered_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Reffered_ID
		{
			get
			{
				return this._Reffered_ID;
			}
			set
			{
				if ((this._Reffered_ID != value))
				{
					this.OnReffered_IDChanging(value);
					this.SendPropertyChanging();
					this._Reffered_ID = value;
					this.SendPropertyChanged("Reffered_ID");
					this.OnReffered_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reffered_Des", DbType="NVarChar(150)")]
		public string Reffered_Des
		{
			get
			{
				return this._Reffered_Des;
			}
			set
			{
				if ((this._Reffered_Des != value))
				{
					this.OnReffered_DesChanging(value);
					this.SendPropertyChanging();
					this._Reffered_Des = value;
					this.SendPropertyChanged("Reffered_Des");
					this.OnReffered_DesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProvisionalDx")]
	public partial class ProvisionalDx : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProClinicVisitID;
		
		private int _ProvisionalCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProClinicVisitIDChanging(int value);
    partial void OnProClinicVisitIDChanged();
    partial void OnProvisionalCodeChanging(int value);
    partial void OnProvisionalCodeChanged();
    #endregion
		
		public ProvisionalDx()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProClinicVisitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProClinicVisitID
		{
			get
			{
				return this._ProClinicVisitID;
			}
			set
			{
				if ((this._ProClinicVisitID != value))
				{
					this.OnProClinicVisitIDChanging(value);
					this.SendPropertyChanging();
					this._ProClinicVisitID = value;
					this.SendPropertyChanged("ProClinicVisitID");
					this.OnProClinicVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvisionalCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProvisionalCode
		{
			get
			{
				return this._ProvisionalCode;
			}
			set
			{
				if ((this._ProvisionalCode != value))
				{
					this.OnProvisionalCodeChanging(value);
					this.SendPropertyChanging();
					this._ProvisionalCode = value;
					this.SendPropertyChanged("ProvisionalCode");
					this.OnProvisionalCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DifferentialDx")]
	public partial class DifferentialDx : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitID;
		
		private short _DifferentialDxCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(int value);
    partial void OnVisitIDChanged();
    partial void OnDifferentialDxCodeChanging(short value);
    partial void OnDifferentialDxCodeChanged();
    #endregion
		
		public DifferentialDx()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DifferentialDxCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short DifferentialDxCode
		{
			get
			{
				return this._DifferentialDxCode;
			}
			set
			{
				if ((this._DifferentialDxCode != value))
				{
					this.OnDifferentialDxCodeChanging(value);
					this.SendPropertyChanging();
					this._DifferentialDxCode = value;
					this.SendPropertyChanged("DifferentialDxCode");
					this.OnDifferentialDxCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConfirmDx")]
	public partial class ConfirmDx : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitID;
		
		private short _ConfirmDxCode;
		
		private System.Nullable<System.DateTime> _VisitDt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(int value);
    partial void OnVisitIDChanged();
    partial void OnConfirmDxCodeChanging(short value);
    partial void OnConfirmDxCodeChanged();
    partial void OnVisitDtChanging(System.Nullable<System.DateTime> value);
    partial void OnVisitDtChanged();
    #endregion
		
		public ConfirmDx()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmDxCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ConfirmDxCode
		{
			get
			{
				return this._ConfirmDxCode;
			}
			set
			{
				if ((this._ConfirmDxCode != value))
				{
					this.OnConfirmDxCodeChanging(value);
					this.SendPropertyChanging();
					this._ConfirmDxCode = value;
					this.SendPropertyChanged("ConfirmDxCode");
					this.OnConfirmDxCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitDt", DbType="Date")]
		public System.Nullable<System.DateTime> VisitDt
		{
			get
			{
				return this._VisitDt;
			}
			set
			{
				if ((this._VisitDt != value))
				{
					this.OnVisitDtChanging(value);
					this.SendPropertyChanging();
					this._VisitDt = value;
					this.SendPropertyChanged("VisitDt");
					this.OnVisitDtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicineDetails")]
	public partial class MedicineDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitID;
		
		private short _MedicineCode;
		
		private System.Nullable<System.DateTime> _MedVisitDt;
		
		private System.Nullable<short> _MedQty;
		
		private System.Nullable<short> _FrequencyCode;
		
		private System.Nullable<byte> _TreatmentCode;
		
		private System.Nullable<decimal> _MedicinePrices;
		
		private bool _MedDispuse;
		
		private System.Nullable<short> _MedReqQty;
		
		private System.Nullable<System.DateTime> _MedDispuseDt;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(int value);
    partial void OnVisitIDChanged();
    partial void OnMedicineCodeChanging(short value);
    partial void OnMedicineCodeChanged();
    partial void OnMedVisitDtChanging(System.Nullable<System.DateTime> value);
    partial void OnMedVisitDtChanged();
    partial void OnMedQtyChanging(System.Nullable<short> value);
    partial void OnMedQtyChanged();
    partial void OnFrequencyCodeChanging(System.Nullable<short> value);
    partial void OnFrequencyCodeChanged();
    partial void OnTreatmentCodeChanging(System.Nullable<byte> value);
    partial void OnTreatmentCodeChanged();
    partial void OnMedicinePricesChanging(System.Nullable<decimal> value);
    partial void OnMedicinePricesChanged();
    partial void OnMedDispuseChanging(bool value);
    partial void OnMedDispuseChanged();
    partial void OnMedReqQtyChanging(System.Nullable<short> value);
    partial void OnMedReqQtyChanged();
    partial void OnMedDispuseDtChanging(System.Nullable<System.DateTime> value);
    partial void OnMedDispuseDtChanged();
    #endregion
		
		public MedicineDetail()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MedicineCode
		{
			get
			{
				return this._MedicineCode;
			}
			set
			{
				if ((this._MedicineCode != value))
				{
					this.OnMedicineCodeChanging(value);
					this.SendPropertyChanging();
					this._MedicineCode = value;
					this.SendPropertyChanged("MedicineCode");
					this.OnMedicineCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedVisitDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> MedVisitDt
		{
			get
			{
				return this._MedVisitDt;
			}
			set
			{
				if ((this._MedVisitDt != value))
				{
					this.OnMedVisitDtChanging(value);
					this.SendPropertyChanging();
					this._MedVisitDt = value;
					this.SendPropertyChanged("MedVisitDt");
					this.OnMedVisitDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedQty", DbType="SmallInt")]
		public System.Nullable<short> MedQty
		{
			get
			{
				return this._MedQty;
			}
			set
			{
				if ((this._MedQty != value))
				{
					this.OnMedQtyChanging(value);
					this.SendPropertyChanging();
					this._MedQty = value;
					this.SendPropertyChanged("MedQty");
					this.OnMedQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FrequencyCode", DbType="SmallInt")]
		public System.Nullable<short> FrequencyCode
		{
			get
			{
				return this._FrequencyCode;
			}
			set
			{
				if ((this._FrequencyCode != value))
				{
					this.OnFrequencyCodeChanging(value);
					this.SendPropertyChanging();
					this._FrequencyCode = value;
					this.SendPropertyChanged("FrequencyCode");
					this.OnFrequencyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatmentCode", DbType="TinyInt")]
		public System.Nullable<byte> TreatmentCode
		{
			get
			{
				return this._TreatmentCode;
			}
			set
			{
				if ((this._TreatmentCode != value))
				{
					this.OnTreatmentCodeChanging(value);
					this.SendPropertyChanging();
					this._TreatmentCode = value;
					this.SendPropertyChanged("TreatmentCode");
					this.OnTreatmentCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicinePrices", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> MedicinePrices
		{
			get
			{
				return this._MedicinePrices;
			}
			set
			{
				if ((this._MedicinePrices != value))
				{
					this.OnMedicinePricesChanging(value);
					this.SendPropertyChanging();
					this._MedicinePrices = value;
					this.SendPropertyChanged("MedicinePrices");
					this.OnMedicinePricesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedDispuse", DbType="Bit NOT NULL")]
		public bool MedDispuse
		{
			get
			{
				return this._MedDispuse;
			}
			set
			{
				if ((this._MedDispuse != value))
				{
					this.OnMedDispuseChanging(value);
					this.SendPropertyChanging();
					this._MedDispuse = value;
					this.SendPropertyChanged("MedDispuse");
					this.OnMedDispuseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedReqQty", DbType="SmallInt")]
		public System.Nullable<short> MedReqQty
		{
			get
			{
				return this._MedReqQty;
			}
			set
			{
				if ((this._MedReqQty != value))
				{
					this.OnMedReqQtyChanging(value);
					this.SendPropertyChanging();
					this._MedReqQty = value;
					this.SendPropertyChanged("MedReqQty");
					this.OnMedReqQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedDispuseDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> MedDispuseDt
		{
			get
			{
				return this._MedDispuseDt;
			}
			set
			{
				if ((this._MedDispuseDt != value))
				{
					this.OnMedDispuseDtChanging(value);
					this.SendPropertyChanging();
					this._MedDispuseDt = value;
					this.SendPropertyChanged("MedDispuseDt");
					this.OnMedDispuseDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_MedicineDetail", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="ClinicVisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.MedicineDetails.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.MedicineDetails.Add(this);
						this._VisitID = value.ClinicVisitID;
					}
					else
					{
						this._VisitID = default(int);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DentalSign")]
	public partial class DentalSign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DenSignVisitID;
		
		private int _DenSignCode;
		
		private string _SignTeethNo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDenSignVisitIDChanging(int value);
    partial void OnDenSignVisitIDChanged();
    partial void OnDenSignCodeChanging(int value);
    partial void OnDenSignCodeChanged();
    partial void OnSignTeethNoChanging(string value);
    partial void OnSignTeethNoChanged();
    #endregion
		
		public DentalSign()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DenSignVisitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DenSignVisitID
		{
			get
			{
				return this._DenSignVisitID;
			}
			set
			{
				if ((this._DenSignVisitID != value))
				{
					this.OnDenSignVisitIDChanging(value);
					this.SendPropertyChanging();
					this._DenSignVisitID = value;
					this.SendPropertyChanged("DenSignVisitID");
					this.OnDenSignVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DenSignCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DenSignCode
		{
			get
			{
				return this._DenSignCode;
			}
			set
			{
				if ((this._DenSignCode != value))
				{
					this.OnDenSignCodeChanging(value);
					this.SendPropertyChanging();
					this._DenSignCode = value;
					this.SendPropertyChanged("DenSignCode");
					this.OnDenSignCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignTeethNo", DbType="NVarChar(15)")]
		public string SignTeethNo
		{
			get
			{
				return this._SignTeethNo;
			}
			set
			{
				if ((this._SignTeethNo != value))
				{
					this.OnSignTeethNoChanging(value);
					this.SendPropertyChanging();
					this._SignTeethNo = value;
					this.SendPropertyChanged("SignTeethNo");
					this.OnSignTeethNoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DentalAdvice")]
	public partial class DentalAdvice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DenAdviceVisitID;
		
		private int _DenAdviceCode;
		
		private string _DenAdviceTeethNo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDenAdviceVisitIDChanging(int value);
    partial void OnDenAdviceVisitIDChanged();
    partial void OnDenAdviceCodeChanging(int value);
    partial void OnDenAdviceCodeChanged();
    partial void OnDenAdviceTeethNoChanging(string value);
    partial void OnDenAdviceTeethNoChanged();
    #endregion
		
		public DentalAdvice()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DenAdviceVisitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DenAdviceVisitID
		{
			get
			{
				return this._DenAdviceVisitID;
			}
			set
			{
				if ((this._DenAdviceVisitID != value))
				{
					this.OnDenAdviceVisitIDChanging(value);
					this.SendPropertyChanging();
					this._DenAdviceVisitID = value;
					this.SendPropertyChanged("DenAdviceVisitID");
					this.OnDenAdviceVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DenAdviceCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DenAdviceCode
		{
			get
			{
				return this._DenAdviceCode;
			}
			set
			{
				if ((this._DenAdviceCode != value))
				{
					this.OnDenAdviceCodeChanging(value);
					this.SendPropertyChanging();
					this._DenAdviceCode = value;
					this.SendPropertyChanged("DenAdviceCode");
					this.OnDenAdviceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DenAdviceTeethNo", DbType="NVarChar(15)")]
		public string DenAdviceTeethNo
		{
			get
			{
				return this._DenAdviceTeethNo;
			}
			set
			{
				if ((this._DenAdviceTeethNo != value))
				{
					this.OnDenAdviceTeethNoChanging(value);
					this.SendPropertyChanging();
					this._DenAdviceTeethNo = value;
					this.SendPropertyChanged("DenAdviceTeethNo");
					this.OnDenAdviceTeethNoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdviceBangla")]
	public partial class AdviceBangla : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitID;
		
		private short _AdviceCode;
		
		private System.Nullable<System.DateTime> _VisitDt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(int value);
    partial void OnVisitIDChanged();
    partial void OnAdviceCodeChanging(short value);
    partial void OnAdviceCodeChanged();
    partial void OnVisitDtChanging(System.Nullable<System.DateTime> value);
    partial void OnVisitDtChanged();
    #endregion
		
		public AdviceBangla()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdviceCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short AdviceCode
		{
			get
			{
				return this._AdviceCode;
			}
			set
			{
				if ((this._AdviceCode != value))
				{
					this.OnAdviceCodeChanging(value);
					this.SendPropertyChanging();
					this._AdviceCode = value;
					this.SendPropertyChanged("AdviceCode");
					this.OnAdviceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitDt", DbType="Date")]
		public System.Nullable<System.DateTime> VisitDt
		{
			get
			{
				return this._VisitDt;
			}
			set
			{
				if ((this._VisitDt != value))
				{
					this.OnVisitDtChanging(value);
					this.SendPropertyChanging();
					this._VisitDt = value;
					this.SendPropertyChanged("VisitDt");
					this.OnVisitDtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Investigations")]
	public partial class Investigation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitID;
		
		private short _InvestigationsCode;
		
		private System.Nullable<System.DateTime> _VisitDt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(int value);
    partial void OnVisitIDChanged();
    partial void OnInvestigationsCodeChanging(short value);
    partial void OnInvestigationsCodeChanged();
    partial void OnVisitDtChanging(System.Nullable<System.DateTime> value);
    partial void OnVisitDtChanged();
    #endregion
		
		public Investigation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvestigationsCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short InvestigationsCode
		{
			get
			{
				return this._InvestigationsCode;
			}
			set
			{
				if ((this._InvestigationsCode != value))
				{
					this.OnInvestigationsCodeChanging(value);
					this.SendPropertyChanging();
					this._InvestigationsCode = value;
					this.SendPropertyChanged("InvestigationsCode");
					this.OnInvestigationsCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitDt", DbType="Date")]
		public System.Nullable<System.DateTime> VisitDt
		{
			get
			{
				return this._VisitDt;
			}
			set
			{
				if ((this._VisitDt != value))
				{
					this.OnVisitDtChanging(value);
					this.SendPropertyChanging();
					this._VisitDt = value;
					this.SendPropertyChanged("VisitDt");
					this.OnVisitDtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PositiveFindings")]
	public partial class PositiveFinding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClinicVisitID;
		
		private short _PositiveCode;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClinicVisitIDChanging(int value);
    partial void OnClinicVisitIDChanged();
    partial void OnPositiveCodeChanging(short value);
    partial void OnPositiveCodeChanged();
    #endregion
		
		public PositiveFinding()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicVisitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClinicVisitID
		{
			get
			{
				return this._ClinicVisitID;
			}
			set
			{
				if ((this._ClinicVisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClinicVisitIDChanging(value);
					this.SendPropertyChanging();
					this._ClinicVisitID = value;
					this.SendPropertyChanged("ClinicVisitID");
					this.OnClinicVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositiveCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PositiveCode
		{
			get
			{
				return this._PositiveCode;
			}
			set
			{
				if ((this._PositiveCode != value))
				{
					this.OnPositiveCodeChanging(value);
					this.SendPropertyChanging();
					this._PositiveCode = value;
					this.SendPropertyChanged("PositiveCode");
					this.OnPositiveCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_PositiveFinding", Storage="_ClinicVisitHistory", ThisKey="ClinicVisitID", OtherKey="ClinicVisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.PositiveFindings.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.PositiveFindings.Add(this);
						this._ClinicVisitID = value.ClinicVisitID;
					}
					else
					{
						this._ClinicVisitID = default(int);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NegativeFindings")]
	public partial class NegativeFinding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClinicVisitID;
		
		private short _NegativeCode;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClinicVisitIDChanging(int value);
    partial void OnClinicVisitIDChanged();
    partial void OnNegativeCodeChanging(short value);
    partial void OnNegativeCodeChanged();
    #endregion
		
		public NegativeFinding()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicVisitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClinicVisitID
		{
			get
			{
				return this._ClinicVisitID;
			}
			set
			{
				if ((this._ClinicVisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClinicVisitIDChanging(value);
					this.SendPropertyChanging();
					this._ClinicVisitID = value;
					this.SendPropertyChanged("ClinicVisitID");
					this.OnClinicVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NegativeCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short NegativeCode
		{
			get
			{
				return this._NegativeCode;
			}
			set
			{
				if ((this._NegativeCode != value))
				{
					this.OnNegativeCodeChanging(value);
					this.SendPropertyChanging();
					this._NegativeCode = value;
					this.SendPropertyChanged("NegativeCode");
					this.OnNegativeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_NegativeFinding", Storage="_ClinicVisitHistory", ThisKey="ClinicVisitID", OtherKey="ClinicVisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.NegativeFindings.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.NegativeFindings.Add(this);
						this._ClinicVisitID = value.ClinicVisitID;
					}
					else
					{
						this._ClinicVisitID = default(int);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChiefComplaince")]
	public partial class ChiefComplaince : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitID;
		
		private short _CCCode;
		
		private byte _DurationYY;
		
		private byte _DurationMM;
		
		private byte _DurationDD;
		
		private EntityRef<ClinicVisitHistory> _ClinicVisitHistory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(int value);
    partial void OnVisitIDChanged();
    partial void OnCCCodeChanging(short value);
    partial void OnCCCodeChanged();
    partial void OnDurationYYChanging(byte value);
    partial void OnDurationYYChanged();
    partial void OnDurationMMChanging(byte value);
    partial void OnDurationMMChanged();
    partial void OnDurationDDChanging(byte value);
    partial void OnDurationDDChanged();
    #endregion
		
		public ChiefComplaince()
		{
			this._ClinicVisitHistory = default(EntityRef<ClinicVisitHistory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._ClinicVisitHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCCode", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short CCCode
		{
			get
			{
				return this._CCCode;
			}
			set
			{
				if ((this._CCCode != value))
				{
					this.OnCCCodeChanging(value);
					this.SendPropertyChanging();
					this._CCCode = value;
					this.SendPropertyChanged("CCCode");
					this.OnCCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationYY", DbType="TinyInt NOT NULL")]
		public byte DurationYY
		{
			get
			{
				return this._DurationYY;
			}
			set
			{
				if ((this._DurationYY != value))
				{
					this.OnDurationYYChanging(value);
					this.SendPropertyChanging();
					this._DurationYY = value;
					this.SendPropertyChanged("DurationYY");
					this.OnDurationYYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationMM", DbType="TinyInt NOT NULL")]
		public byte DurationMM
		{
			get
			{
				return this._DurationMM;
			}
			set
			{
				if ((this._DurationMM != value))
				{
					this.OnDurationMMChanging(value);
					this.SendPropertyChanging();
					this._DurationMM = value;
					this.SendPropertyChanged("DurationMM");
					this.OnDurationMMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationDD", DbType="TinyInt NOT NULL")]
		public byte DurationDD
		{
			get
			{
				return this._DurationDD;
			}
			set
			{
				if ((this._DurationDD != value))
				{
					this.OnDurationDDChanging(value);
					this.SendPropertyChanging();
					this._DurationDD = value;
					this.SendPropertyChanged("DurationDD");
					this.OnDurationDDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicVisitHistory_ChiefComplaince", Storage="_ClinicVisitHistory", ThisKey="VisitID", OtherKey="ClinicVisitID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClinicVisitHistory ClinicVisitHistory
		{
			get
			{
				return this._ClinicVisitHistory.Entity;
			}
			set
			{
				ClinicVisitHistory previousValue = this._ClinicVisitHistory.Entity;
				if (((previousValue != value) 
							|| (this._ClinicVisitHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicVisitHistory.Entity = null;
						previousValue.ChiefComplainces.Remove(this);
					}
					this._ClinicVisitHistory.Entity = value;
					if ((value != null))
					{
						value.ChiefComplainces.Add(this);
						this._VisitID = value.ClinicVisitID;
					}
					else
					{
						this._VisitID = default(int);
					}
					this.SendPropertyChanged("ClinicVisitHistory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
